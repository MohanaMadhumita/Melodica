//
// Generated by Bluespec Compiler (build 16071ee)
//
// On Wed Sep 16 14:07:51 IST 2020
//
//
// Ports:
// Name                         I/O  size props
// RDY_compute_request_put        O     1
// compute_response_get           O    12 reg
// RDY_compute_response_get       O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// compute_request_put            I    16
// EN_compute_request_put         I     1
// EN_compute_response_get        I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPNE_test(CLK,
		  RST_N,

		  compute_request_put,
		  EN_compute_request_put,
		  RDY_compute_request_put,

		  EN_compute_response_get,
		  compute_response_get,
		  RDY_compute_response_get);
  input  CLK;
  input  RST_N;

  // action method compute_request_put
  input  [15 : 0] compute_request_put;
  input  EN_compute_request_put;
  output RDY_compute_request_put;

  // actionvalue method compute_response_get
  input  EN_compute_response_get;
  output [11 : 0] compute_response_get;
  output RDY_compute_response_get;

  // signals for module outputs
  wire [11 : 0] compute_response_get;
  wire RDY_compute_request_put, RDY_compute_response_get;

  // register divider_intDivide_rg_denom
  reg [4 : 0] divider_intDivide_rg_denom;
  wire [4 : 0] divider_intDivide_rg_denom$D_IN;
  wire divider_intDivide_rg_denom$EN;

  // register divider_intDivide_rg_denom2
  reg [10 : 0] divider_intDivide_rg_denom2;
  reg [10 : 0] divider_intDivide_rg_denom2$D_IN;
  wire divider_intDivide_rg_denom2$EN;

  // register divider_intDivide_rg_n
  reg [6 : 0] divider_intDivide_rg_n;
  reg [6 : 0] divider_intDivide_rg_n$D_IN;
  wire divider_intDivide_rg_n$EN;

  // register divider_intDivide_rg_numer
  reg [10 : 0] divider_intDivide_rg_numer;
  wire [10 : 0] divider_intDivide_rg_numer$D_IN;
  wire divider_intDivide_rg_numer$EN;

  // register divider_intDivide_rg_quo
  reg [6 : 0] divider_intDivide_rg_quo;
  wire [6 : 0] divider_intDivide_rg_quo$D_IN;
  wire divider_intDivide_rg_quo$EN;

  // register divider_intDivide_rg_state
  reg [1 : 0] divider_intDivide_rg_state;
  reg [1 : 0] divider_intDivide_rg_state$D_IN;
  wire divider_intDivide_rg_state$EN;

  // ports of submodule divider_fifo_output_reg
  wire [14 : 0] divider_fifo_output_reg$D_IN, divider_fifo_output_reg$D_OUT;
  wire divider_fifo_output_reg$CLR,
       divider_fifo_output_reg$DEQ,
       divider_fifo_output_reg$EMPTY_N,
       divider_fifo_output_reg$ENQ,
       divider_fifo_output_reg$FULL_N;

  // ports of submodule divider_fifo_stage0_reg
  wire [13 : 0] divider_fifo_stage0_reg$D_IN, divider_fifo_stage0_reg$D_OUT;
  wire divider_fifo_stage0_reg$CLR,
       divider_fifo_stage0_reg$DEQ,
       divider_fifo_stage0_reg$EMPTY_N,
       divider_fifo_stage0_reg$ENQ,
       divider_fifo_stage0_reg$FULL_N;

  // ports of submodule divider_fifo_stage1_reg
  wire [20 : 0] divider_fifo_stage1_reg$D_IN, divider_fifo_stage1_reg$D_OUT;
  wire divider_fifo_stage1_reg$CLR,
       divider_fifo_stage1_reg$DEQ,
       divider_fifo_stage1_reg$EMPTY_N,
       divider_fifo_stage1_reg$ENQ,
       divider_fifo_stage1_reg$FULL_N;

  // ports of submodule divider_intDivide_fifo_output_reg
  wire [8 : 0] divider_intDivide_fifo_output_reg$D_IN,
	       divider_intDivide_fifo_output_reg$D_OUT;
  wire divider_intDivide_fifo_output_reg$CLR,
       divider_intDivide_fifo_output_reg$DEQ,
       divider_intDivide_fifo_output_reg$EMPTY_N,
       divider_intDivide_fifo_output_reg$ENQ,
       divider_intDivide_fifo_output_reg$FULL_N;

  // ports of submodule extracter1_fifo_output_reg
  wire [11 : 0] extracter1_fifo_output_reg$D_IN,
		extracter1_fifo_output_reg$D_OUT;
  wire extracter1_fifo_output_reg$CLR,
       extracter1_fifo_output_reg$DEQ,
       extracter1_fifo_output_reg$EMPTY_N,
       extracter1_fifo_output_reg$ENQ,
       extracter1_fifo_output_reg$FULL_N;

  // ports of submodule extracter1_fifo_stage0_reg
  wire [9 : 0] extracter1_fifo_stage0_reg$D_IN;
  wire extracter1_fifo_stage0_reg$CLR,
       extracter1_fifo_stage0_reg$DEQ,
       extracter1_fifo_stage0_reg$ENQ;

  // ports of submodule extracter1_fifo_stage1_reg
  wire [14 : 0] extracter1_fifo_stage1_reg$D_IN;
  wire extracter1_fifo_stage1_reg$CLR,
       extracter1_fifo_stage1_reg$DEQ,
       extracter1_fifo_stage1_reg$ENQ;

  // ports of submodule extracter1_fifo_stage2_reg
  wire [12 : 0] extracter1_fifo_stage2_reg$D_IN;
  wire extracter1_fifo_stage2_reg$CLR,
       extracter1_fifo_stage2_reg$DEQ,
       extracter1_fifo_stage2_reg$ENQ;

  // ports of submodule extracter2_fifo_output_reg
  wire [11 : 0] extracter2_fifo_output_reg$D_IN,
		extracter2_fifo_output_reg$D_OUT;
  wire extracter2_fifo_output_reg$CLR,
       extracter2_fifo_output_reg$DEQ,
       extracter2_fifo_output_reg$EMPTY_N,
       extracter2_fifo_output_reg$ENQ,
       extracter2_fifo_output_reg$FULL_N;

  // ports of submodule extracter2_fifo_stage0_reg
  wire [9 : 0] extracter2_fifo_stage0_reg$D_IN;
  wire extracter2_fifo_stage0_reg$CLR,
       extracter2_fifo_stage0_reg$DEQ,
       extracter2_fifo_stage0_reg$ENQ;

  // ports of submodule extracter2_fifo_stage1_reg
  wire [14 : 0] extracter2_fifo_stage1_reg$D_IN;
  wire extracter2_fifo_stage1_reg$CLR,
       extracter2_fifo_stage1_reg$DEQ,
       extracter2_fifo_stage1_reg$ENQ;

  // ports of submodule extracter2_fifo_stage2_reg
  wire [12 : 0] extracter2_fifo_stage2_reg$D_IN;
  wire extracter2_fifo_stage2_reg$CLR,
       extracter2_fifo_stage2_reg$DEQ,
       extracter2_fifo_stage2_reg$ENQ;

  // ports of submodule ffO
  wire [11 : 0] ffO$D_IN, ffO$D_OUT;
  wire ffO$CLR, ffO$DEQ, ffO$EMPTY_N, ffO$ENQ, ffO$FULL_N;

  // ports of submodule ffm
  wire [11 : 0] ffm$D_IN;
  wire ffm$CLR, ffm$DEQ, ffm$ENQ;

  // ports of submodule normalizer_fifo_output_reg
  wire [11 : 0] normalizer_fifo_output_reg$D_IN,
		normalizer_fifo_output_reg$D_OUT;
  wire normalizer_fifo_output_reg$CLR,
       normalizer_fifo_output_reg$DEQ,
       normalizer_fifo_output_reg$EMPTY_N,
       normalizer_fifo_output_reg$ENQ,
       normalizer_fifo_output_reg$FULL_N;

  // ports of submodule normalizer_fifo_stage0_reg
  wire [17 : 0] normalizer_fifo_stage0_reg$D_IN;
  wire normalizer_fifo_stage0_reg$CLR,
       normalizer_fifo_stage0_reg$DEQ,
       normalizer_fifo_stage0_reg$ENQ;

  // ports of submodule normalizer_fifo_stage1_reg
  wire [20 : 0] normalizer_fifo_stage1_reg$D_IN;
  wire normalizer_fifo_stage1_reg$CLR,
       normalizer_fifo_stage1_reg$DEQ,
       normalizer_fifo_stage1_reg$ENQ;

  // ports of submodule normalizer_fifo_stage2_reg
  wire [11 : 0] normalizer_fifo_stage2_reg$D_IN;
  wire normalizer_fifo_stage2_reg$CLR,
       normalizer_fifo_stage2_reg$DEQ,
       normalizer_fifo_stage2_reg$ENQ;

  // rule scheduling signals
  wire CAN_FIRE_RL_divider_intDivide_rl_loop1,
       CAN_FIRE_RL_divider_intDivide_rl_loop2,
       CAN_FIRE_RL_divider_output_stage,
       CAN_FIRE_RL_divider_stage_1,
       CAN_FIRE_RL_rl_connect0,
       CAN_FIRE_RL_rl_connect2,
       CAN_FIRE_RL_rl_out,
       CAN_FIRE_compute_request_put,
       CAN_FIRE_compute_response_get,
       WILL_FIRE_RL_divider_intDivide_rl_loop1,
       WILL_FIRE_RL_divider_intDivide_rl_loop2,
       WILL_FIRE_RL_divider_output_stage,
       WILL_FIRE_RL_divider_stage_1,
       WILL_FIRE_RL_rl_connect0,
       WILL_FIRE_RL_rl_connect2,
       WILL_FIRE_RL_rl_out,
       WILL_FIRE_compute_request_put,
       WILL_FIRE_compute_response_get;

  // inputs to muxes for submodule ports
  wire [10 : 0] MUX_divider_intDivide_rg_denom2$write_1__VAL_1,
		MUX_divider_intDivide_rg_denom2$write_1__VAL_2,
		MUX_divider_intDivide_rg_denom2$write_1__VAL_3,
		MUX_divider_intDivide_rg_numer$write_1__VAL_1,
		MUX_divider_intDivide_rg_numer$write_1__VAL_2;
  wire [8 : 0] MUX_divider_intDivide_fifo_output_reg$enq_1__VAL_1,
	       MUX_divider_intDivide_fifo_output_reg$enq_1__VAL_2;
  wire [6 : 0] MUX_divider_intDivide_rg_n$write_1__VAL_1,
	       MUX_divider_intDivide_rg_n$write_1__VAL_3,
	       MUX_divider_intDivide_rg_quo$write_1__VAL_1,
	       MUX_divider_intDivide_rg_quo$write_1__VAL_2;
  wire [1 : 0] MUX_divider_intDivide_rg_state$write_1__VAL_3;
  wire MUX_divider_intDivide_fifo_output_reg$enq_1__SEL_1,
       MUX_divider_intDivide_rg_denom2$write_1__SEL_1,
       MUX_divider_intDivide_rg_denom2$write_1__SEL_2,
       MUX_divider_intDivide_rg_denom2$write_1__SEL_3,
       MUX_divider_intDivide_rg_numer$write_1__SEL_2,
       MUX_divider_intDivide_rg_state$write_1__SEL_2;

  // remaining internal signals
  reg [7 : 0] output_regf_out_posit__h5645;
  reg [3 : 0] x__h10987, x__h13688;
  reg CASE_shift_new0621_0_NOT_divider_fifo_output_r_ETC__q8,
      CASE_shift_new0621_0_divider_fifo_output_regD_ETC__q7;
  wire [31 : 0] x__h4433, x__h4514;
  wire [10 : 0] y__h1572, y__h1669;
  wire [8 : 0] IF_compute_request_put_BITS_14_TO_8_96_EQ_0_97_ETC___d496,
	       IF_compute_request_put_BITS_6_TO_0_98_EQ_0_99__ETC___d598;
  wire [6 : 0] IF_IF_NOT_IF_divider_fifo_output_reg_first__15_ETC___d343,
	       IF_NOT_IF_divider_fifo_output_reg_first__15_BI_ETC___d339,
	       IF_divider_fifo_output_reg_first__15_BIT_10_20_ETC___d260,
	       INV_new_inp1082__q2,
	       INV_new_inp369__q1,
	       a__h5668,
	       b__h5789,
	       b__h5915,
	       b__h6564,
	       b__h7777,
	       divider_fifo_stage1_regD_OUT_BITS_11_TO_5__q4,
	       frac__h1952,
	       k__h5977,
	       k__h6022,
	       k_expo__h5624,
	       new_inp__h11082,
	       new_inp__h8369,
	       x__h4167,
	       x__h4248,
	       x__h5805,
	       x__h6034,
	       y__h5806,
	       y__h5807;
  wire [4 : 0] IF_IF_IF_NOT_divider_fifo_stage0_reg_first__2__ETC___d99,
	       IF_IF_NOT_divider_fifo_stage0_reg_first__2_BIT_ETC___d95,
	       IF_IF_NOT_divider_fifo_stage0_reg_first__2_BIT_ETC__q13,
	       IF_IF_NOT_divider_fifo_stage0_reg_first__2_BIT_ETC__q14,
	       IF_NOT_divider_fifo_stage0_reg_first__2_BIT_9__ETC___d88,
	       IF_NOT_divider_fifo_stage0_reg_first__2_BIT_9__ETC___d91,
	       NEG_divider_fifo_stage0_reg_first__2_BITS_4_TO_ETC___d76,
	       SEXT_IF_IF_compute_request_put_BIT_15_98_THEN__ETC___d442,
	       SEXT_IF_IF_compute_request_put_BIT_7_00_THEN_0_ETC___d544,
	       SEXT_IF_new_inp1082_BIT_6_THEN_b1430_ELSE_b14321__q12,
	       SEXT_IF_new_inp369_BIT_6_THEN_b729_ELSE_b731__q10,
	       denom__h5117,
	       divider_fifo_stage0_reg_first__2_BITS_9_TO_5_0_ETC___d81,
	       numer__h5116,
	       x__h7291;
  wire [3 : 0] IF_new_inp1082_BIT_6_THEN_b1430_ELSE_b1432__q11,
	       IF_new_inp369_BIT_6_THEN_b729_ELSE_b731__q9,
	       _0_MINUS_divider_fifo_output_regD_OUT_BITS_10__ETC__q3,
	       b__h11430,
	       b__h11432,
	       b__h8729,
	       b__h8731,
	       divider_fifo_output_regD_OUT_BITS_5_TO_2__q6,
	       frac__h11090,
	       frac__h8377,
	       output_regf_frac__h4112,
	       x291_BITS_3_TO_0__q5,
	       x__h12451,
	       x__h9750;
  wire [2 : 0] IF_6_MINUS_IF_divider_fifo_output_reg_first__1_ETC___d253,
	       IF_IF_IF_NOT_divider_fifo_stage0_reg_first__2__ETC___d106,
	       IF_IF_compute_request_put_BIT_15_98_THEN_0_MIN_ETC___d471,
	       IF_IF_compute_request_put_BIT_7_00_THEN_0_MINU_ETC___d573,
	       IF_divider_fifo_output_reg_first__15_BIT_9_26__ETC___d232,
	       IF_divider_fifo_stage1_reg_first__13_BIT_2_19__ETC___d123,
	       _4_MINUS_IF_6_MINUS_IF_divider_fifo_output_reg__ETC___d277,
	       _6_MINUS_IF_divider_fifo_output_reg_first__15_B_ETC___d239,
	       divider_fifo_output_reg_first__15_BITS_9_TO_7__ETC___d228,
	       x__h10938,
	       x__h11440,
	       x__h12458,
	       x__h13639,
	       x__h2034,
	       x__h4236,
	       x__h4276,
	       x__h4397,
	       x__h6020,
	       x__h7465,
	       x__h7625,
	       x__h8739,
	       x__h9757;
  wire [1 : 0] IF_extracter1_fifo_output_reg_first__62_BITS_1_ETC___d169,
	       _theResult___snd_snd__h6745,
	       i1__h7515,
	       i__h7418,
	       shift_new0__h5621,
	       shift_new__h6692,
	       x__h6696;
  wire IF_IF_6_MINUS_IF_divider_fifo_output_reg_first_ETC___d314,
       IF_IF_NOT_divider_fifo_stage0_reg_first__2_BIT_ETC___d96,
       IF_IF_NOT_divider_fifo_stage0_reg_first__2_BIT_ETC___d97,
       NOT_4_MINUS_IF_6_MINUS_IF_divider_fifo_output__ETC___d331,
       NOT_4_MINUS_IF_6_MINUS_IF_divider_fifo_output__ETC___d375,
       NOT_6_MINUS_IF_divider_fifo_output_reg_first___ETC___d281,
       NOT_6_MINUS_IF_divider_fifo_output_reg_first___ETC___d291,
       NOT_6_MINUS_IF_divider_fifo_output_reg_first___ETC___d347,
       NOT_6_MINUS_IF_divider_fifo_output_reg_first___ETC___d353,
       NOT_6_MINUS_IF_divider_fifo_output_reg_first___ETC___d372,
       NOT_6_MINUS_IF_divider_fifo_output_reg_first___ETC___d376,
       NOT_IF_divider_fifo_output_reg_first__15_BIT_1_ETC___d265,
       NOT_NOT_6_MINUS_IF_divider_fifo_output_reg_fir_ETC___d304,
       _4_MINUS_IF_6_MINUS_IF_divider_fifo_output_reg__ETC___d316,
       _theResult____h5631,
       _theResult___fst__h6596,
       divider_fifo_output_reg_first__15_BITS_5_TO_2__ETC___d287,
       divider_fifo_output_reg_first__15_BIT_0_94_AND_ETC___d297,
       divider_fifo_output_reg_first__15_BIT_0_94_AND_ETC___d301,
       divider_fifo_output_reg_first__15_BIT_6_41_AND_ETC___d244,
       divider_intDivide_rg_denom2_ULE_0_CONCAT_divid_ETC___d7,
       divider_intDivide_rg_numer_ULT_0_CONCAT_divide_ETC___d16,
       divider_intDivide_rg_numer_ULT_divider_intDivi_ETC___d27,
       expo__h11089,
       expo__h8376,
       expo_new__h6662,
       expo_new__h6693,
       flag_prev_truncate__h5630,
       mask_e__h6594,
       truncated_frac_msb__h5626,
       x__h1846,
       x__h4285,
       x__h4402,
       x__h4421,
       x__h4423,
       x__h5427,
       x__h5535,
       x__h6567,
       x__h7310,
       y__h3059,
       y__h4422,
       y__h7505,
       y__h7509;

  // action method compute_request_put
  assign RDY_compute_request_put =
	     extracter1_fifo_output_reg$FULL_N &&
	     extracter2_fifo_output_reg$FULL_N ;
  assign CAN_FIRE_compute_request_put =
	     extracter1_fifo_output_reg$FULL_N &&
	     extracter2_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_compute_request_put = EN_compute_request_put ;

  // actionvalue method compute_response_get
  assign compute_response_get = ffO$D_OUT ;
  assign RDY_compute_response_get = ffO$EMPTY_N ;
  assign CAN_FIRE_compute_response_get = ffO$EMPTY_N ;
  assign WILL_FIRE_compute_response_get = EN_compute_response_get ;

  // submodule divider_fifo_output_reg
  FIFO2 #(.width(32'd15),
	  .guarded(32'd1)) divider_fifo_output_reg(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(divider_fifo_output_reg$D_IN),
						   .ENQ(divider_fifo_output_reg$ENQ),
						   .DEQ(divider_fifo_output_reg$DEQ),
						   .CLR(divider_fifo_output_reg$CLR),
						   .D_OUT(divider_fifo_output_reg$D_OUT),
						   .FULL_N(divider_fifo_output_reg$FULL_N),
						   .EMPTY_N(divider_fifo_output_reg$EMPTY_N));

  // submodule divider_fifo_stage0_reg
  FIFO2 #(.width(32'd14),
	  .guarded(32'd1)) divider_fifo_stage0_reg(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(divider_fifo_stage0_reg$D_IN),
						   .ENQ(divider_fifo_stage0_reg$ENQ),
						   .DEQ(divider_fifo_stage0_reg$DEQ),
						   .CLR(divider_fifo_stage0_reg$CLR),
						   .D_OUT(divider_fifo_stage0_reg$D_OUT),
						   .FULL_N(divider_fifo_stage0_reg$FULL_N),
						   .EMPTY_N(divider_fifo_stage0_reg$EMPTY_N));

  // submodule divider_fifo_stage1_reg
  FIFO2 #(.width(32'd21),
	  .guarded(32'd1)) divider_fifo_stage1_reg(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(divider_fifo_stage1_reg$D_IN),
						   .ENQ(divider_fifo_stage1_reg$ENQ),
						   .DEQ(divider_fifo_stage1_reg$DEQ),
						   .CLR(divider_fifo_stage1_reg$CLR),
						   .D_OUT(divider_fifo_stage1_reg$D_OUT),
						   .FULL_N(divider_fifo_stage1_reg$FULL_N),
						   .EMPTY_N(divider_fifo_stage1_reg$EMPTY_N));

  // submodule divider_intDivide_fifo_output_reg
  FIFO2 #(.width(32'd9),
	  .guarded(32'd1)) divider_intDivide_fifo_output_reg(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(divider_intDivide_fifo_output_reg$D_IN),
							     .ENQ(divider_intDivide_fifo_output_reg$ENQ),
							     .DEQ(divider_intDivide_fifo_output_reg$DEQ),
							     .CLR(divider_intDivide_fifo_output_reg$CLR),
							     .D_OUT(divider_intDivide_fifo_output_reg$D_OUT),
							     .FULL_N(divider_intDivide_fifo_output_reg$FULL_N),
							     .EMPTY_N(divider_intDivide_fifo_output_reg$EMPTY_N));

  // submodule extracter1_fifo_output_reg
  FIFO2 #(.width(32'd12),
	  .guarded(32'd1)) extracter1_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_output_reg$D_IN),
						      .ENQ(extracter1_fifo_output_reg$ENQ),
						      .DEQ(extracter1_fifo_output_reg$DEQ),
						      .CLR(extracter1_fifo_output_reg$CLR),
						      .D_OUT(extracter1_fifo_output_reg$D_OUT),
						      .FULL_N(extracter1_fifo_output_reg$FULL_N),
						      .EMPTY_N(extracter1_fifo_output_reg$EMPTY_N));

  // submodule extracter1_fifo_stage0_reg
  FIFO2 #(.width(32'd10),
	  .guarded(32'd1)) extracter1_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_stage0_reg$D_IN),
						      .ENQ(extracter1_fifo_stage0_reg$ENQ),
						      .DEQ(extracter1_fifo_stage0_reg$DEQ),
						      .CLR(extracter1_fifo_stage0_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter1_fifo_stage1_reg
  FIFO2 #(.width(32'd15),
	  .guarded(32'd1)) extracter1_fifo_stage1_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_stage1_reg$D_IN),
						      .ENQ(extracter1_fifo_stage1_reg$ENQ),
						      .DEQ(extracter1_fifo_stage1_reg$DEQ),
						      .CLR(extracter1_fifo_stage1_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter1_fifo_stage2_reg
  FIFO2 #(.width(32'd13),
	  .guarded(32'd1)) extracter1_fifo_stage2_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_stage2_reg$D_IN),
						      .ENQ(extracter1_fifo_stage2_reg$ENQ),
						      .DEQ(extracter1_fifo_stage2_reg$DEQ),
						      .CLR(extracter1_fifo_stage2_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter2_fifo_output_reg
  FIFO2 #(.width(32'd12),
	  .guarded(32'd1)) extracter2_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_output_reg$D_IN),
						      .ENQ(extracter2_fifo_output_reg$ENQ),
						      .DEQ(extracter2_fifo_output_reg$DEQ),
						      .CLR(extracter2_fifo_output_reg$CLR),
						      .D_OUT(extracter2_fifo_output_reg$D_OUT),
						      .FULL_N(extracter2_fifo_output_reg$FULL_N),
						      .EMPTY_N(extracter2_fifo_output_reg$EMPTY_N));

  // submodule extracter2_fifo_stage0_reg
  FIFO2 #(.width(32'd10),
	  .guarded(32'd1)) extracter2_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_stage0_reg$D_IN),
						      .ENQ(extracter2_fifo_stage0_reg$ENQ),
						      .DEQ(extracter2_fifo_stage0_reg$DEQ),
						      .CLR(extracter2_fifo_stage0_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter2_fifo_stage1_reg
  FIFO2 #(.width(32'd15),
	  .guarded(32'd1)) extracter2_fifo_stage1_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_stage1_reg$D_IN),
						      .ENQ(extracter2_fifo_stage1_reg$ENQ),
						      .DEQ(extracter2_fifo_stage1_reg$DEQ),
						      .CLR(extracter2_fifo_stage1_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter2_fifo_stage2_reg
  FIFO2 #(.width(32'd13),
	  .guarded(32'd1)) extracter2_fifo_stage2_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_stage2_reg$D_IN),
						      .ENQ(extracter2_fifo_stage2_reg$ENQ),
						      .DEQ(extracter2_fifo_stage2_reg$DEQ),
						      .CLR(extracter2_fifo_stage2_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule ffO
  FIFO2 #(.width(32'd12), .guarded(32'd1)) ffO(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(ffO$D_IN),
					       .ENQ(ffO$ENQ),
					       .DEQ(ffO$DEQ),
					       .CLR(ffO$CLR),
					       .D_OUT(ffO$D_OUT),
					       .FULL_N(ffO$FULL_N),
					       .EMPTY_N(ffO$EMPTY_N));

  // submodule ffm
  FIFO2 #(.width(32'd12), .guarded(32'd1)) ffm(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(ffm$D_IN),
					       .ENQ(ffm$ENQ),
					       .DEQ(ffm$DEQ),
					       .CLR(ffm$CLR),
					       .D_OUT(),
					       .FULL_N(),
					       .EMPTY_N());

  // submodule normalizer_fifo_output_reg
  FIFO2 #(.width(32'd12),
	  .guarded(32'd1)) normalizer_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_output_reg$D_IN),
						      .ENQ(normalizer_fifo_output_reg$ENQ),
						      .DEQ(normalizer_fifo_output_reg$DEQ),
						      .CLR(normalizer_fifo_output_reg$CLR),
						      .D_OUT(normalizer_fifo_output_reg$D_OUT),
						      .FULL_N(normalizer_fifo_output_reg$FULL_N),
						      .EMPTY_N(normalizer_fifo_output_reg$EMPTY_N));

  // submodule normalizer_fifo_stage0_reg
  FIFO2 #(.width(32'd18),
	  .guarded(32'd1)) normalizer_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_stage0_reg$D_IN),
						      .ENQ(normalizer_fifo_stage0_reg$ENQ),
						      .DEQ(normalizer_fifo_stage0_reg$DEQ),
						      .CLR(normalizer_fifo_stage0_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule normalizer_fifo_stage1_reg
  FIFO2 #(.width(32'd21),
	  .guarded(32'd1)) normalizer_fifo_stage1_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_stage1_reg$D_IN),
						      .ENQ(normalizer_fifo_stage1_reg$ENQ),
						      .DEQ(normalizer_fifo_stage1_reg$DEQ),
						      .CLR(normalizer_fifo_stage1_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule normalizer_fifo_stage2_reg
  FIFO2 #(.width(32'd12),
	  .guarded(32'd1)) normalizer_fifo_stage2_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_stage2_reg$D_IN),
						      .ENQ(normalizer_fifo_stage2_reg$ENQ),
						      .DEQ(normalizer_fifo_stage2_reg$DEQ),
						      .CLR(normalizer_fifo_stage2_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // rule RL_rl_connect0
  assign CAN_FIRE_RL_rl_connect0 =
	     (divider_intDivide_rg_state == 2'd0 ||
	      divider_intDivide_rg_state == 2'd3) &&
	     extracter1_fifo_output_reg$EMPTY_N &&
	     extracter2_fifo_output_reg$EMPTY_N &&
	     divider_fifo_stage0_reg$FULL_N &&
	     (denom__h5117 != 5'd0 ||
	      divider_intDivide_fifo_output_reg$FULL_N) ;
  assign WILL_FIRE_RL_rl_connect0 = CAN_FIRE_RL_rl_connect0 ;

  // rule RL_rl_connect2
  assign CAN_FIRE_RL_rl_connect2 =
	     divider_fifo_output_reg$EMPTY_N &&
	     normalizer_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_rl_connect2 = CAN_FIRE_RL_rl_connect2 ;

  // rule RL_rl_out
  assign CAN_FIRE_RL_rl_out =
	     normalizer_fifo_output_reg$EMPTY_N && ffO$FULL_N ;
  assign WILL_FIRE_RL_rl_out = CAN_FIRE_RL_rl_out ;

  // rule RL_divider_stage_1
  assign CAN_FIRE_RL_divider_stage_1 =
	     divider_intDivide_fifo_output_reg$EMPTY_N &&
	     divider_fifo_stage0_reg$EMPTY_N &&
	     divider_fifo_stage1_reg$FULL_N ;
  assign WILL_FIRE_RL_divider_stage_1 = CAN_FIRE_RL_divider_stage_1 ;

  // rule RL_divider_output_stage
  assign CAN_FIRE_RL_divider_output_stage =
	     divider_fifo_stage1_reg$EMPTY_N &&
	     divider_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_divider_output_stage =
	     CAN_FIRE_RL_divider_output_stage ;

  // rule RL_divider_intDivide_rl_loop1
  assign CAN_FIRE_RL_divider_intDivide_rl_loop1 =
	     divider_intDivide_rg_state == 2'd1 ;
  assign WILL_FIRE_RL_divider_intDivide_rl_loop1 =
	     CAN_FIRE_RL_divider_intDivide_rl_loop1 ;

  // rule RL_divider_intDivide_rl_loop2
  assign CAN_FIRE_RL_divider_intDivide_rl_loop2 =
	     (!divider_intDivide_rg_numer_ULT_0_CONCAT_divide_ETC___d16 ||
	      divider_intDivide_fifo_output_reg$FULL_N) &&
	     divider_intDivide_rg_state == 2'd2 ;
  assign WILL_FIRE_RL_divider_intDivide_rl_loop2 =
	     CAN_FIRE_RL_divider_intDivide_rl_loop2 ;

  // inputs to muxes for submodule ports
  assign MUX_divider_intDivide_fifo_output_reg$enq_1__SEL_1 =
	     WILL_FIRE_RL_divider_intDivide_rl_loop2 &&
	     divider_intDivide_rg_numer_ULT_0_CONCAT_divide_ETC___d16 ;
  assign MUX_divider_intDivide_rg_denom2$write_1__SEL_1 =
	     WILL_FIRE_RL_divider_intDivide_rl_loop1 &&
	     divider_intDivide_rg_denom2_ULE_0_CONCAT_divid_ETC___d7 ;
  assign MUX_divider_intDivide_rg_denom2$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_connect0 && denom__h5117 != 5'd0 ;
  assign MUX_divider_intDivide_rg_denom2$write_1__SEL_3 =
	     WILL_FIRE_RL_divider_intDivide_rl_loop2 &&
	     !divider_intDivide_rg_numer_ULT_0_CONCAT_divide_ETC___d16 &&
	     divider_intDivide_rg_numer_ULT_divider_intDivi_ETC___d27 ;
  assign MUX_divider_intDivide_rg_numer$write_1__SEL_2 =
	     WILL_FIRE_RL_divider_intDivide_rl_loop2 &&
	     !divider_intDivide_rg_numer_ULT_0_CONCAT_divide_ETC___d16 &&
	     !divider_intDivide_rg_numer_ULT_divider_intDivi_ETC___d27 ;
  assign MUX_divider_intDivide_rg_state$write_1__SEL_2 =
	     WILL_FIRE_RL_divider_intDivide_rl_loop1 &&
	     !divider_intDivide_rg_denom2_ULE_0_CONCAT_divid_ETC___d7 ;
  assign MUX_divider_intDivide_fifo_output_reg$enq_1__VAL_1 =
	     { divider_intDivide_rg_quo,
	       divider_intDivide_rg_numer[4],
	       x__h1846 } ;
  assign MUX_divider_intDivide_fifo_output_reg$enq_1__VAL_2 =
	     { divider_intDivide_rg_quo, 2'd1 } ;
  assign MUX_divider_intDivide_rg_denom2$write_1__VAL_1 =
	     { divider_intDivide_rg_denom2[9:0], 1'd0 } ;
  assign MUX_divider_intDivide_rg_denom2$write_1__VAL_2 =
	     { 6'd0, denom__h5117 } ;
  assign MUX_divider_intDivide_rg_denom2$write_1__VAL_3 =
	     { 1'd0, divider_intDivide_rg_denom2[10:1] } ;
  assign MUX_divider_intDivide_rg_n$write_1__VAL_1 =
	     { divider_intDivide_rg_n[5:0], 1'd0 } ;
  assign MUX_divider_intDivide_rg_n$write_1__VAL_3 =
	     { 1'd0, divider_intDivide_rg_n[6:1] } ;
  assign MUX_divider_intDivide_rg_numer$write_1__VAL_1 =
	     { numer__h5116, 6'd0 } ;
  assign MUX_divider_intDivide_rg_numer$write_1__VAL_2 =
	     divider_intDivide_rg_numer - divider_intDivide_rg_denom2 ;
  assign MUX_divider_intDivide_rg_quo$write_1__VAL_1 =
	     divider_intDivide_rg_quo + divider_intDivide_rg_n ;
  assign MUX_divider_intDivide_rg_quo$write_1__VAL_2 =
	     (denom__h5117 == 5'd0) ? 7'd127 : 7'd0 ;
  assign MUX_divider_intDivide_rg_state$write_1__VAL_3 =
	     (denom__h5117 == 5'd0) ? 2'd3 : 2'd1 ;

  // register divider_intDivide_rg_denom
  assign divider_intDivide_rg_denom$D_IN = denom__h5117 ;
  assign divider_intDivide_rg_denom$EN =
	     MUX_divider_intDivide_rg_denom2$write_1__SEL_2 ;

  // register divider_intDivide_rg_denom2
  always@(MUX_divider_intDivide_rg_denom2$write_1__SEL_1 or
	  MUX_divider_intDivide_rg_denom2$write_1__VAL_1 or
	  MUX_divider_intDivide_rg_denom2$write_1__SEL_2 or
	  MUX_divider_intDivide_rg_denom2$write_1__VAL_2 or
	  MUX_divider_intDivide_rg_denom2$write_1__SEL_3 or
	  MUX_divider_intDivide_rg_denom2$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_divider_intDivide_rg_denom2$write_1__SEL_1:
	  divider_intDivide_rg_denom2$D_IN =
	      MUX_divider_intDivide_rg_denom2$write_1__VAL_1;
      MUX_divider_intDivide_rg_denom2$write_1__SEL_2:
	  divider_intDivide_rg_denom2$D_IN =
	      MUX_divider_intDivide_rg_denom2$write_1__VAL_2;
      MUX_divider_intDivide_rg_denom2$write_1__SEL_3:
	  divider_intDivide_rg_denom2$D_IN =
	      MUX_divider_intDivide_rg_denom2$write_1__VAL_3;
      default: divider_intDivide_rg_denom2$D_IN =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  assign divider_intDivide_rg_denom2$EN =
	     WILL_FIRE_RL_divider_intDivide_rl_loop1 &&
	     divider_intDivide_rg_denom2_ULE_0_CONCAT_divid_ETC___d7 ||
	     WILL_FIRE_RL_rl_connect0 && denom__h5117 != 5'd0 ||
	     WILL_FIRE_RL_divider_intDivide_rl_loop2 &&
	     !divider_intDivide_rg_numer_ULT_0_CONCAT_divide_ETC___d16 &&
	     divider_intDivide_rg_numer_ULT_divider_intDivi_ETC___d27 ;

  // register divider_intDivide_rg_n
  always@(MUX_divider_intDivide_rg_denom2$write_1__SEL_1 or
	  MUX_divider_intDivide_rg_n$write_1__VAL_1 or
	  MUX_divider_intDivide_rg_denom2$write_1__SEL_2 or
	  MUX_divider_intDivide_rg_denom2$write_1__SEL_3 or
	  MUX_divider_intDivide_rg_n$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_divider_intDivide_rg_denom2$write_1__SEL_1:
	  divider_intDivide_rg_n$D_IN =
	      MUX_divider_intDivide_rg_n$write_1__VAL_1;
      MUX_divider_intDivide_rg_denom2$write_1__SEL_2:
	  divider_intDivide_rg_n$D_IN = 7'd1;
      MUX_divider_intDivide_rg_denom2$write_1__SEL_3:
	  divider_intDivide_rg_n$D_IN =
	      MUX_divider_intDivide_rg_n$write_1__VAL_3;
      default: divider_intDivide_rg_n$D_IN =
		   7'b0101010 /* unspecified value */ ;
    endcase
  end
  assign divider_intDivide_rg_n$EN =
	     WILL_FIRE_RL_divider_intDivide_rl_loop1 &&
	     divider_intDivide_rg_denom2_ULE_0_CONCAT_divid_ETC___d7 ||
	     WILL_FIRE_RL_rl_connect0 && denom__h5117 != 5'd0 ||
	     WILL_FIRE_RL_divider_intDivide_rl_loop2 &&
	     !divider_intDivide_rg_numer_ULT_0_CONCAT_divide_ETC___d16 &&
	     divider_intDivide_rg_numer_ULT_divider_intDivi_ETC___d27 ;

  // register divider_intDivide_rg_numer
  assign divider_intDivide_rg_numer$D_IN =
	     MUX_divider_intDivide_rg_denom2$write_1__SEL_2 ?
	       MUX_divider_intDivide_rg_numer$write_1__VAL_1 :
	       MUX_divider_intDivide_rg_numer$write_1__VAL_2 ;
  assign divider_intDivide_rg_numer$EN =
	     WILL_FIRE_RL_rl_connect0 && denom__h5117 != 5'd0 ||
	     WILL_FIRE_RL_divider_intDivide_rl_loop2 &&
	     !divider_intDivide_rg_numer_ULT_0_CONCAT_divide_ETC___d16 &&
	     !divider_intDivide_rg_numer_ULT_divider_intDivi_ETC___d27 ;

  // register divider_intDivide_rg_quo
  assign divider_intDivide_rg_quo$D_IN =
	     MUX_divider_intDivide_rg_numer$write_1__SEL_2 ?
	       MUX_divider_intDivide_rg_quo$write_1__VAL_1 :
	       MUX_divider_intDivide_rg_quo$write_1__VAL_2 ;
  assign divider_intDivide_rg_quo$EN =
	     WILL_FIRE_RL_divider_intDivide_rl_loop2 &&
	     !divider_intDivide_rg_numer_ULT_0_CONCAT_divide_ETC___d16 &&
	     !divider_intDivide_rg_numer_ULT_divider_intDivi_ETC___d27 ||
	     WILL_FIRE_RL_rl_connect0 ;

  // register divider_intDivide_rg_state
  always@(MUX_divider_intDivide_fifo_output_reg$enq_1__SEL_1 or
	  MUX_divider_intDivide_rg_state$write_1__SEL_2 or
	  WILL_FIRE_RL_rl_connect0 or
	  MUX_divider_intDivide_rg_state$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_divider_intDivide_fifo_output_reg$enq_1__SEL_1:
	  divider_intDivide_rg_state$D_IN = 2'd3;
      MUX_divider_intDivide_rg_state$write_1__SEL_2:
	  divider_intDivide_rg_state$D_IN = 2'd2;
      WILL_FIRE_RL_rl_connect0:
	  divider_intDivide_rg_state$D_IN =
	      MUX_divider_intDivide_rg_state$write_1__VAL_3;
      default: divider_intDivide_rg_state$D_IN =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  assign divider_intDivide_rg_state$EN =
	     WILL_FIRE_RL_divider_intDivide_rl_loop2 &&
	     divider_intDivide_rg_numer_ULT_0_CONCAT_divide_ETC___d16 ||
	     WILL_FIRE_RL_divider_intDivide_rl_loop1 &&
	     !divider_intDivide_rg_denom2_ULE_0_CONCAT_divid_ETC___d7 ||
	     WILL_FIRE_RL_rl_connect0 ;

  // submodule divider_fifo_output_reg
  assign divider_fifo_output_reg$D_IN =
	     { divider_fifo_stage1_reg$D_OUT[17],
	       divider_fifo_stage1_reg$D_OUT[19:18],
	       divider_fifo_stage1_reg$D_OUT[20],
	       divider_fifo_stage1_reg$D_OUT[16:12],
	       output_regf_frac__h4112,
	       x__h4285,
	       x__h4402 } ;
  assign divider_fifo_output_reg$ENQ = CAN_FIRE_RL_divider_output_stage ;
  assign divider_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_connect2 ;
  assign divider_fifo_output_reg$CLR = 1'b0 ;

  // submodule divider_fifo_stage0_reg
  assign divider_fifo_stage0_reg$D_IN =
	     { x__h5427,
	       (extracter1_fifo_output_reg$D_OUT[11:10] == 2'd2 &&
		extracter2_fifo_output_reg$D_OUT[11:10] != 2'd2 ||
		extracter1_fifo_output_reg$D_OUT[11:10] != 2'd1 &&
		extracter2_fifo_output_reg$D_OUT[11:10] == 2'd1) ?
		 2'd2 :
		 ((extracter1_fifo_output_reg$D_OUT[11:10] == 2'd1 &&
		   extracter2_fifo_output_reg$D_OUT[11:10] != 2'd1 ||
		   extracter1_fifo_output_reg$D_OUT[11:10] != 2'd2 &&
		   extracter2_fifo_output_reg$D_OUT[11:10] == 2'd2) ?
		    2'd1 :
		    2'd0),
	       x__h5535,
	       extracter1_fifo_output_reg$D_OUT[8:4],
	       extracter2_fifo_output_reg$D_OUT[8:4] } ;
  assign divider_fifo_stage0_reg$ENQ = CAN_FIRE_RL_rl_connect0 ;
  assign divider_fifo_stage0_reg$DEQ = CAN_FIRE_RL_divider_stage_1 ;
  assign divider_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule divider_fifo_stage1_reg
  assign divider_fifo_stage1_reg$D_IN =
	     { divider_fifo_stage0_reg$D_OUT[13],
	       (frac__h1952 == 7'd0 &&
		divider_intDivide_fifo_output_reg$D_OUT[0] & y__h3059 &&
		divider_fifo_stage0_reg$D_OUT[12:11] == 2'd0) ?
		 2'd2 :
		 divider_fifo_stage0_reg$D_OUT[12:11],
	       divider_fifo_stage0_reg$D_OUT[10],
	       IF_IF_IF_NOT_divider_fifo_stage0_reg_first__2__ETC___d99,
	       frac__h1952,
	       divider_intDivide_fifo_output_reg$D_OUT[1:0],
	       IF_IF_IF_NOT_divider_fifo_stage0_reg_first__2__ETC___d106 } ;
  assign divider_fifo_stage1_reg$ENQ = CAN_FIRE_RL_divider_stage_1 ;
  assign divider_fifo_stage1_reg$DEQ = CAN_FIRE_RL_divider_output_stage ;
  assign divider_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule divider_intDivide_fifo_output_reg
  assign divider_intDivide_fifo_output_reg$D_IN =
	     MUX_divider_intDivide_fifo_output_reg$enq_1__SEL_1 ?
	       MUX_divider_intDivide_fifo_output_reg$enq_1__VAL_1 :
	       MUX_divider_intDivide_fifo_output_reg$enq_1__VAL_2 ;
  assign divider_intDivide_fifo_output_reg$ENQ =
	     WILL_FIRE_RL_divider_intDivide_rl_loop2 &&
	     divider_intDivide_rg_numer_ULT_0_CONCAT_divide_ETC___d16 ||
	     WILL_FIRE_RL_rl_connect0 && denom__h5117 == 5'd0 ;
  assign divider_intDivide_fifo_output_reg$DEQ = CAN_FIRE_RL_divider_stage_1 ;
  assign divider_intDivide_fifo_output_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_output_reg
  assign extracter1_fifo_output_reg$D_IN =
	     { (compute_request_put[14:8] == 7'd0 &&
		!compute_request_put[15]) ?
		 2'd2 :
		 ((compute_request_put[14:8] == 7'd0 &&
		   compute_request_put[15]) ?
		    2'd1 :
		    2'd0),
	       compute_request_put[15],
	       IF_compute_request_put_BITS_14_TO_8_96_EQ_0_97_ETC___d496 } ;
  assign extracter1_fifo_output_reg$ENQ = EN_compute_request_put ;
  assign extracter1_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_connect0 ;
  assign extracter1_fifo_output_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_stage0_reg
  assign extracter1_fifo_stage0_reg$D_IN = 10'h0 ;
  assign extracter1_fifo_stage0_reg$ENQ = 1'b0 ;
  assign extracter1_fifo_stage0_reg$DEQ = 1'b0 ;
  assign extracter1_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_stage1_reg
  assign extracter1_fifo_stage1_reg$D_IN = 15'h0 ;
  assign extracter1_fifo_stage1_reg$ENQ = 1'b0 ;
  assign extracter1_fifo_stage1_reg$DEQ = 1'b0 ;
  assign extracter1_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_stage2_reg
  assign extracter1_fifo_stage2_reg$D_IN = 13'h0 ;
  assign extracter1_fifo_stage2_reg$ENQ = 1'b0 ;
  assign extracter1_fifo_stage2_reg$DEQ = 1'b0 ;
  assign extracter1_fifo_stage2_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_output_reg
  assign extracter2_fifo_output_reg$D_IN =
	     { (compute_request_put[6:0] == 7'd0 && !compute_request_put[7]) ?
		 2'd2 :
		 ((compute_request_put[6:0] == 7'd0 &&
		   compute_request_put[7]) ?
		    2'd1 :
		    2'd0),
	       compute_request_put[7],
	       IF_compute_request_put_BITS_6_TO_0_98_EQ_0_99__ETC___d598 } ;
  assign extracter2_fifo_output_reg$ENQ = EN_compute_request_put ;
  assign extracter2_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_connect0 ;
  assign extracter2_fifo_output_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_stage0_reg
  assign extracter2_fifo_stage0_reg$D_IN = 10'h0 ;
  assign extracter2_fifo_stage0_reg$ENQ = 1'b0 ;
  assign extracter2_fifo_stage0_reg$DEQ = 1'b0 ;
  assign extracter2_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_stage1_reg
  assign extracter2_fifo_stage1_reg$D_IN = 15'h0 ;
  assign extracter2_fifo_stage1_reg$ENQ = 1'b0 ;
  assign extracter2_fifo_stage1_reg$DEQ = 1'b0 ;
  assign extracter2_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_stage2_reg
  assign extracter2_fifo_stage2_reg$D_IN = 13'h0 ;
  assign extracter2_fifo_stage2_reg$ENQ = 1'b0 ;
  assign extracter2_fifo_stage2_reg$DEQ = 1'b0 ;
  assign extracter2_fifo_stage2_reg$CLR = 1'b0 ;

  // submodule ffO
  assign ffO$D_IN = normalizer_fifo_output_reg$D_OUT ;
  assign ffO$ENQ = CAN_FIRE_RL_rl_out ;
  assign ffO$DEQ = EN_compute_response_get ;
  assign ffO$CLR = 1'b0 ;

  // submodule ffm
  assign ffm$D_IN = 12'h0 ;
  assign ffm$ENQ = 1'b0 ;
  assign ffm$DEQ = 1'b0 ;
  assign ffm$CLR = 1'b0 ;

  // submodule normalizer_fifo_output_reg
  assign normalizer_fifo_output_reg$D_IN =
	     { divider_fifo_output_reg$D_OUT[11],
	       output_regf_out_posit__h5645,
	       divider_fifo_output_reg$D_OUT[13:12],
	       flag_prev_truncate__h5630 - _theResult____h5631 ||
	       a__h5668 == 7'd0 &&
	       NOT_6_MINUS_IF_divider_fifo_output_reg_first___ETC___d376 } ;
  assign normalizer_fifo_output_reg$ENQ = CAN_FIRE_RL_rl_connect2 ;
  assign normalizer_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_out ;
  assign normalizer_fifo_output_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_stage0_reg
  assign normalizer_fifo_stage0_reg$D_IN = 18'h0 ;
  assign normalizer_fifo_stage0_reg$ENQ = 1'b0 ;
  assign normalizer_fifo_stage0_reg$DEQ = 1'b0 ;
  assign normalizer_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_stage1_reg
  assign normalizer_fifo_stage1_reg$D_IN = 21'h0 ;
  assign normalizer_fifo_stage1_reg$ENQ = 1'b0 ;
  assign normalizer_fifo_stage1_reg$DEQ = 1'b0 ;
  assign normalizer_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_stage2_reg
  assign normalizer_fifo_stage2_reg$D_IN = 12'h0 ;
  assign normalizer_fifo_stage2_reg$ENQ = 1'b0 ;
  assign normalizer_fifo_stage2_reg$DEQ = 1'b0 ;
  assign normalizer_fifo_stage2_reg$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_6_MINUS_IF_divider_fifo_output_reg_first__1_ETC___d253 =
	     (_6_MINUS_IF_divider_fifo_output_reg_first__15_B_ETC___d239 ==
	      3'd0) ?
	       _6_MINUS_IF_divider_fifo_output_reg_first__15_B_ETC___d239 :
	       _6_MINUS_IF_divider_fifo_output_reg_first__15_B_ETC___d239 -
	       3'd1 ;
  assign IF_IF_6_MINUS_IF_divider_fifo_output_reg_first_ETC___d314 =
	     (shift_new0__h5621 == 2'd0) ?
	       !divider_fifo_output_reg$D_OUT[1] :
	       !divider_fifo_output_reg_first__15_BITS_5_TO_2__ETC___d287 ;
  assign IF_IF_IF_NOT_divider_fifo_stage0_reg_first__2__ETC___d106 =
	     IF_IF_NOT_divider_fifo_stage0_reg_first__2_BIT_ETC___d96 ?
	       IF_IF_NOT_divider_fifo_stage0_reg_first__2_BIT_ETC__q13[2:0] :
	       (IF_IF_NOT_divider_fifo_stage0_reg_first__2_BIT_ETC___d97 ?
		  3'd0 :
		  IF_IF_NOT_divider_fifo_stage0_reg_first__2_BIT_ETC__q14[2:0]) ;
  assign IF_IF_IF_NOT_divider_fifo_stage0_reg_first__2__ETC___d99 =
	     IF_IF_NOT_divider_fifo_stage0_reg_first__2_BIT_ETC___d96 ?
	       5'd20 :
	       (IF_IF_NOT_divider_fifo_stage0_reg_first__2_BIT_ETC___d97 ?
		  IF_IF_NOT_divider_fifo_stage0_reg_first__2_BIT_ETC___d95 :
		  5'd12) ;
  assign IF_IF_NOT_IF_divider_fifo_output_reg_first__15_ETC___d343 =
	     (b__h5789[6] &&
	      !IF_NOT_IF_divider_fifo_output_reg_first__15_BI_ETC___d339[6]) ?
	       7'd127 :
	       IF_NOT_IF_divider_fifo_output_reg_first__15_BI_ETC___d339 ;
  assign IF_IF_NOT_divider_fifo_stage0_reg_first__2_BIT_ETC___d95 =
	     (IF_NOT_divider_fifo_stage0_reg_first__2_BIT_9__ETC___d88[4] &&
	      !IF_NOT_divider_fifo_stage0_reg_first__2_BIT_9__ETC___d91[4]) ?
	       5'd16 :
	       IF_NOT_divider_fifo_stage0_reg_first__2_BIT_9__ETC___d91 ;
  assign IF_IF_NOT_divider_fifo_stage0_reg_first__2_BIT_ETC___d96 =
	     (IF_IF_NOT_divider_fifo_stage0_reg_first__2_BIT_ETC___d95 ^
	      5'h10) <
	     5'd4 ;
  assign IF_IF_NOT_divider_fifo_stage0_reg_first__2_BIT_ETC___d97 =
	     (IF_IF_NOT_divider_fifo_stage0_reg_first__2_BIT_ETC___d95 ^
	      5'h10) <=
	     5'd28 ;
  assign IF_IF_NOT_divider_fifo_stage0_reg_first__2_BIT_ETC__q13 =
	     IF_IF_NOT_divider_fifo_stage0_reg_first__2_BIT_ETC___d95 -
	     5'd20 ;
  assign IF_IF_NOT_divider_fifo_stage0_reg_first__2_BIT_ETC__q14 =
	     IF_IF_NOT_divider_fifo_stage0_reg_first__2_BIT_ETC___d95 -
	     5'd12 ;
  assign IF_IF_compute_request_put_BIT_15_98_THEN_0_MIN_ETC___d471 =
	     new_inp__h8369[6] ?
	       ((!INV_new_inp369__q1[6] && !INV_new_inp369__q1[5] &&
		 !INV_new_inp369__q1[4] &&
		 !INV_new_inp369__q1[3] &&
		 !INV_new_inp369__q1[2] &&
		 !INV_new_inp369__q1[1] &&
		 !INV_new_inp369__q1[0]) ?
		  3'd7 :
		  3'd6) -
	       x__h8739 :
	       ((!new_inp__h8369[5] && !new_inp__h8369[4] &&
		 !new_inp__h8369[3] &&
		 !new_inp__h8369[2] &&
		 !new_inp__h8369[1] &&
		 !new_inp__h8369[0]) ?
		  3'd7 :
		  3'd6) -
	       x__h9757 ;
  assign IF_IF_compute_request_put_BIT_7_00_THEN_0_MINU_ETC___d573 =
	     new_inp__h11082[6] ?
	       ((!INV_new_inp1082__q2[6] && !INV_new_inp1082__q2[5] &&
		 !INV_new_inp1082__q2[4] &&
		 !INV_new_inp1082__q2[3] &&
		 !INV_new_inp1082__q2[2] &&
		 !INV_new_inp1082__q2[1] &&
		 !INV_new_inp1082__q2[0]) ?
		  3'd7 :
		  3'd6) -
	       x__h11440 :
	       ((!new_inp__h11082[5] && !new_inp__h11082[4] &&
		 !new_inp__h11082[3] &&
		 !new_inp__h11082[2] &&
		 !new_inp__h11082[1] &&
		 !new_inp__h11082[0]) ?
		  3'd7 :
		  3'd6) -
	       x__h12458 ;
  assign IF_NOT_IF_divider_fifo_output_reg_first__15_BI_ETC___d339 =
	     b__h5789 + b__h7777 ;
  assign IF_NOT_divider_fifo_stage0_reg_first__2_BIT_9__ETC___d88 =
	     (!divider_fifo_stage0_reg$D_OUT[9] &&
	      !NEG_divider_fifo_stage0_reg_first__2_BITS_4_TO_ETC___d76[4] &&
	      divider_fifo_stage0_reg_first__2_BITS_9_TO_5_0_ETC___d81[4]) ?
	       5'd15 :
	       ((divider_fifo_stage0_reg$D_OUT[9] &&
		 NEG_divider_fifo_stage0_reg_first__2_BITS_4_TO_ETC___d76[4] &&
		 !divider_fifo_stage0_reg_first__2_BITS_9_TO_5_0_ETC___d81[4]) ?
		  5'd16 :
		  divider_fifo_stage0_reg_first__2_BITS_9_TO_5_0_ETC___d81) ;
  assign IF_NOT_divider_fifo_stage0_reg_first__2_BIT_9__ETC___d91 =
	     IF_NOT_divider_fifo_stage0_reg_first__2_BIT_9__ETC___d88 -
	     { 4'd0, x__h2034[0] } ;
  assign IF_compute_request_put_BITS_14_TO_8_96_EQ_0_97_ETC___d496 =
	     (compute_request_put[14:8] == 7'd0 && !compute_request_put[15]) ?
	       9'd0 :
	       { SEXT_IF_IF_compute_request_put_BIT_15_98_THEN__ETC___d442 +
		 { 4'd0, expo__h8376 },
		 frac__h8377 } ;
  assign IF_compute_request_put_BITS_6_TO_0_98_EQ_0_99__ETC___d598 =
	     (compute_request_put[6:0] == 7'd0 && !compute_request_put[7]) ?
	       9'd0 :
	       { SEXT_IF_IF_compute_request_put_BIT_7_00_THEN_0_ETC___d544 +
		 { 4'd0, expo__h11089 },
		 frac__h11090 } ;
  assign IF_divider_fifo_output_reg_first__15_BIT_10_20_ETC___d260 =
	     b__h5915 + b__h6564 ;
  assign IF_divider_fifo_output_reg_first__15_BIT_9_26__ETC___d232 =
	     (divider_fifo_output_reg$D_OUT[9] &&
	      !divider_fifo_output_reg_first__15_BITS_9_TO_7__ETC___d228[2]) ?
	       3'd7 :
	       divider_fifo_output_reg_first__15_BITS_9_TO_7__ETC___d228 ;
  assign IF_divider_fifo_stage1_reg_first__13_BIT_2_19__ETC___d123 =
	     divider_fifo_stage1_reg$D_OUT[2] ?
	       -divider_fifo_stage1_reg$D_OUT[2:0] :
	       divider_fifo_stage1_reg$D_OUT[2:0] ;
  assign IF_extracter1_fifo_output_reg_first__62_BITS_1_ETC___d169 =
	     (extracter1_fifo_output_reg$D_OUT[11:10] == 2'd2) ?
	       2'b01 :
	       ((extracter2_fifo_output_reg$D_OUT[11:10] == 2'd2) ?
		  extracter2_fifo_output_reg$D_OUT[11:10] :
		  2'b11) ;
  assign IF_new_inp1082_BIT_6_THEN_b1430_ELSE_b1432__q11 =
	     new_inp__h11082[6] ? b__h11430 : b__h11432 ;
  assign IF_new_inp369_BIT_6_THEN_b729_ELSE_b731__q9 =
	     new_inp__h8369[6] ? b__h8729 : b__h8731 ;
  assign INV_new_inp1082__q2 = ~new_inp__h11082 ;
  assign INV_new_inp369__q1 = ~new_inp__h8369 ;
  assign NEG_divider_fifo_stage0_reg_first__2_BITS_4_TO_ETC___d76 =
	     -divider_fifo_stage0_reg$D_OUT[4:0] ;
  assign NOT_4_MINUS_IF_6_MINUS_IF_divider_fifo_output__ETC___d331 =
	     !_4_MINUS_IF_6_MINUS_IF_divider_fifo_output_reg__ETC___d316 &&
	     { 28'd0, (x__h7291[3:0] & ~(4'hE << x__h7625[1:0])) >> 0 } ==
	     32'd0 &&
	     IF_IF_6_MINUS_IF_divider_fifo_output_reg_first_ETC___d314 ||
	     _6_MINUS_IF_divider_fifo_output_reg_first__15_B_ETC___d239 ==
	     3'd0 &&
	     shift_new0__h5621 == 2'd0 ||
	     k_expo__h5624 == 7'd127 &&
	     IF_6_MINUS_IF_divider_fifo_output_reg_first__1_ETC___d253 ==
	     3'd0 &&
	     x__h7291[3:0] == 4'd0 &&
	     IF_IF_6_MINUS_IF_divider_fifo_output_reg_first_ETC___d314 ;
  assign NOT_4_MINUS_IF_6_MINUS_IF_divider_fifo_output__ETC___d375 =
	     _4_MINUS_IF_6_MINUS_IF_divider_fifo_output_reg__ETC___d277 !=
	     3'd0 &&
	     (_4_MINUS_IF_6_MINUS_IF_divider_fifo_output_reg__ETC___d277 !=
	      3'd1 ||
	      truncated_frac_msb__h5626) &&
	     (_4_MINUS_IF_6_MINUS_IF_divider_fifo_output_reg__ETC___d316 ||
	      { 28'd0, (x__h7291[3:0] & ~(4'hE << x__h7625[1:0])) >> 0 } !=
	      32'd0 ||
	      truncated_frac_msb__h5626) &&
	     NOT_6_MINUS_IF_divider_fifo_output_reg_first___ETC___d372 ;
  assign NOT_6_MINUS_IF_divider_fifo_output_reg_first___ETC___d281 =
	     x291_BITS_3_TO_0__q5[_4_MINUS_IF_6_MINUS_IF_divider_fifo_output_reg__ETC___d277[1:0]] ;
  assign NOT_6_MINUS_IF_divider_fifo_output_reg_first___ETC___d291 =
	     x291_BITS_3_TO_0__q5[x__h7465[1:0]] ;
  assign NOT_6_MINUS_IF_divider_fifo_output_reg_first___ETC___d347 =
	     NOT_6_MINUS_IF_divider_fifo_output_reg_first___ETC___d281 ||
	     ((_4_MINUS_IF_6_MINUS_IF_divider_fifo_output_reg__ETC___d277 ==
	       3'd0) ?
		IF_IF_6_MINUS_IF_divider_fifo_output_reg_first_ETC___d314 :
		!NOT_6_MINUS_IF_divider_fifo_output_reg_first___ETC___d291) ;
  assign NOT_6_MINUS_IF_divider_fifo_output_reg_first___ETC___d353 =
	     NOT_6_MINUS_IF_divider_fifo_output_reg_first___ETC___d347 ||
	     CASE_shift_new0621_0_NOT_divider_fifo_output_r_ETC__q8 ;
  assign NOT_6_MINUS_IF_divider_fifo_output_reg_first___ETC___d372 =
	     (_6_MINUS_IF_divider_fifo_output_reg_first__15_B_ETC___d239 !=
	      3'd0 ||
	      shift_new0__h5621 != 2'd0 ||
	      !NOT_6_MINUS_IF_divider_fifo_output_reg_first___ETC___d291) &&
	     (k_expo__h5624 != 7'd127 ||
	      IF_6_MINUS_IF_divider_fifo_output_reg_first__1_ETC___d253 !=
	      3'd0 ||
	      x__h7291[3:0] != 4'd0 ||
	      truncated_frac_msb__h5626) ;
  assign NOT_6_MINUS_IF_divider_fifo_output_reg_first___ETC___d376 =
	     NOT_6_MINUS_IF_divider_fifo_output_reg_first___ETC___d353 ||
	     IF_6_MINUS_IF_divider_fifo_output_reg_first__1_ETC___d253 ==
	     3'd0 &&
	     !(~k_expo__h5624[0]) ||
	     NOT_4_MINUS_IF_6_MINUS_IF_divider_fifo_output__ETC___d375 ;
  assign NOT_IF_divider_fifo_output_reg_first__15_BIT_1_ETC___d265 =
	     (!b__h5915[6] && b__h6564[6] || b__h5915[6] && !b__h6564[6]) &&
	     !IF_divider_fifo_output_reg_first__15_BIT_10_20_ETC___d260[6] ||
	     b__h5915[6] && b__h6564[6] ;
  assign NOT_NOT_6_MINUS_IF_divider_fifo_output_reg_fir_ETC___d304 =
	     !NOT_6_MINUS_IF_divider_fifo_output_reg_first___ETC___d281 &&
	     flag_prev_truncate__h5630 &&
	     CASE_shift_new0621_0_divider_fifo_output_regD_ETC__q7 ;
  assign SEXT_IF_IF_compute_request_put_BIT_15_98_THEN__ETC___d442 =
	     { SEXT_IF_new_inp369_BIT_6_THEN_b729_ELSE_b731__q10[3:0],
	       1'd0 } ;
  assign SEXT_IF_IF_compute_request_put_BIT_7_00_THEN_0_ETC___d544 =
	     { SEXT_IF_new_inp1082_BIT_6_THEN_b1430_ELSE_b14321__q12[3:0],
	       1'd0 } ;
  assign SEXT_IF_new_inp1082_BIT_6_THEN_b1430_ELSE_b14321__q12 =
	     { IF_new_inp1082_BIT_6_THEN_b1430_ELSE_b1432__q11[3],
	       IF_new_inp1082_BIT_6_THEN_b1430_ELSE_b1432__q11 } ;
  assign SEXT_IF_new_inp369_BIT_6_THEN_b729_ELSE_b731__q10 =
	     { IF_new_inp369_BIT_6_THEN_b729_ELSE_b731__q9[3],
	       IF_new_inp369_BIT_6_THEN_b729_ELSE_b731__q9 } ;
  assign _0_MINUS_divider_fifo_output_regD_OUT_BITS_10__ETC__q3 =
	     4'd0 - divider_fifo_output_reg$D_OUT[10:7] ;
  assign _4_MINUS_IF_6_MINUS_IF_divider_fifo_output_reg__ETC___d277 =
	     3'd4 -
	     IF_6_MINUS_IF_divider_fifo_output_reg_first__1_ETC___d253 ;
  assign _4_MINUS_IF_6_MINUS_IF_divider_fifo_output_reg__ETC___d316 =
	     _4_MINUS_IF_6_MINUS_IF_divider_fifo_output_reg__ETC___d277 <
	     3'd2 ;
  assign _6_MINUS_IF_divider_fifo_output_reg_first__15_B_ETC___d239 =
	     3'd6 -
	     (divider_fifo_output_reg$D_OUT[10] ?
		_0_MINUS_divider_fifo_output_regD_OUT_BITS_10__ETC__q3[2:0] :
		IF_divider_fifo_output_reg_first__15_BIT_9_26__ETC___d232) ;
  assign _theResult____h5631 =
	     NOT_NOT_6_MINUS_IF_divider_fifo_output_reg_fir_ETC___d304 &&
	     (IF_6_MINUS_IF_divider_fifo_output_reg_first__1_ETC___d253 !=
	      3'd0 ||
	      ~k_expo__h5624[0]) &&
	     (_4_MINUS_IF_6_MINUS_IF_divider_fifo_output_reg__ETC___d277 ==
	      3'd0 ||
	      _4_MINUS_IF_6_MINUS_IF_divider_fifo_output_reg__ETC___d277 ==
	      3'd1 &&
	      IF_IF_6_MINUS_IF_divider_fifo_output_reg_first_ETC___d314 ||
	      NOT_4_MINUS_IF_6_MINUS_IF_divider_fifo_output__ETC___d331) ;
  assign _theResult___fst__h6596 =
	     divider_fifo_output_reg_first__15_BIT_6_41_AND_ETC___d244 ?
	       expo_new__h6693 :
	       expo_new__h6662 ;
  assign _theResult___snd_snd__h6745 =
	     divider_fifo_output_reg_first__15_BIT_6_41_AND_ETC___d244 ?
	       shift_new__h6692 :
	       2'd0 ;
  assign a__h5668 =
	     IF_IF_NOT_IF_divider_fifo_output_reg_first__15_ETC___d343 +
	     { 6'd0,
	       IF_IF_NOT_IF_divider_fifo_output_reg_first__15_ETC___d343 ==
	       7'd0 &&
	       NOT_6_MINUS_IF_divider_fifo_output_reg_first___ETC___d376 } ;
  assign b__h11430 = { 1'd0, x__h11440 } - 4'd1 ;
  assign b__h11432 = 4'd0 - x__h12451 ;
  assign b__h5789 = x__h5805 - y__h5806 ;
  assign b__h5915 = divider_fifo_output_reg$D_OUT[10] ? k__h5977 : k__h6022 ;
  assign b__h6564 =
	     { 6'd0, x__h6567 } <<
	     IF_6_MINUS_IF_divider_fifo_output_reg_first__1_ETC___d253 ;
  assign b__h7777 = { 6'd0, flag_prev_truncate__h5630 } ;
  assign b__h8729 = { 1'd0, x__h8739 } - 4'd1 ;
  assign b__h8731 = 4'd0 - x__h9750 ;
  assign denom__h5117 =
	     { IF_extracter1_fifo_output_reg_first__62_BITS_1_ETC___d169[0],
	       extracter2_fifo_output_reg$D_OUT[3:0] } ;
  assign divider_fifo_output_regD_OUT_BITS_5_TO_2__q6 =
	     divider_fifo_output_reg$D_OUT[5:2] ;
  assign divider_fifo_output_reg_first__15_BITS_5_TO_2__ETC___d287 =
	     divider_fifo_output_regD_OUT_BITS_5_TO_2__q6[i__h7418] ;
  assign divider_fifo_output_reg_first__15_BITS_9_TO_7__ETC___d228 =
	     divider_fifo_output_reg$D_OUT[9:7] + 3'd1 ;
  assign divider_fifo_output_reg_first__15_BIT_0_94_AND_ETC___d297 =
	     divider_fifo_output_reg$D_OUT[0] & y__h7505 ;
  assign divider_fifo_output_reg_first__15_BIT_0_94_AND_ETC___d301 =
	     divider_fifo_output_reg_first__15_BIT_0_94_AND_ETC___d297 &
	     y__h7509 ;
  assign divider_fifo_output_reg_first__15_BIT_6_41_AND_ETC___d244 =
	     divider_fifo_output_reg$D_OUT[6] & mask_e__h6594 ;
  assign divider_fifo_stage0_reg_first__2_BITS_9_TO_5_0_ETC___d81 =
	     divider_fifo_stage0_reg$D_OUT[9:5] +
	     NEG_divider_fifo_stage0_reg_first__2_BITS_4_TO_ETC___d76 ;
  assign divider_fifo_stage1_regD_OUT_BITS_11_TO_5__q4 =
	     divider_fifo_stage1_reg$D_OUT[11:5] ;
  assign divider_intDivide_rg_denom2_ULE_0_CONCAT_divid_ETC___d7 =
	     divider_intDivide_rg_denom2 <= y__h1572 ;
  assign divider_intDivide_rg_numer_ULT_0_CONCAT_divide_ETC___d16 =
	     divider_intDivide_rg_numer < y__h1669 ;
  assign divider_intDivide_rg_numer_ULT_divider_intDivi_ETC___d27 =
	     divider_intDivide_rg_numer < divider_intDivide_rg_denom2 ;
  assign expo__h11089 =
	     (IF_IF_compute_request_put_BIT_7_00_THEN_0_MINU_ETC___d573 ==
	      3'd0) ?
	       3'd1 -
	       IF_IF_compute_request_put_BIT_7_00_THEN_0_MINU_ETC___d573 ==
	       3'd0 &&
	       new_inp__h11082[0] :
	       new_inp__h11082[x__h13639] ;
  assign expo__h8376 =
	     (IF_IF_compute_request_put_BIT_15_98_THEN_0_MIN_ETC___d471 ==
	      3'd0) ?
	       3'd1 -
	       IF_IF_compute_request_put_BIT_15_98_THEN_0_MIN_ETC___d471 ==
	       3'd0 &&
	       new_inp__h8369[0] :
	       new_inp__h8369[x__h10938] ;
  assign expo_new__h6662 =
	     _6_MINUS_IF_divider_fifo_output_reg_first__15_B_ETC___d239 ==
	     3'd0 &&
	     divider_fifo_output_reg$D_OUT[6] ;
  assign expo_new__h6693 = x__h6696[0] & divider_fifo_output_reg$D_OUT[6] ;
  assign flag_prev_truncate__h5630 =
	     (_4_MINUS_IF_6_MINUS_IF_divider_fifo_output_reg__ETC___d277 ==
	      3'd0) ?
	       truncated_frac_msb__h5626 :
	       NOT_6_MINUS_IF_divider_fifo_output_reg_first___ETC___d291 ;
  assign frac__h11090 = new_inp__h11082[3:0] << x__h13688 ;
  assign frac__h1952 =
	     divider_intDivide_fifo_output_reg$D_OUT[8:2] << x__h2034[0] ;
  assign frac__h8377 = new_inp__h8369[3:0] << x__h10987 ;
  assign i1__h7515 = shift_new0__h5621 - 2'd2 ;
  assign i__h7418 = shift_new0__h5621 - 2'd1 ;
  assign k__h5977 = 7'd1 << x__h6020 ;
  assign k__h6022 = ~x__h6034 ;
  assign k_expo__h5624 =
	     NOT_IF_divider_fifo_output_reg_first__15_BIT_1_ETC___d265 ?
	       7'd127 :
	       IF_divider_fifo_output_reg_first__15_BIT_10_20_ETC___d260 ;
  assign mask_e__h6594 =
	     3'd1 -
	     _6_MINUS_IF_divider_fifo_output_reg_first__15_B_ETC___d239 ==
	     3'd0 ;
  assign new_inp__h11082 =
	     compute_request_put[7] ?
	       7'd0 - compute_request_put[6:0] :
	       compute_request_put[6:0] ;
  assign new_inp__h8369 =
	     compute_request_put[15] ?
	       7'd0 - compute_request_put[14:8] :
	       compute_request_put[14:8] ;
  assign numer__h5116 =
	     { IF_extracter1_fifo_output_reg_first__62_BITS_1_ETC___d169[1],
	       extracter1_fifo_output_reg$D_OUT[3:0] } ;
  assign output_regf_frac__h4112 =
	     divider_fifo_stage1_reg$D_OUT[2] ?
	       x__h4167[3:0] :
	       ((divider_fifo_stage1_reg$D_OUT[2:0] == 3'd0) ?
		  x__h4248[3:0] :
		  4'd15) ;
  assign shift_new0__h5621 =
	     (_6_MINUS_IF_divider_fifo_output_reg_first__15_B_ETC___d239 ==
	      3'd0) ?
	       _theResult___snd_snd__h6745 :
	       2'd0 ;
  assign shift_new__h6692 = { 1'd0, x__h7310 } ;
  assign truncated_frac_msb__h5626 =
	     (shift_new0__h5621 == 2'd0) ?
	       divider_fifo_output_reg$D_OUT[1] :
	       divider_fifo_output_reg_first__15_BITS_5_TO_2__ETC___d287 ;
  assign x291_BITS_3_TO_0__q5 = x__h7291[3:0] ;
  assign x__h10938 =
	     IF_IF_compute_request_put_BIT_15_98_THEN_0_MIN_ETC___d471 -
	     3'd1 ;
  assign x__h11440 =
	     INV_new_inp1082__q2[6] ?
	       3'd0 :
	       (INV_new_inp1082__q2[5] ?
		  3'd1 :
		  (INV_new_inp1082__q2[4] ?
		     3'd2 :
		     (INV_new_inp1082__q2[3] ?
			3'd3 :
			(INV_new_inp1082__q2[2] ?
			   3'd4 :
			   (INV_new_inp1082__q2[1] ?
			      3'd5 :
			      (INV_new_inp1082__q2[0] ? 3'd6 : 3'd7)))))) ;
  assign x__h12451 = { 1'd0, x__h12458 } ;
  assign x__h12458 =
	     new_inp__h11082[6] ?
	       3'd0 :
	       (new_inp__h11082[5] ?
		  3'd1 :
		  (new_inp__h11082[4] ?
		     3'd2 :
		     (new_inp__h11082[3] ?
			3'd3 :
			(new_inp__h11082[2] ?
			   3'd4 :
			   (new_inp__h11082[1] ?
			      3'd5 :
			      (new_inp__h11082[0] ? 3'd6 : 3'd7)))))) ;
  assign x__h13639 =
	     IF_IF_compute_request_put_BIT_7_00_THEN_0_MINU_ETC___d573 -
	     3'd1 ;
  assign x__h1846 = divider_intDivide_rg_numer[3:0] == 4'd0 ;
  assign x__h2034 =
	     divider_intDivide_fifo_output_reg$D_OUT[8] ?
	       3'd0 :
	       (divider_intDivide_fifo_output_reg$D_OUT[7] ?
		  3'd1 :
		  (divider_intDivide_fifo_output_reg$D_OUT[6] ?
		     3'd2 :
		     (divider_intDivide_fifo_output_reg$D_OUT[5] ?
			3'd3 :
			(divider_intDivide_fifo_output_reg$D_OUT[4] ?
			   3'd4 :
			   (divider_intDivide_fifo_output_reg$D_OUT[3] ?
			      3'd5 :
			      (divider_intDivide_fifo_output_reg$D_OUT[2] ?
				 3'd6 :
				 3'd7)))))) ;
  assign x__h4167 = divider_fifo_stage1_reg$D_OUT[11:5] >> x__h4236 ;
  assign x__h4236 =
	     IF_divider_fifo_stage1_reg_first__13_BIT_2_19__ETC___d123 +
	     3'd3 ;
  assign x__h4248 = divider_fifo_stage1_reg$D_OUT[11:5] >> x__h4276 ;
  assign x__h4276 =
	     IF_divider_fifo_stage1_reg_first__13_BIT_2_19__ETC___d123 +
	     3'd2 ;
  assign x__h4285 =
	     divider_fifo_stage1_reg$D_OUT[2] ?
	       divider_fifo_stage1_regD_OUT_BITS_11_TO_5__q4[x__h4276] :
	       divider_fifo_stage1_reg$D_OUT[2:0] != 3'd0 ||
	       divider_fifo_stage1_regD_OUT_BITS_11_TO_5__q4[x__h4397] ;
  assign x__h4397 =
	     IF_divider_fifo_stage1_reg_first__13_BIT_2_19__ETC___d123 +
	     3'd1 ;
  assign x__h4402 = x__h4421 & y__h4422 ;
  assign x__h4421 = x__h4423 & divider_fifo_stage1_reg$D_OUT[3] ;
  assign x__h4423 =
	     divider_fifo_stage1_reg$D_OUT[2] ?
	       x__h4433 == 32'd0 :
	       divider_fifo_stage1_reg$D_OUT[2:0] == 3'd0 &&
	       x__h4514 == 32'd0 ;
  assign x__h4433 =
	     { 25'd0,
	       (divider_fifo_stage1_reg$D_OUT[11:5] & ~(7'h7E << x__h4397)) >>
	       0 } ;
  assign x__h4514 =
	     { 25'd0,
	       (divider_fifo_stage1_reg$D_OUT[11:5] &
		~(7'h7E <<
		  IF_divider_fifo_stage1_reg_first__13_BIT_2_19__ETC___d123)) >>
	       0 } ;
  assign x__h5427 =
	     extracter1_fifo_output_reg$D_OUT[11:10] == 2'd2 &&
	     extracter2_fifo_output_reg$D_OUT[11:10] == 2'd2 ||
	     extracter2_fifo_output_reg$D_OUT[11:10] == 2'd1 &&
	     extracter1_fifo_output_reg$D_OUT[11:10] == 2'd1 ;
  assign x__h5535 =
	     extracter1_fifo_output_reg$D_OUT[9] ^
	     extracter2_fifo_output_reg$D_OUT[9] ;
  assign x__h5805 = k_expo__h5624 + y__h5807 ;
  assign x__h6020 =
	     3'd6 -
	     _0_MINUS_divider_fifo_output_regD_OUT_BITS_10__ETC__q3[2:0] ;
  assign x__h6034 =
	     7'd127 >>
	     IF_divider_fifo_output_reg_first__15_BIT_9_26__ETC___d232 ;
  assign x__h6567 =
	     (_6_MINUS_IF_divider_fifo_output_reg_first__15_B_ETC___d239 ==
	      3'd0) ?
	       _theResult___fst__h6596 :
	       divider_fifo_output_reg$D_OUT[6] ;
  assign x__h6696 =
	     2'd1 <<
	     _6_MINUS_IF_divider_fifo_output_reg_first__15_B_ETC___d239 ;
  assign x__h7291 =
	     { _6_MINUS_IF_divider_fifo_output_reg_first__15_B_ETC___d239 !=
	       3'd0,
	       divider_fifo_output_reg$D_OUT[5:2] } >>
	     shift_new0__h5621 ;
  assign x__h7310 = 1'd0 - divider_fifo_output_reg$D_OUT[6] ;
  assign x__h7465 =
	     _4_MINUS_IF_6_MINUS_IF_divider_fifo_output_reg__ETC___d277 -
	     3'd1 ;
  assign x__h7625 =
	     _4_MINUS_IF_6_MINUS_IF_divider_fifo_output_reg__ETC___d277 -
	     3'd2 ;
  assign x__h8739 =
	     INV_new_inp369__q1[6] ?
	       3'd0 :
	       (INV_new_inp369__q1[5] ?
		  3'd1 :
		  (INV_new_inp369__q1[4] ?
		     3'd2 :
		     (INV_new_inp369__q1[3] ?
			3'd3 :
			(INV_new_inp369__q1[2] ?
			   3'd4 :
			   (INV_new_inp369__q1[1] ?
			      3'd5 :
			      (INV_new_inp369__q1[0] ? 3'd6 : 3'd7)))))) ;
  assign x__h9750 = { 1'd0, x__h9757 } ;
  assign x__h9757 =
	     new_inp__h8369[6] ?
	       3'd0 :
	       (new_inp__h8369[5] ?
		  3'd1 :
		  (new_inp__h8369[4] ?
		     3'd2 :
		     (new_inp__h8369[3] ?
			3'd3 :
			(new_inp__h8369[2] ?
			   3'd4 :
			   (new_inp__h8369[1] ?
			      3'd5 :
			      (new_inp__h8369[0] ? 3'd6 : 3'd7)))))) ;
  assign y__h1572 = { 1'd0, divider_intDivide_rg_numer[10:1] } ;
  assign y__h1669 = { 6'd0, divider_intDivide_rg_denom } ;
  assign y__h3059 = ~divider_intDivide_fifo_output_reg$D_OUT[1] ;
  assign y__h4422 = ~divider_fifo_stage1_reg$D_OUT[4] ;
  assign y__h5806 = { 6'd0, _theResult____h5631 } ;
  assign y__h5807 =
	     { 3'd0, x__h7291[3:0] } >>
	     _4_MINUS_IF_6_MINUS_IF_divider_fifo_output_reg__ETC___d277 ;
  assign y__h7505 = ~divider_fifo_output_reg$D_OUT[1] ;
  assign y__h7509 =
	     { 28'd0,
	       (divider_fifo_output_reg$D_OUT[5:2] & ~(4'hE << i1__h7515)) >>
	       0 } ==
	     32'd0 ;
  always@(shift_new0__h5621 or
	  divider_fifo_output_reg_first__15_BIT_0_94_AND_ETC___d301 or
	  divider_fifo_output_reg$D_OUT or
	  divider_fifo_output_reg_first__15_BIT_0_94_AND_ETC___d297)
  begin
    case (shift_new0__h5621)
      2'd0:
	  CASE_shift_new0621_0_divider_fifo_output_regD_ETC__q7 =
	      divider_fifo_output_reg$D_OUT[0];
      2'd1:
	  CASE_shift_new0621_0_divider_fifo_output_regD_ETC__q7 =
	      divider_fifo_output_reg_first__15_BIT_0_94_AND_ETC___d297;
      default: CASE_shift_new0621_0_divider_fifo_output_regD_ETC__q7 =
		   divider_fifo_output_reg_first__15_BIT_0_94_AND_ETC___d301;
    endcase
  end
  always@(shift_new0__h5621 or
	  divider_fifo_output_reg_first__15_BIT_0_94_AND_ETC___d301 or
	  divider_fifo_output_reg$D_OUT or
	  divider_fifo_output_reg_first__15_BIT_0_94_AND_ETC___d297)
  begin
    case (shift_new0__h5621)
      2'd0:
	  CASE_shift_new0621_0_NOT_divider_fifo_output_r_ETC__q8 =
	      !divider_fifo_output_reg$D_OUT[0];
      2'd1:
	  CASE_shift_new0621_0_NOT_divider_fifo_output_r_ETC__q8 =
	      !divider_fifo_output_reg_first__15_BIT_0_94_AND_ETC___d297;
      default: CASE_shift_new0621_0_NOT_divider_fifo_output_r_ETC__q8 =
		   !divider_fifo_output_reg_first__15_BIT_0_94_AND_ETC___d301;
    endcase
  end
  always@(divider_fifo_output_reg$D_OUT or a__h5668)
  begin
    case (divider_fifo_output_reg$D_OUT[13:12])
      2'd0:
	  output_regf_out_posit__h5645 =
	      { divider_fifo_output_reg$D_OUT[14],
		divider_fifo_output_reg$D_OUT[14] ?
		  7'd0 - a__h5668 :
		  a__h5668 };
      2'd1: output_regf_out_posit__h5645 = 8'd128;
      default: output_regf_out_posit__h5645 = 8'd0;
    endcase
  end
  always@(IF_IF_compute_request_put_BIT_15_98_THEN_0_MIN_ETC___d471)
  begin
    case (IF_IF_compute_request_put_BIT_15_98_THEN_0_MIN_ETC___d471)
      3'd2: x__h10987 = 4'd3;
      3'd3: x__h10987 = 4'd2;
      3'd4: x__h10987 = 4'd1;
      3'd5: x__h10987 = 4'd0;
      default: x__h10987 =
		   (IF_IF_compute_request_put_BIT_15_98_THEN_0_MIN_ETC___d471 <=
		    3'd1) ?
		     4'd4 :
		     4'd0;
    endcase
  end
  always@(IF_IF_compute_request_put_BIT_7_00_THEN_0_MINU_ETC___d573)
  begin
    case (IF_IF_compute_request_put_BIT_7_00_THEN_0_MINU_ETC___d573)
      3'd2: x__h13688 = 4'd3;
      3'd3: x__h13688 = 4'd2;
      3'd4: x__h13688 = 4'd1;
      3'd5: x__h13688 = 4'd0;
      default: x__h13688 =
		   (IF_IF_compute_request_put_BIT_7_00_THEN_0_MINU_ETC___d573 <=
		    3'd1) ?
		     4'd4 :
		     4'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        divider_intDivide_rg_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (divider_intDivide_rg_state$EN)
	  divider_intDivide_rg_state <= `BSV_ASSIGNMENT_DELAY
	      divider_intDivide_rg_state$D_IN;
      end
    if (divider_intDivide_rg_denom$EN)
      divider_intDivide_rg_denom <= `BSV_ASSIGNMENT_DELAY
	  divider_intDivide_rg_denom$D_IN;
    if (divider_intDivide_rg_denom2$EN)
      divider_intDivide_rg_denom2 <= `BSV_ASSIGNMENT_DELAY
	  divider_intDivide_rg_denom2$D_IN;
    if (divider_intDivide_rg_n$EN)
      divider_intDivide_rg_n <= `BSV_ASSIGNMENT_DELAY
	  divider_intDivide_rg_n$D_IN;
    if (divider_intDivide_rg_numer$EN)
      divider_intDivide_rg_numer <= `BSV_ASSIGNMENT_DELAY
	  divider_intDivide_rg_numer$D_IN;
    if (divider_intDivide_rg_quo$EN)
      divider_intDivide_rg_quo <= `BSV_ASSIGNMENT_DELAY
	  divider_intDivide_rg_quo$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    divider_intDivide_rg_denom = 5'h0A;
    divider_intDivide_rg_denom2 = 11'h2AA;
    divider_intDivide_rg_n = 7'h2A;
    divider_intDivide_rg_numer = 11'h2AA;
    divider_intDivide_rg_quo = 7'h2A;
    divider_intDivide_rg_state = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkPNE_test

