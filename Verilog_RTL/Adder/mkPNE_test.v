//
// Generated by Bluespec Compiler (build 16071ee)
//
// On Wed Sep 16 14:07:42 IST 2020
//
//
// Ports:
// Name                         I/O  size props
// RDY_compute_request_put        O     1
// compute_response_get           O    12 reg
// RDY_compute_response_get       O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// compute_request_put            I    16
// EN_compute_request_put         I     1
// EN_compute_response_get        I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPNE_test(CLK,
		  RST_N,

		  compute_request_put,
		  EN_compute_request_put,
		  RDY_compute_request_put,

		  EN_compute_response_get,
		  compute_response_get,
		  RDY_compute_response_get);
  input  CLK;
  input  RST_N;

  // action method compute_request_put
  input  [15 : 0] compute_request_put;
  input  EN_compute_request_put;
  output RDY_compute_request_put;

  // actionvalue method compute_response_get
  input  EN_compute_response_get;
  output [11 : 0] compute_response_get;
  output RDY_compute_response_get;

  // signals for module outputs
  wire [11 : 0] compute_response_get;
  wire RDY_compute_request_put, RDY_compute_response_get;

  // ports of submodule adder1_fifo_output_reg
  wire [14 : 0] adder1_fifo_output_reg$D_IN, adder1_fifo_output_reg$D_OUT;
  wire adder1_fifo_output_reg$CLR,
       adder1_fifo_output_reg$DEQ,
       adder1_fifo_output_reg$EMPTY_N,
       adder1_fifo_output_reg$ENQ,
       adder1_fifo_output_reg$FULL_N;

  // ports of submodule adder1_fifo_stage0_reg
  wire [32 : 0] adder1_fifo_stage0_reg$D_IN, adder1_fifo_stage0_reg$D_OUT;
  wire adder1_fifo_stage0_reg$CLR,
       adder1_fifo_stage0_reg$DEQ,
       adder1_fifo_stage0_reg$EMPTY_N,
       adder1_fifo_stage0_reg$ENQ,
       adder1_fifo_stage0_reg$FULL_N;

  // ports of submodule adder1_fifo_stage1_reg
  wire [27 : 0] adder1_fifo_stage1_reg$D_IN, adder1_fifo_stage1_reg$D_OUT;
  wire adder1_fifo_stage1_reg$CLR,
       adder1_fifo_stage1_reg$DEQ,
       adder1_fifo_stage1_reg$EMPTY_N,
       adder1_fifo_stage1_reg$ENQ,
       adder1_fifo_stage1_reg$FULL_N;

  // ports of submodule extracter1_fifo_output_reg
  wire [11 : 0] extracter1_fifo_output_reg$D_IN,
		extracter1_fifo_output_reg$D_OUT;
  wire extracter1_fifo_output_reg$CLR,
       extracter1_fifo_output_reg$DEQ,
       extracter1_fifo_output_reg$EMPTY_N,
       extracter1_fifo_output_reg$ENQ,
       extracter1_fifo_output_reg$FULL_N;

  // ports of submodule extracter1_fifo_stage0_reg
  wire [9 : 0] extracter1_fifo_stage0_reg$D_IN;
  wire extracter1_fifo_stage0_reg$CLR,
       extracter1_fifo_stage0_reg$DEQ,
       extracter1_fifo_stage0_reg$ENQ;

  // ports of submodule extracter1_fifo_stage1_reg
  wire [14 : 0] extracter1_fifo_stage1_reg$D_IN;
  wire extracter1_fifo_stage1_reg$CLR,
       extracter1_fifo_stage1_reg$DEQ,
       extracter1_fifo_stage1_reg$ENQ;

  // ports of submodule extracter1_fifo_stage2_reg
  wire [12 : 0] extracter1_fifo_stage2_reg$D_IN;
  wire extracter1_fifo_stage2_reg$CLR,
       extracter1_fifo_stage2_reg$DEQ,
       extracter1_fifo_stage2_reg$ENQ;

  // ports of submodule extracter2_fifo_output_reg
  wire [11 : 0] extracter2_fifo_output_reg$D_IN,
		extracter2_fifo_output_reg$D_OUT;
  wire extracter2_fifo_output_reg$CLR,
       extracter2_fifo_output_reg$DEQ,
       extracter2_fifo_output_reg$EMPTY_N,
       extracter2_fifo_output_reg$ENQ,
       extracter2_fifo_output_reg$FULL_N;

  // ports of submodule extracter2_fifo_stage0_reg
  wire [9 : 0] extracter2_fifo_stage0_reg$D_IN;
  wire extracter2_fifo_stage0_reg$CLR,
       extracter2_fifo_stage0_reg$DEQ,
       extracter2_fifo_stage0_reg$ENQ;

  // ports of submodule extracter2_fifo_stage1_reg
  wire [14 : 0] extracter2_fifo_stage1_reg$D_IN;
  wire extracter2_fifo_stage1_reg$CLR,
       extracter2_fifo_stage1_reg$DEQ,
       extracter2_fifo_stage1_reg$ENQ;

  // ports of submodule extracter2_fifo_stage2_reg
  wire [12 : 0] extracter2_fifo_stage2_reg$D_IN;
  wire extracter2_fifo_stage2_reg$CLR,
       extracter2_fifo_stage2_reg$DEQ,
       extracter2_fifo_stage2_reg$ENQ;

  // ports of submodule ffO
  wire [11 : 0] ffO$D_IN, ffO$D_OUT;
  wire ffO$CLR, ffO$DEQ, ffO$EMPTY_N, ffO$ENQ, ffO$FULL_N;

  // ports of submodule ffm
  wire [11 : 0] ffm$D_IN;
  wire ffm$CLR, ffm$DEQ, ffm$ENQ;

  // ports of submodule normalizer_fifo_output_reg
  wire [11 : 0] normalizer_fifo_output_reg$D_IN,
		normalizer_fifo_output_reg$D_OUT;
  wire normalizer_fifo_output_reg$CLR,
       normalizer_fifo_output_reg$DEQ,
       normalizer_fifo_output_reg$EMPTY_N,
       normalizer_fifo_output_reg$ENQ,
       normalizer_fifo_output_reg$FULL_N;

  // ports of submodule normalizer_fifo_stage0_reg
  wire [17 : 0] normalizer_fifo_stage0_reg$D_IN;
  wire normalizer_fifo_stage0_reg$CLR,
       normalizer_fifo_stage0_reg$DEQ,
       normalizer_fifo_stage0_reg$ENQ;

  // ports of submodule normalizer_fifo_stage1_reg
  wire [20 : 0] normalizer_fifo_stage1_reg$D_IN;
  wire normalizer_fifo_stage1_reg$CLR,
       normalizer_fifo_stage1_reg$DEQ,
       normalizer_fifo_stage1_reg$ENQ;

  // ports of submodule normalizer_fifo_stage2_reg
  wire [11 : 0] normalizer_fifo_stage2_reg$D_IN;
  wire normalizer_fifo_stage2_reg$CLR,
       normalizer_fifo_stage2_reg$DEQ,
       normalizer_fifo_stage2_reg$ENQ;

  // rule scheduling signals
  wire CAN_FIRE_RL_adder1_stage_1,
       CAN_FIRE_RL_adder1_stage_2,
       CAN_FIRE_RL_rl_connect0,
       CAN_FIRE_RL_rl_connect2,
       CAN_FIRE_RL_rl_out,
       CAN_FIRE_compute_request_put,
       CAN_FIRE_compute_response_get,
       WILL_FIRE_RL_adder1_stage_1,
       WILL_FIRE_RL_adder1_stage_2,
       WILL_FIRE_RL_rl_connect0,
       WILL_FIRE_RL_rl_connect2,
       WILL_FIRE_RL_rl_out,
       WILL_FIRE_compute_request_put,
       WILL_FIRE_compute_response_get;

  // remaining internal signals
  reg [8 : 0] x__h1485;
  reg [7 : 0] output_regf_out_posit__h6985;
  reg [3 : 0] x__h12347, x__h15048;
  reg CASE_shift_new0961_0_NOT_adder1_fifo_output_re_ETC__q7,
      CASE_shift_new0961_0_adder1_fifo_output_regD__ETC__q6;
  wire [9 : 0] frac_sign__h1628,
	       frac_sign__h1635,
	       frac_sign__h1640,
	       x__h1756,
	       x__h3244,
	       x__h4688;
  wire [8 : 0] IF_INV_adder1_fifo_stage1_reg_first__1_BIT_19__ETC___d130,
	       IF_adder1_fifo_stage0_reg_first_BITS_1_TO_0_EQ_ETC___d23,
	       IF_compute_request_put_BITS_14_TO_8_64_EQ_0_65_ETC___d464,
	       IF_compute_request_put_BITS_6_TO_0_66_EQ_0_67__ETC___d566,
	       b__h1414,
	       c__h1411,
	       f1__h1375,
	       f2__h1376,
	       x__h1428;
  wire [7 : 0] x__h6844, x__h6860;
  wire [6 : 0] IF_IF_NOT_IF_adder1_fifo_output_reg_first__83__ETC___d311,
	       IF_NOT_IF_adder1_fifo_output_reg_first__83_BIT_ETC___d307,
	       IF_adder1_fifo_output_reg_first__83_BIT_10_88__ETC___d228,
	       INV_new_inp2442__q2,
	       INV_new_inp729__q1,
	       a__h7008,
	       b__h7149,
	       b__h7275,
	       b__h7924,
	       b__h9137,
	       k__h7337,
	       k__h7382,
	       k_expo__h6964,
	       new_inp__h12442,
	       new_inp__h9729,
	       x__h7165,
	       x__h7394,
	       y__h7166,
	       y__h7167;
  wire [4 : 0] IF_INV_adder1_fifo_stage1_reg_first__1_BIT_19__ETC___d144,
	       IF_adder1_fifo_stage1_reg_first__1_BITS_18_TO__ETC___d143,
	       SEXT_IF_IF_compute_request_put_BIT_15_66_THEN__ETC___d410,
	       SEXT_IF_IF_compute_request_put_BIT_7_68_THEN_0_ETC___d512,
	       SEXT_IF_new_inp2442_BIT_6_THEN_b2790_ELSE_b2792__q9,
	       SEXT_IF_new_inp729_BIT_6_THEN_b0089_ELSE_b00910__q11,
	       frac_shift__h1629,
	       frac_shift__h1636,
	       frac_shift__h1641,
	       x__h1476,
	       x__h1502,
	       x__h8651,
	       y__h1767,
	       y__h3245,
	       y__h4689;
  wire [3 : 0] IF_new_inp2442_BIT_6_THEN_b2790_ELSE_b2792__q8,
	       IF_new_inp729_BIT_6_THEN_b0089_ELSE_b0091__q10,
	       _0_MINUS_adder1_fifo_output_regD_OUT_BITS_10_TO_7__q3,
	       adder1_fifo_output_regD_OUT_BITS_5_TO_2__q5,
	       b__h10089,
	       b__h10091,
	       b__h12790,
	       b__h12792,
	       frac__h12450,
	       frac__h9737,
	       x651_BITS_3_TO_0__q4,
	       x__h11110,
	       x__h13811,
	       x__h1804,
	       x__h3258,
	       x__h4702;
  wire [2 : 0] IF_6_MINUS_IF_adder1_fifo_output_reg_first__83_ETC___d221,
	       IF_IF_compute_request_put_BIT_15_66_THEN_0_MIN_ETC___d439,
	       IF_IF_compute_request_put_BIT_7_68_THEN_0_MINU_ETC___d541,
	       IF_adder1_fifo_output_reg_first__83_BIT_9_94_A_ETC___d200,
	       _4_MINUS_IF_6_MINUS_IF_adder1_fifo_output_reg_f_ETC___d245,
	       _6_MINUS_IF_adder1_fifo_output_reg_first__83_BI_ETC___d207,
	       adder1_fifo_output_reg_first__83_BITS_9_TO_7_9_ETC___d196,
	       x__h10099,
	       x__h11117,
	       x__h12298,
	       x__h12800,
	       x__h13818,
	       x__h14999,
	       x__h7380,
	       x__h8825,
	       x__h8985;
  wire [1 : 0] _theResult___snd_snd__h8105,
	       i1__h8875,
	       i__h8778,
	       shift_new0__h6961,
	       shift_new__h8052,
	       stage0_regf_zero_flag__h6762,
	       x__h8056;
  wire IF_IF_6_MINUS_IF_adder1_fifo_output_reg_first__ETC___d282,
       NOT_4_MINUS_IF_6_MINUS_IF_adder1_fifo_output_r_ETC___d299,
       NOT_4_MINUS_IF_6_MINUS_IF_adder1_fifo_output_r_ETC___d343,
       NOT_6_MINUS_IF_adder1_fifo_output_reg_first__8_ETC___d249,
       NOT_6_MINUS_IF_adder1_fifo_output_reg_first__8_ETC___d259,
       NOT_6_MINUS_IF_adder1_fifo_output_reg_first__8_ETC___d315,
       NOT_6_MINUS_IF_adder1_fifo_output_reg_first__8_ETC___d321,
       NOT_6_MINUS_IF_adder1_fifo_output_reg_first__8_ETC___d340,
       NOT_6_MINUS_IF_adder1_fifo_output_reg_first__8_ETC___d344,
       NOT_IF_adder1_fifo_output_reg_first__83_BIT_10_ETC___d233,
       NOT_NOT_6_MINUS_IF_adder1_fifo_output_reg_firs_ETC___d272,
       _4_MINUS_IF_6_MINUS_IF_adder1_fifo_output_reg_f_ETC___d284,
       _theResult____h6971,
       _theResult___fst__h7956,
       adder1_fifo_output_reg_first__83_BITS_5_TO_2_3_ETC___d255,
       adder1_fifo_output_reg_first__83_BIT_0_62_AND__ETC___d265,
       adder1_fifo_output_reg_first__83_BIT_0_62_AND__ETC___d269,
       adder1_fifo_output_reg_first__83_BIT_6_09_AND__ETC___d212,
       adder1_fifo_stage0_reg_first_BITS_28_TO_24_0_S_ETC___d11,
       adder1_fifo_stage1_reg_first__1_BITS_18_TO_10__ETC___d48,
       expo__h12449,
       expo__h9736,
       expo_new__h8022,
       expo_new__h8053,
       flag_prev_truncate__h6970,
       mask_e__h7954,
       truncated_frac_msb__h6966,
       x__h1565,
       x__h1598,
       x__h6205,
       x__h6753,
       x__h7927,
       x__h8670,
       y__h8865,
       y__h8869;

  // action method compute_request_put
  assign RDY_compute_request_put =
	     extracter1_fifo_output_reg$FULL_N &&
	     extracter2_fifo_output_reg$FULL_N ;
  assign CAN_FIRE_compute_request_put =
	     extracter1_fifo_output_reg$FULL_N &&
	     extracter2_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_compute_request_put = EN_compute_request_put ;

  // actionvalue method compute_response_get
  assign compute_response_get = ffO$D_OUT ;
  assign RDY_compute_response_get = ffO$EMPTY_N ;
  assign CAN_FIRE_compute_response_get = ffO$EMPTY_N ;
  assign WILL_FIRE_compute_response_get = EN_compute_response_get ;

  // submodule adder1_fifo_output_reg
  FIFO2 #(.width(32'd15), .guarded(32'd1)) adder1_fifo_output_reg(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(adder1_fifo_output_reg$D_IN),
								  .ENQ(adder1_fifo_output_reg$ENQ),
								  .DEQ(adder1_fifo_output_reg$DEQ),
								  .CLR(adder1_fifo_output_reg$CLR),
								  .D_OUT(adder1_fifo_output_reg$D_OUT),
								  .FULL_N(adder1_fifo_output_reg$FULL_N),
								  .EMPTY_N(adder1_fifo_output_reg$EMPTY_N));

  // submodule adder1_fifo_stage0_reg
  FIFO2 #(.width(32'd33), .guarded(32'd1)) adder1_fifo_stage0_reg(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(adder1_fifo_stage0_reg$D_IN),
								  .ENQ(adder1_fifo_stage0_reg$ENQ),
								  .DEQ(adder1_fifo_stage0_reg$DEQ),
								  .CLR(adder1_fifo_stage0_reg$CLR),
								  .D_OUT(adder1_fifo_stage0_reg$D_OUT),
								  .FULL_N(adder1_fifo_stage0_reg$FULL_N),
								  .EMPTY_N(adder1_fifo_stage0_reg$EMPTY_N));

  // submodule adder1_fifo_stage1_reg
  FIFO2 #(.width(32'd28), .guarded(32'd1)) adder1_fifo_stage1_reg(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(adder1_fifo_stage1_reg$D_IN),
								  .ENQ(adder1_fifo_stage1_reg$ENQ),
								  .DEQ(adder1_fifo_stage1_reg$DEQ),
								  .CLR(adder1_fifo_stage1_reg$CLR),
								  .D_OUT(adder1_fifo_stage1_reg$D_OUT),
								  .FULL_N(adder1_fifo_stage1_reg$FULL_N),
								  .EMPTY_N(adder1_fifo_stage1_reg$EMPTY_N));

  // submodule extracter1_fifo_output_reg
  FIFO2 #(.width(32'd12),
	  .guarded(32'd1)) extracter1_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_output_reg$D_IN),
						      .ENQ(extracter1_fifo_output_reg$ENQ),
						      .DEQ(extracter1_fifo_output_reg$DEQ),
						      .CLR(extracter1_fifo_output_reg$CLR),
						      .D_OUT(extracter1_fifo_output_reg$D_OUT),
						      .FULL_N(extracter1_fifo_output_reg$FULL_N),
						      .EMPTY_N(extracter1_fifo_output_reg$EMPTY_N));

  // submodule extracter1_fifo_stage0_reg
  FIFO2 #(.width(32'd10),
	  .guarded(32'd1)) extracter1_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_stage0_reg$D_IN),
						      .ENQ(extracter1_fifo_stage0_reg$ENQ),
						      .DEQ(extracter1_fifo_stage0_reg$DEQ),
						      .CLR(extracter1_fifo_stage0_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter1_fifo_stage1_reg
  FIFO2 #(.width(32'd15),
	  .guarded(32'd1)) extracter1_fifo_stage1_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_stage1_reg$D_IN),
						      .ENQ(extracter1_fifo_stage1_reg$ENQ),
						      .DEQ(extracter1_fifo_stage1_reg$DEQ),
						      .CLR(extracter1_fifo_stage1_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter1_fifo_stage2_reg
  FIFO2 #(.width(32'd13),
	  .guarded(32'd1)) extracter1_fifo_stage2_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_stage2_reg$D_IN),
						      .ENQ(extracter1_fifo_stage2_reg$ENQ),
						      .DEQ(extracter1_fifo_stage2_reg$DEQ),
						      .CLR(extracter1_fifo_stage2_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter2_fifo_output_reg
  FIFO2 #(.width(32'd12),
	  .guarded(32'd1)) extracter2_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_output_reg$D_IN),
						      .ENQ(extracter2_fifo_output_reg$ENQ),
						      .DEQ(extracter2_fifo_output_reg$DEQ),
						      .CLR(extracter2_fifo_output_reg$CLR),
						      .D_OUT(extracter2_fifo_output_reg$D_OUT),
						      .FULL_N(extracter2_fifo_output_reg$FULL_N),
						      .EMPTY_N(extracter2_fifo_output_reg$EMPTY_N));

  // submodule extracter2_fifo_stage0_reg
  FIFO2 #(.width(32'd10),
	  .guarded(32'd1)) extracter2_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_stage0_reg$D_IN),
						      .ENQ(extracter2_fifo_stage0_reg$ENQ),
						      .DEQ(extracter2_fifo_stage0_reg$DEQ),
						      .CLR(extracter2_fifo_stage0_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter2_fifo_stage1_reg
  FIFO2 #(.width(32'd15),
	  .guarded(32'd1)) extracter2_fifo_stage1_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_stage1_reg$D_IN),
						      .ENQ(extracter2_fifo_stage1_reg$ENQ),
						      .DEQ(extracter2_fifo_stage1_reg$DEQ),
						      .CLR(extracter2_fifo_stage1_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter2_fifo_stage2_reg
  FIFO2 #(.width(32'd13),
	  .guarded(32'd1)) extracter2_fifo_stage2_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_stage2_reg$D_IN),
						      .ENQ(extracter2_fifo_stage2_reg$ENQ),
						      .DEQ(extracter2_fifo_stage2_reg$DEQ),
						      .CLR(extracter2_fifo_stage2_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule ffO
  FIFO2 #(.width(32'd12), .guarded(32'd1)) ffO(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(ffO$D_IN),
					       .ENQ(ffO$ENQ),
					       .DEQ(ffO$DEQ),
					       .CLR(ffO$CLR),
					       .D_OUT(ffO$D_OUT),
					       .FULL_N(ffO$FULL_N),
					       .EMPTY_N(ffO$EMPTY_N));

  // submodule ffm
  FIFO2 #(.width(32'd12), .guarded(32'd1)) ffm(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(ffm$D_IN),
					       .ENQ(ffm$ENQ),
					       .DEQ(ffm$DEQ),
					       .CLR(ffm$CLR),
					       .D_OUT(),
					       .FULL_N(),
					       .EMPTY_N());

  // submodule normalizer_fifo_output_reg
  FIFO2 #(.width(32'd12),
	  .guarded(32'd1)) normalizer_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_output_reg$D_IN),
						      .ENQ(normalizer_fifo_output_reg$ENQ),
						      .DEQ(normalizer_fifo_output_reg$DEQ),
						      .CLR(normalizer_fifo_output_reg$CLR),
						      .D_OUT(normalizer_fifo_output_reg$D_OUT),
						      .FULL_N(normalizer_fifo_output_reg$FULL_N),
						      .EMPTY_N(normalizer_fifo_output_reg$EMPTY_N));

  // submodule normalizer_fifo_stage0_reg
  FIFO2 #(.width(32'd18),
	  .guarded(32'd1)) normalizer_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_stage0_reg$D_IN),
						      .ENQ(normalizer_fifo_stage0_reg$ENQ),
						      .DEQ(normalizer_fifo_stage0_reg$DEQ),
						      .CLR(normalizer_fifo_stage0_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule normalizer_fifo_stage1_reg
  FIFO2 #(.width(32'd21),
	  .guarded(32'd1)) normalizer_fifo_stage1_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_stage1_reg$D_IN),
						      .ENQ(normalizer_fifo_stage1_reg$ENQ),
						      .DEQ(normalizer_fifo_stage1_reg$DEQ),
						      .CLR(normalizer_fifo_stage1_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule normalizer_fifo_stage2_reg
  FIFO2 #(.width(32'd12),
	  .guarded(32'd1)) normalizer_fifo_stage2_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_stage2_reg$D_IN),
						      .ENQ(normalizer_fifo_stage2_reg$ENQ),
						      .DEQ(normalizer_fifo_stage2_reg$DEQ),
						      .CLR(normalizer_fifo_stage2_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // rule RL_rl_connect0
  assign CAN_FIRE_RL_rl_connect0 =
	     extracter1_fifo_output_reg$EMPTY_N &&
	     extracter2_fifo_output_reg$EMPTY_N &&
	     adder1_fifo_stage0_reg$FULL_N ;
  assign WILL_FIRE_RL_rl_connect0 = CAN_FIRE_RL_rl_connect0 ;

  // rule RL_rl_connect2
  assign CAN_FIRE_RL_rl_connect2 =
	     adder1_fifo_output_reg$EMPTY_N &&
	     normalizer_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_rl_connect2 = CAN_FIRE_RL_rl_connect2 ;

  // rule RL_rl_out
  assign CAN_FIRE_RL_rl_out =
	     normalizer_fifo_output_reg$EMPTY_N && ffO$FULL_N ;
  assign WILL_FIRE_RL_rl_out = CAN_FIRE_RL_rl_out ;

  // rule RL_adder1_stage_1
  assign CAN_FIRE_RL_adder1_stage_1 =
	     adder1_fifo_stage0_reg$EMPTY_N && adder1_fifo_stage1_reg$FULL_N ;
  assign WILL_FIRE_RL_adder1_stage_1 = CAN_FIRE_RL_adder1_stage_1 ;

  // rule RL_adder1_stage_2
  assign CAN_FIRE_RL_adder1_stage_2 =
	     adder1_fifo_stage1_reg$EMPTY_N && adder1_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_adder1_stage_2 = CAN_FIRE_RL_adder1_stage_2 ;

  // submodule adder1_fifo_output_reg
  assign adder1_fifo_output_reg$D_IN =
	     { x__h1565,
	       (!IF_INV_adder1_fifo_stage1_reg_first__1_BIT_19__ETC___d130[8] &&
		adder1_fifo_stage1_reg$D_OUT[26:25] == 2'd0) ?
		 2'd2 :
		 adder1_fifo_stage1_reg$D_OUT[26:25],
	       adder1_fifo_stage1_reg$D_OUT[27],
	       IF_INV_adder1_fifo_stage1_reg_first__1_BIT_19__ETC___d144,
	       IF_INV_adder1_fifo_stage1_reg_first__1_BIT_19__ETC___d130[7:3],
	       x__h6205 } ;
  assign adder1_fifo_output_reg$ENQ = CAN_FIRE_RL_adder1_stage_2 ;
  assign adder1_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_connect2 ;
  assign adder1_fifo_output_reg$CLR = 1'b0 ;

  // submodule adder1_fifo_stage0_reg
  assign adder1_fifo_stage0_reg$D_IN =
	     { x__h6753,
	       (extracter1_fifo_output_reg$D_OUT[11:10] == 2'd2 &&
		extracter2_fifo_output_reg$D_OUT[11:10] == 2'd2) ?
		 2'd2 :
		 ((extracter1_fifo_output_reg$D_OUT[11:10] == 2'd1 ||
		   extracter2_fifo_output_reg$D_OUT[11:10] == 2'd1) ?
		    2'd1 :
		    2'd0),
	       extracter1_fifo_output_reg$D_OUT[9:4],
	       x__h6844,
	       extracter2_fifo_output_reg$D_OUT[9:4],
	       x__h6860,
	       stage0_regf_zero_flag__h6762 } ;
  assign adder1_fifo_stage0_reg$ENQ = CAN_FIRE_RL_rl_connect0 ;
  assign adder1_fifo_stage0_reg$DEQ = CAN_FIRE_RL_adder1_stage_1 ;
  assign adder1_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule adder1_fifo_stage1_reg
  assign adder1_fifo_stage1_reg$D_IN =
	     { adder1_fifo_stage0_reg$D_OUT[32:30],
	       (adder1_fifo_stage0_reg$D_OUT[1:0] == 2'b01) ?
		 adder1_fifo_stage0_reg$D_OUT[14:10] :
		 ((adder1_fifo_stage0_reg$D_OUT[1:0] == 2'b10 ||
		   !adder1_fifo_stage0_reg_first_BITS_28_TO_24_0_S_ETC___d11) ?
		    adder1_fifo_stage0_reg$D_OUT[28:24] :
		    adder1_fifo_stage0_reg$D_OUT[14:10]),
	       adder1_fifo_stage0_reg$D_OUT[29],
	       x__h1428,
	       adder1_fifo_stage0_reg$D_OUT[15],
	       x__h1485 } ;
  assign adder1_fifo_stage1_reg$ENQ = CAN_FIRE_RL_adder1_stage_1 ;
  assign adder1_fifo_stage1_reg$DEQ = CAN_FIRE_RL_adder1_stage_2 ;
  assign adder1_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_output_reg
  assign extracter1_fifo_output_reg$D_IN =
	     { (compute_request_put[14:8] == 7'd0 &&
		!compute_request_put[15]) ?
		 2'd2 :
		 ((compute_request_put[14:8] == 7'd0 &&
		   compute_request_put[15]) ?
		    2'd1 :
		    2'd0),
	       compute_request_put[15],
	       IF_compute_request_put_BITS_14_TO_8_64_EQ_0_65_ETC___d464 } ;
  assign extracter1_fifo_output_reg$ENQ = EN_compute_request_put ;
  assign extracter1_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_connect0 ;
  assign extracter1_fifo_output_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_stage0_reg
  assign extracter1_fifo_stage0_reg$D_IN = 10'h0 ;
  assign extracter1_fifo_stage0_reg$ENQ = 1'b0 ;
  assign extracter1_fifo_stage0_reg$DEQ = 1'b0 ;
  assign extracter1_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_stage1_reg
  assign extracter1_fifo_stage1_reg$D_IN = 15'h0 ;
  assign extracter1_fifo_stage1_reg$ENQ = 1'b0 ;
  assign extracter1_fifo_stage1_reg$DEQ = 1'b0 ;
  assign extracter1_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_stage2_reg
  assign extracter1_fifo_stage2_reg$D_IN = 13'h0 ;
  assign extracter1_fifo_stage2_reg$ENQ = 1'b0 ;
  assign extracter1_fifo_stage2_reg$DEQ = 1'b0 ;
  assign extracter1_fifo_stage2_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_output_reg
  assign extracter2_fifo_output_reg$D_IN =
	     { (compute_request_put[6:0] == 7'd0 && !compute_request_put[7]) ?
		 2'd2 :
		 ((compute_request_put[6:0] == 7'd0 &&
		   compute_request_put[7]) ?
		    2'd1 :
		    2'd0),
	       compute_request_put[7],
	       IF_compute_request_put_BITS_6_TO_0_66_EQ_0_67__ETC___d566 } ;
  assign extracter2_fifo_output_reg$ENQ = EN_compute_request_put ;
  assign extracter2_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_connect0 ;
  assign extracter2_fifo_output_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_stage0_reg
  assign extracter2_fifo_stage0_reg$D_IN = 10'h0 ;
  assign extracter2_fifo_stage0_reg$ENQ = 1'b0 ;
  assign extracter2_fifo_stage0_reg$DEQ = 1'b0 ;
  assign extracter2_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_stage1_reg
  assign extracter2_fifo_stage1_reg$D_IN = 15'h0 ;
  assign extracter2_fifo_stage1_reg$ENQ = 1'b0 ;
  assign extracter2_fifo_stage1_reg$DEQ = 1'b0 ;
  assign extracter2_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_stage2_reg
  assign extracter2_fifo_stage2_reg$D_IN = 13'h0 ;
  assign extracter2_fifo_stage2_reg$ENQ = 1'b0 ;
  assign extracter2_fifo_stage2_reg$DEQ = 1'b0 ;
  assign extracter2_fifo_stage2_reg$CLR = 1'b0 ;

  // submodule ffO
  assign ffO$D_IN = normalizer_fifo_output_reg$D_OUT ;
  assign ffO$ENQ = CAN_FIRE_RL_rl_out ;
  assign ffO$DEQ = EN_compute_response_get ;
  assign ffO$CLR = 1'b0 ;

  // submodule ffm
  assign ffm$D_IN = 12'h0 ;
  assign ffm$ENQ = 1'b0 ;
  assign ffm$DEQ = 1'b0 ;
  assign ffm$CLR = 1'b0 ;

  // submodule normalizer_fifo_output_reg
  assign normalizer_fifo_output_reg$D_IN =
	     { adder1_fifo_output_reg$D_OUT[11],
	       output_regf_out_posit__h6985,
	       adder1_fifo_output_reg$D_OUT[13:12],
	       flag_prev_truncate__h6970 - _theResult____h6971 ||
	       a__h7008 == 7'd0 &&
	       NOT_6_MINUS_IF_adder1_fifo_output_reg_first__8_ETC___d344 } ;
  assign normalizer_fifo_output_reg$ENQ = CAN_FIRE_RL_rl_connect2 ;
  assign normalizer_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_out ;
  assign normalizer_fifo_output_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_stage0_reg
  assign normalizer_fifo_stage0_reg$D_IN = 18'h0 ;
  assign normalizer_fifo_stage0_reg$ENQ = 1'b0 ;
  assign normalizer_fifo_stage0_reg$DEQ = 1'b0 ;
  assign normalizer_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_stage1_reg
  assign normalizer_fifo_stage1_reg$D_IN = 21'h0 ;
  assign normalizer_fifo_stage1_reg$ENQ = 1'b0 ;
  assign normalizer_fifo_stage1_reg$DEQ = 1'b0 ;
  assign normalizer_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_stage2_reg
  assign normalizer_fifo_stage2_reg$D_IN = 12'h0 ;
  assign normalizer_fifo_stage2_reg$ENQ = 1'b0 ;
  assign normalizer_fifo_stage2_reg$DEQ = 1'b0 ;
  assign normalizer_fifo_stage2_reg$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_6_MINUS_IF_adder1_fifo_output_reg_first__83_ETC___d221 =
	     (_6_MINUS_IF_adder1_fifo_output_reg_first__83_BI_ETC___d207 ==
	      3'd0) ?
	       _6_MINUS_IF_adder1_fifo_output_reg_first__83_BI_ETC___d207 :
	       _6_MINUS_IF_adder1_fifo_output_reg_first__83_BI_ETC___d207 -
	       3'd1 ;
  assign IF_IF_6_MINUS_IF_adder1_fifo_output_reg_first__ETC___d282 =
	     (shift_new0__h6961 == 2'd0) ?
	       !adder1_fifo_output_reg$D_OUT[1] :
	       !adder1_fifo_output_reg_first__83_BITS_5_TO_2_3_ETC___d255 ;
  assign IF_IF_NOT_IF_adder1_fifo_output_reg_first__83__ETC___d311 =
	     (b__h7149[6] &&
	      !IF_NOT_IF_adder1_fifo_output_reg_first__83_BIT_ETC___d307[6]) ?
	       7'd127 :
	       IF_NOT_IF_adder1_fifo_output_reg_first__83_BIT_ETC___d307 ;
  assign IF_IF_compute_request_put_BIT_15_66_THEN_0_MIN_ETC___d439 =
	     new_inp__h9729[6] ?
	       ((!INV_new_inp729__q1[6] && !INV_new_inp729__q1[5] &&
		 !INV_new_inp729__q1[4] &&
		 !INV_new_inp729__q1[3] &&
		 !INV_new_inp729__q1[2] &&
		 !INV_new_inp729__q1[1] &&
		 !INV_new_inp729__q1[0]) ?
		  3'd7 :
		  3'd6) -
	       x__h10099 :
	       ((!new_inp__h9729[5] && !new_inp__h9729[4] &&
		 !new_inp__h9729[3] &&
		 !new_inp__h9729[2] &&
		 !new_inp__h9729[1] &&
		 !new_inp__h9729[0]) ?
		  3'd7 :
		  3'd6) -
	       x__h11117 ;
  assign IF_IF_compute_request_put_BIT_7_68_THEN_0_MINU_ETC___d541 =
	     new_inp__h12442[6] ?
	       ((!INV_new_inp2442__q2[6] && !INV_new_inp2442__q2[5] &&
		 !INV_new_inp2442__q2[4] &&
		 !INV_new_inp2442__q2[3] &&
		 !INV_new_inp2442__q2[2] &&
		 !INV_new_inp2442__q2[1] &&
		 !INV_new_inp2442__q2[0]) ?
		  3'd7 :
		  3'd6) -
	       x__h12800 :
	       ((!new_inp__h12442[5] && !new_inp__h12442[4] &&
		 !new_inp__h12442[3] &&
		 !new_inp__h12442[2] &&
		 !new_inp__h12442[1] &&
		 !new_inp__h12442[0]) ?
		  3'd7 :
		  3'd6) -
	       x__h13818 ;
  assign IF_INV_adder1_fifo_stage1_reg_first__1_BIT_19__ETC___d130 =
	     (~x__h1598) ?
	       x__h1756[8:0] :
	       (adder1_fifo_stage1_reg_first__1_BITS_18_TO_10__ETC___d48 ?
		  x__h4688[8:0] :
		  x__h3244[8:0]) ;
  assign IF_INV_adder1_fifo_stage1_reg_first__1_BIT_19__ETC___d144 =
	     (~x__h1598) ?
	       adder1_fifo_stage1_reg$D_OUT[24:20] -
	       (frac_shift__h1629 - 5'd1) :
	       IF_adder1_fifo_stage1_reg_first__1_BITS_18_TO__ETC___d143 ;
  assign IF_NOT_IF_adder1_fifo_output_reg_first__83_BIT_ETC___d307 =
	     b__h7149 + b__h9137 ;
  assign IF_adder1_fifo_output_reg_first__83_BIT_10_88__ETC___d228 =
	     b__h7275 + b__h7924 ;
  assign IF_adder1_fifo_output_reg_first__83_BIT_9_94_A_ETC___d200 =
	     (adder1_fifo_output_reg$D_OUT[9] &&
	      !adder1_fifo_output_reg_first__83_BITS_9_TO_7_9_ETC___d196[2]) ?
	       3'd7 :
	       adder1_fifo_output_reg_first__83_BITS_9_TO_7_9_ETC___d196 ;
  assign IF_adder1_fifo_stage0_reg_first_BITS_1_TO_0_EQ_ETC___d23 =
	     (adder1_fifo_stage0_reg$D_OUT[1:0] == 2'b10 ||
	      !adder1_fifo_stage0_reg_first_BITS_28_TO_24_0_S_ETC___d11) ?
	       f1__h1375 :
	       b__h1414 ;
  assign IF_adder1_fifo_stage1_reg_first__1_BITS_18_TO__ETC___d143 =
	     adder1_fifo_stage1_reg_first__1_BITS_18_TO_10__ETC___d48 ?
	       adder1_fifo_stage1_reg$D_OUT[24:20] - y__h4689 :
	       adder1_fifo_stage1_reg$D_OUT[24:20] - y__h3245 ;
  assign IF_compute_request_put_BITS_14_TO_8_64_EQ_0_65_ETC___d464 =
	     (compute_request_put[14:8] == 7'd0 && !compute_request_put[15]) ?
	       9'd0 :
	       { SEXT_IF_IF_compute_request_put_BIT_15_66_THEN__ETC___d410 +
		 { 4'd0, expo__h9736 },
		 frac__h9737 } ;
  assign IF_compute_request_put_BITS_6_TO_0_66_EQ_0_67__ETC___d566 =
	     (compute_request_put[6:0] == 7'd0 && !compute_request_put[7]) ?
	       9'd0 :
	       { SEXT_IF_IF_compute_request_put_BIT_7_68_THEN_0_ETC___d512 +
		 { 4'd0, expo__h12449 },
		 frac__h12450 } ;
  assign IF_new_inp2442_BIT_6_THEN_b2790_ELSE_b2792__q8 =
	     new_inp__h12442[6] ? b__h12790 : b__h12792 ;
  assign IF_new_inp729_BIT_6_THEN_b0089_ELSE_b0091__q10 =
	     new_inp__h9729[6] ? b__h10089 : b__h10091 ;
  assign INV_new_inp2442__q2 = ~new_inp__h12442 ;
  assign INV_new_inp729__q1 = ~new_inp__h9729 ;
  assign NOT_4_MINUS_IF_6_MINUS_IF_adder1_fifo_output_r_ETC___d299 =
	     !_4_MINUS_IF_6_MINUS_IF_adder1_fifo_output_reg_f_ETC___d284 &&
	     { 28'd0, (x__h8651[3:0] & ~(4'hE << x__h8985[1:0])) >> 0 } ==
	     32'd0 &&
	     IF_IF_6_MINUS_IF_adder1_fifo_output_reg_first__ETC___d282 ||
	     _6_MINUS_IF_adder1_fifo_output_reg_first__83_BI_ETC___d207 ==
	     3'd0 &&
	     shift_new0__h6961 == 2'd0 ||
	     k_expo__h6964 == 7'd127 &&
	     IF_6_MINUS_IF_adder1_fifo_output_reg_first__83_ETC___d221 ==
	     3'd0 &&
	     x__h8651[3:0] == 4'd0 &&
	     IF_IF_6_MINUS_IF_adder1_fifo_output_reg_first__ETC___d282 ;
  assign NOT_4_MINUS_IF_6_MINUS_IF_adder1_fifo_output_r_ETC___d343 =
	     _4_MINUS_IF_6_MINUS_IF_adder1_fifo_output_reg_f_ETC___d245 !=
	     3'd0 &&
	     (_4_MINUS_IF_6_MINUS_IF_adder1_fifo_output_reg_f_ETC___d245 !=
	      3'd1 ||
	      truncated_frac_msb__h6966) &&
	     (_4_MINUS_IF_6_MINUS_IF_adder1_fifo_output_reg_f_ETC___d284 ||
	      { 28'd0, (x__h8651[3:0] & ~(4'hE << x__h8985[1:0])) >> 0 } !=
	      32'd0 ||
	      truncated_frac_msb__h6966) &&
	     NOT_6_MINUS_IF_adder1_fifo_output_reg_first__8_ETC___d340 ;
  assign NOT_6_MINUS_IF_adder1_fifo_output_reg_first__8_ETC___d249 =
	     x651_BITS_3_TO_0__q4[_4_MINUS_IF_6_MINUS_IF_adder1_fifo_output_reg_f_ETC___d245[1:0]] ;
  assign NOT_6_MINUS_IF_adder1_fifo_output_reg_first__8_ETC___d259 =
	     x651_BITS_3_TO_0__q4[x__h8825[1:0]] ;
  assign NOT_6_MINUS_IF_adder1_fifo_output_reg_first__8_ETC___d315 =
	     NOT_6_MINUS_IF_adder1_fifo_output_reg_first__8_ETC___d249 ||
	     ((_4_MINUS_IF_6_MINUS_IF_adder1_fifo_output_reg_f_ETC___d245 ==
	       3'd0) ?
		IF_IF_6_MINUS_IF_adder1_fifo_output_reg_first__ETC___d282 :
		!NOT_6_MINUS_IF_adder1_fifo_output_reg_first__8_ETC___d259) ;
  assign NOT_6_MINUS_IF_adder1_fifo_output_reg_first__8_ETC___d321 =
	     NOT_6_MINUS_IF_adder1_fifo_output_reg_first__8_ETC___d315 ||
	     CASE_shift_new0961_0_NOT_adder1_fifo_output_re_ETC__q7 ;
  assign NOT_6_MINUS_IF_adder1_fifo_output_reg_first__8_ETC___d340 =
	     (_6_MINUS_IF_adder1_fifo_output_reg_first__83_BI_ETC___d207 !=
	      3'd0 ||
	      shift_new0__h6961 != 2'd0 ||
	      !NOT_6_MINUS_IF_adder1_fifo_output_reg_first__8_ETC___d259) &&
	     (k_expo__h6964 != 7'd127 ||
	      IF_6_MINUS_IF_adder1_fifo_output_reg_first__83_ETC___d221 !=
	      3'd0 ||
	      x__h8651[3:0] != 4'd0 ||
	      truncated_frac_msb__h6966) ;
  assign NOT_6_MINUS_IF_adder1_fifo_output_reg_first__8_ETC___d344 =
	     NOT_6_MINUS_IF_adder1_fifo_output_reg_first__8_ETC___d321 ||
	     IF_6_MINUS_IF_adder1_fifo_output_reg_first__83_ETC___d221 ==
	     3'd0 &&
	     !(~k_expo__h6964[0]) ||
	     NOT_4_MINUS_IF_6_MINUS_IF_adder1_fifo_output_r_ETC___d343 ;
  assign NOT_IF_adder1_fifo_output_reg_first__83_BIT_10_ETC___d233 =
	     (!b__h7275[6] && b__h7924[6] || b__h7275[6] && !b__h7924[6]) &&
	     !IF_adder1_fifo_output_reg_first__83_BIT_10_88__ETC___d228[6] ||
	     b__h7275[6] && b__h7924[6] ;
  assign NOT_NOT_6_MINUS_IF_adder1_fifo_output_reg_firs_ETC___d272 =
	     !NOT_6_MINUS_IF_adder1_fifo_output_reg_first__8_ETC___d249 &&
	     flag_prev_truncate__h6970 &&
	     CASE_shift_new0961_0_adder1_fifo_output_regD__ETC__q6 ;
  assign SEXT_IF_IF_compute_request_put_BIT_15_66_THEN__ETC___d410 =
	     { SEXT_IF_new_inp729_BIT_6_THEN_b0089_ELSE_b00910__q11[3:0],
	       1'd0 } ;
  assign SEXT_IF_IF_compute_request_put_BIT_7_68_THEN_0_ETC___d512 =
	     { SEXT_IF_new_inp2442_BIT_6_THEN_b2790_ELSE_b2792__q9[3:0],
	       1'd0 } ;
  assign SEXT_IF_new_inp2442_BIT_6_THEN_b2790_ELSE_b2792__q9 =
	     { IF_new_inp2442_BIT_6_THEN_b2790_ELSE_b2792__q8[3],
	       IF_new_inp2442_BIT_6_THEN_b2790_ELSE_b2792__q8 } ;
  assign SEXT_IF_new_inp729_BIT_6_THEN_b0089_ELSE_b00910__q11 =
	     { IF_new_inp729_BIT_6_THEN_b0089_ELSE_b0091__q10[3],
	       IF_new_inp729_BIT_6_THEN_b0089_ELSE_b0091__q10 } ;
  assign _0_MINUS_adder1_fifo_output_regD_OUT_BITS_10_TO_7__q3 =
	     4'd0 - adder1_fifo_output_reg$D_OUT[10:7] ;
  assign _4_MINUS_IF_6_MINUS_IF_adder1_fifo_output_reg_f_ETC___d245 =
	     3'd4 -
	     IF_6_MINUS_IF_adder1_fifo_output_reg_first__83_ETC___d221 ;
  assign _4_MINUS_IF_6_MINUS_IF_adder1_fifo_output_reg_f_ETC___d284 =
	     _4_MINUS_IF_6_MINUS_IF_adder1_fifo_output_reg_f_ETC___d245 <
	     3'd2 ;
  assign _6_MINUS_IF_adder1_fifo_output_reg_first__83_BI_ETC___d207 =
	     3'd6 -
	     (adder1_fifo_output_reg$D_OUT[10] ?
		_0_MINUS_adder1_fifo_output_regD_OUT_BITS_10_TO_7__q3[2:0] :
		IF_adder1_fifo_output_reg_first__83_BIT_9_94_A_ETC___d200) ;
  assign _theResult____h6971 =
	     NOT_NOT_6_MINUS_IF_adder1_fifo_output_reg_firs_ETC___d272 &&
	     (IF_6_MINUS_IF_adder1_fifo_output_reg_first__83_ETC___d221 !=
	      3'd0 ||
	      ~k_expo__h6964[0]) &&
	     (_4_MINUS_IF_6_MINUS_IF_adder1_fifo_output_reg_f_ETC___d245 ==
	      3'd0 ||
	      _4_MINUS_IF_6_MINUS_IF_adder1_fifo_output_reg_f_ETC___d245 ==
	      3'd1 &&
	      IF_IF_6_MINUS_IF_adder1_fifo_output_reg_first__ETC___d282 ||
	      NOT_4_MINUS_IF_6_MINUS_IF_adder1_fifo_output_r_ETC___d299) ;
  assign _theResult___fst__h7956 =
	     adder1_fifo_output_reg_first__83_BIT_6_09_AND__ETC___d212 ?
	       expo_new__h8053 :
	       expo_new__h8022 ;
  assign _theResult___snd_snd__h8105 =
	     adder1_fifo_output_reg_first__83_BIT_6_09_AND__ETC___d212 ?
	       shift_new__h8052 :
	       2'd0 ;
  assign a__h7008 =
	     IF_IF_NOT_IF_adder1_fifo_output_reg_first__83__ETC___d311 +
	     { 6'd0,
	       IF_IF_NOT_IF_adder1_fifo_output_reg_first__83__ETC___d311 ==
	       7'd0 &&
	       NOT_6_MINUS_IF_adder1_fifo_output_reg_first__8_ETC___d344 } ;
  assign adder1_fifo_output_regD_OUT_BITS_5_TO_2__q5 =
	     adder1_fifo_output_reg$D_OUT[5:2] ;
  assign adder1_fifo_output_reg_first__83_BITS_5_TO_2_3_ETC___d255 =
	     adder1_fifo_output_regD_OUT_BITS_5_TO_2__q5[i__h8778] ;
  assign adder1_fifo_output_reg_first__83_BITS_9_TO_7_9_ETC___d196 =
	     adder1_fifo_output_reg$D_OUT[9:7] + 3'd1 ;
  assign adder1_fifo_output_reg_first__83_BIT_0_62_AND__ETC___d265 =
	     adder1_fifo_output_reg$D_OUT[0] & y__h8865 ;
  assign adder1_fifo_output_reg_first__83_BIT_0_62_AND__ETC___d269 =
	     adder1_fifo_output_reg_first__83_BIT_0_62_AND__ETC___d265 &
	     y__h8869 ;
  assign adder1_fifo_output_reg_first__83_BIT_6_09_AND__ETC___d212 =
	     adder1_fifo_output_reg$D_OUT[6] & mask_e__h7954 ;
  assign adder1_fifo_stage0_reg_first_BITS_28_TO_24_0_S_ETC___d11 =
	     (adder1_fifo_stage0_reg$D_OUT[28:24] ^ 5'h10) <=
	     (adder1_fifo_stage0_reg$D_OUT[14:10] ^ 5'h10) ;
  assign adder1_fifo_stage1_reg_first__1_BITS_18_TO_10__ETC___d48 =
	     adder1_fifo_stage1_reg$D_OUT[18:10] <=
	     adder1_fifo_stage1_reg$D_OUT[8:0] ;
  assign b__h10089 = { 1'd0, x__h10099 } - 4'd1 ;
  assign b__h10091 = 4'd0 - x__h11110 ;
  assign b__h12790 = { 1'd0, x__h12800 } - 4'd1 ;
  assign b__h12792 = 4'd0 - x__h13811 ;
  assign b__h1414 = f1__h1375 >> x__h1476 ;
  assign b__h7149 = x__h7165 - y__h7166 ;
  assign b__h7275 = adder1_fifo_output_reg$D_OUT[10] ? k__h7337 : k__h7382 ;
  assign b__h7924 =
	     { 6'd0, x__h7927 } <<
	     IF_6_MINUS_IF_adder1_fifo_output_reg_first__83_ETC___d221 ;
  assign b__h9137 = { 6'd0, flag_prev_truncate__h6970 } ;
  assign c__h1411 = f2__h1376 >> x__h1502 ;
  assign expo__h12449 =
	     (IF_IF_compute_request_put_BIT_7_68_THEN_0_MINU_ETC___d541 ==
	      3'd0) ?
	       3'd1 -
	       IF_IF_compute_request_put_BIT_7_68_THEN_0_MINU_ETC___d541 ==
	       3'd0 &&
	       new_inp__h12442[0] :
	       new_inp__h12442[x__h14999] ;
  assign expo__h9736 =
	     (IF_IF_compute_request_put_BIT_15_66_THEN_0_MIN_ETC___d439 ==
	      3'd0) ?
	       3'd1 -
	       IF_IF_compute_request_put_BIT_15_66_THEN_0_MIN_ETC___d439 ==
	       3'd0 &&
	       new_inp__h9729[0] :
	       new_inp__h9729[x__h12298] ;
  assign expo_new__h8022 =
	     _6_MINUS_IF_adder1_fifo_output_reg_first__83_BI_ETC___d207 ==
	     3'd0 &&
	     adder1_fifo_output_reg$D_OUT[6] ;
  assign expo_new__h8053 = x__h8056[0] & adder1_fifo_output_reg$D_OUT[6] ;
  assign f1__h1375 = { 1'd1, adder1_fifo_stage0_reg$D_OUT[23:16] } ;
  assign f2__h1376 = { 1'd1, adder1_fifo_stage0_reg$D_OUT[9:2] } ;
  assign flag_prev_truncate__h6970 =
	     (_4_MINUS_IF_6_MINUS_IF_adder1_fifo_output_reg_f_ETC___d245 ==
	      3'd0) ?
	       truncated_frac_msb__h6966 :
	       NOT_6_MINUS_IF_adder1_fifo_output_reg_first__8_ETC___d259 ;
  assign frac__h12450 = new_inp__h12442[3:0] << x__h15048 ;
  assign frac__h9737 = new_inp__h9729[3:0] << x__h12347 ;
  assign frac_shift__h1629 = { 1'd0, x__h1804 } ;
  assign frac_shift__h1636 = { 1'd0, x__h3258 } ;
  assign frac_shift__h1641 = { 1'd0, x__h4702 } ;
  assign frac_sign__h1628 =
	     { 1'd0, adder1_fifo_stage1_reg$D_OUT[18:10] } +
	     { 1'd0, adder1_fifo_stage1_reg$D_OUT[8:0] } ;
  assign frac_sign__h1635 =
	     { 1'd0, adder1_fifo_stage1_reg$D_OUT[18:10] } -
	     { 1'd0, adder1_fifo_stage1_reg$D_OUT[8:0] } ;
  assign frac_sign__h1640 =
	     { 1'd0, adder1_fifo_stage1_reg$D_OUT[8:0] } -
	     { 1'd0, adder1_fifo_stage1_reg$D_OUT[18:10] } ;
  assign i1__h8875 = shift_new0__h6961 - 2'd2 ;
  assign i__h8778 = shift_new0__h6961 - 2'd1 ;
  assign k__h7337 = 7'd1 << x__h7380 ;
  assign k__h7382 = ~x__h7394 ;
  assign k_expo__h6964 =
	     NOT_IF_adder1_fifo_output_reg_first__83_BIT_10_ETC___d233 ?
	       7'd127 :
	       IF_adder1_fifo_output_reg_first__83_BIT_10_88__ETC___d228 ;
  assign mask_e__h7954 =
	     3'd1 -
	     _6_MINUS_IF_adder1_fifo_output_reg_first__83_BI_ETC___d207 ==
	     3'd0 ;
  assign new_inp__h12442 =
	     compute_request_put[7] ?
	       7'd0 - compute_request_put[6:0] :
	       compute_request_put[6:0] ;
  assign new_inp__h9729 =
	     compute_request_put[15] ?
	       7'd0 - compute_request_put[14:8] :
	       compute_request_put[14:8] ;
  assign shift_new0__h6961 =
	     (_6_MINUS_IF_adder1_fifo_output_reg_first__83_BI_ETC___d207 ==
	      3'd0) ?
	       _theResult___snd_snd__h8105 :
	       2'd0 ;
  assign shift_new__h8052 = { 1'd0, x__h8670 } ;
  assign stage0_regf_zero_flag__h6762 =
	     (extracter1_fifo_output_reg$D_OUT[11:10] == 2'd2) ?
	       2'b01 :
	       ((extracter2_fifo_output_reg$D_OUT[11:10] == 2'd2) ?
		  extracter2_fifo_output_reg$D_OUT[11:10] :
		  2'b0) ;
  assign truncated_frac_msb__h6966 =
	     (shift_new0__h6961 == 2'd0) ?
	       adder1_fifo_output_reg$D_OUT[1] :
	       adder1_fifo_output_reg_first__83_BITS_5_TO_2_3_ETC___d255 ;
  assign x651_BITS_3_TO_0__q4 = x__h8651[3:0] ;
  assign x__h10099 =
	     INV_new_inp729__q1[6] ?
	       3'd0 :
	       (INV_new_inp729__q1[5] ?
		  3'd1 :
		  (INV_new_inp729__q1[4] ?
		     3'd2 :
		     (INV_new_inp729__q1[3] ?
			3'd3 :
			(INV_new_inp729__q1[2] ?
			   3'd4 :
			   (INV_new_inp729__q1[1] ?
			      3'd5 :
			      (INV_new_inp729__q1[0] ? 3'd6 : 3'd7)))))) ;
  assign x__h11110 = { 1'd0, x__h11117 } ;
  assign x__h11117 =
	     new_inp__h9729[6] ?
	       3'd0 :
	       (new_inp__h9729[5] ?
		  3'd1 :
		  (new_inp__h9729[4] ?
		     3'd2 :
		     (new_inp__h9729[3] ?
			3'd3 :
			(new_inp__h9729[2] ?
			   3'd4 :
			   (new_inp__h9729[1] ?
			      3'd5 :
			      (new_inp__h9729[0] ? 3'd6 : 3'd7)))))) ;
  assign x__h12298 =
	     IF_IF_compute_request_put_BIT_15_66_THEN_0_MIN_ETC___d439 -
	     3'd1 ;
  assign x__h12800 =
	     INV_new_inp2442__q2[6] ?
	       3'd0 :
	       (INV_new_inp2442__q2[5] ?
		  3'd1 :
		  (INV_new_inp2442__q2[4] ?
		     3'd2 :
		     (INV_new_inp2442__q2[3] ?
			3'd3 :
			(INV_new_inp2442__q2[2] ?
			   3'd4 :
			   (INV_new_inp2442__q2[1] ?
			      3'd5 :
			      (INV_new_inp2442__q2[0] ? 3'd6 : 3'd7)))))) ;
  assign x__h13811 = { 1'd0, x__h13818 } ;
  assign x__h13818 =
	     new_inp__h12442[6] ?
	       3'd0 :
	       (new_inp__h12442[5] ?
		  3'd1 :
		  (new_inp__h12442[4] ?
		     3'd2 :
		     (new_inp__h12442[3] ?
			3'd3 :
			(new_inp__h12442[2] ?
			   3'd4 :
			   (new_inp__h12442[1] ?
			      3'd5 :
			      (new_inp__h12442[0] ? 3'd6 : 3'd7)))))) ;
  assign x__h1428 =
	     (adder1_fifo_stage0_reg$D_OUT[1:0] == 2'b01) ?
	       9'd0 :
	       IF_adder1_fifo_stage0_reg_first_BITS_1_TO_0_EQ_ETC___d23 ;
  assign x__h1476 =
	     adder1_fifo_stage0_reg$D_OUT[14:10] -
	     adder1_fifo_stage0_reg$D_OUT[28:24] ;
  assign x__h14999 =
	     IF_IF_compute_request_put_BIT_7_68_THEN_0_MINU_ETC___d541 -
	     3'd1 ;
  assign x__h1502 =
	     adder1_fifo_stage0_reg$D_OUT[28:24] -
	     adder1_fifo_stage0_reg$D_OUT[14:10] ;
  assign x__h1565 =
	     (~x__h1598 ||
	      !adder1_fifo_stage1_reg_first__1_BITS_18_TO_10__ETC___d48) ?
	       adder1_fifo_stage1_reg$D_OUT[19] :
	       adder1_fifo_stage1_reg$D_OUT[9] ;
  assign x__h1598 =
	     adder1_fifo_stage1_reg$D_OUT[19] ^
	     adder1_fifo_stage1_reg$D_OUT[9] ;
  assign x__h1756 = frac_sign__h1628 >> y__h1767 ;
  assign x__h1804 =
	     frac_sign__h1628[9] ?
	       4'd0 :
	       (frac_sign__h1628[8] ?
		  4'd1 :
		  (frac_sign__h1628[7] ?
		     4'd2 :
		     (frac_sign__h1628[6] ?
			4'd3 :
			(frac_sign__h1628[5] ?
			   4'd4 :
			   (frac_sign__h1628[4] ?
			      4'd5 :
			      (frac_sign__h1628[3] ?
				 4'd6 :
				 (frac_sign__h1628[2] ?
				    4'd7 :
				    (frac_sign__h1628[1] ?
				       4'd8 :
				       (frac_sign__h1628[0] ?
					  4'd9 :
					  4'd10))))))))) ;
  assign x__h3244 = frac_sign__h1635 << y__h3245 ;
  assign x__h3258 =
	     frac_sign__h1635[9] ?
	       4'd0 :
	       (frac_sign__h1635[8] ?
		  4'd1 :
		  (frac_sign__h1635[7] ?
		     4'd2 :
		     (frac_sign__h1635[6] ?
			4'd3 :
			(frac_sign__h1635[5] ?
			   4'd4 :
			   (frac_sign__h1635[4] ?
			      4'd5 :
			      (frac_sign__h1635[3] ?
				 4'd6 :
				 (frac_sign__h1635[2] ?
				    4'd7 :
				    (frac_sign__h1635[1] ?
				       4'd8 :
				       (frac_sign__h1635[0] ?
					  4'd9 :
					  4'd10))))))))) ;
  assign x__h4688 = frac_sign__h1640 << y__h4689 ;
  assign x__h4702 =
	     frac_sign__h1640[9] ?
	       4'd0 :
	       (frac_sign__h1640[8] ?
		  4'd1 :
		  (frac_sign__h1640[7] ?
		     4'd2 :
		     (frac_sign__h1640[6] ?
			4'd3 :
			(frac_sign__h1640[5] ?
			   4'd4 :
			   (frac_sign__h1640[4] ?
			      4'd5 :
			      (frac_sign__h1640[3] ?
				 4'd6 :
				 (frac_sign__h1640[2] ?
				    4'd7 :
				    (frac_sign__h1640[1] ?
				       4'd8 :
				       (frac_sign__h1640[0] ?
					  4'd9 :
					  4'd10))))))))) ;
  assign x__h6205 =
	     IF_INV_adder1_fifo_stage1_reg_first__1_BIT_19__ETC___d130[2:0] ==
	     3'd0 ;
  assign x__h6753 =
	     extracter1_fifo_output_reg$D_OUT[11:10] == 2'd1 &&
	     extracter2_fifo_output_reg$D_OUT[11:10] == 2'd1 ;
  assign x__h6844 = { extracter1_fifo_output_reg$D_OUT[3:0], 4'd0 } ;
  assign x__h6860 = { extracter2_fifo_output_reg$D_OUT[3:0], 4'd0 } ;
  assign x__h7165 = k_expo__h6964 + y__h7167 ;
  assign x__h7380 =
	     3'd6 -
	     _0_MINUS_adder1_fifo_output_regD_OUT_BITS_10_TO_7__q3[2:0] ;
  assign x__h7394 =
	     7'd127 >>
	     IF_adder1_fifo_output_reg_first__83_BIT_9_94_A_ETC___d200 ;
  assign x__h7927 =
	     (_6_MINUS_IF_adder1_fifo_output_reg_first__83_BI_ETC___d207 ==
	      3'd0) ?
	       _theResult___fst__h7956 :
	       adder1_fifo_output_reg$D_OUT[6] ;
  assign x__h8056 =
	     2'd1 <<
	     _6_MINUS_IF_adder1_fifo_output_reg_first__83_BI_ETC___d207 ;
  assign x__h8651 =
	     { _6_MINUS_IF_adder1_fifo_output_reg_first__83_BI_ETC___d207 !=
	       3'd0,
	       adder1_fifo_output_reg$D_OUT[5:2] } >>
	     shift_new0__h6961 ;
  assign x__h8670 = 1'd0 - adder1_fifo_output_reg$D_OUT[6] ;
  assign x__h8825 =
	     _4_MINUS_IF_6_MINUS_IF_adder1_fifo_output_reg_f_ETC___d245 -
	     3'd1 ;
  assign x__h8985 =
	     _4_MINUS_IF_6_MINUS_IF_adder1_fifo_output_reg_f_ETC___d245 -
	     3'd2 ;
  assign y__h1767 = 5'd1 - frac_shift__h1629 ;
  assign y__h3245 = frac_shift__h1636 - 5'd1 ;
  assign y__h4689 = frac_shift__h1641 - 5'd1 ;
  assign y__h7166 = { 6'd0, _theResult____h6971 } ;
  assign y__h7167 =
	     { 3'd0, x__h8651[3:0] } >>
	     _4_MINUS_IF_6_MINUS_IF_adder1_fifo_output_reg_f_ETC___d245 ;
  assign y__h8865 = ~adder1_fifo_output_reg$D_OUT[1] ;
  assign y__h8869 =
	     { 28'd0,
	       (adder1_fifo_output_reg$D_OUT[5:2] & ~(4'hE << i1__h8875)) >>
	       0 } ==
	     32'd0 ;
  always@(adder1_fifo_stage0_reg$D_OUT or
	  adder1_fifo_stage0_reg_first_BITS_28_TO_24_0_S_ETC___d11 or
	  f2__h1376 or c__h1411)
  begin
    case (adder1_fifo_stage0_reg$D_OUT[1:0])
      2'b01: x__h1485 = f2__h1376;
      2'b10: x__h1485 = 9'd0;
      default: x__h1485 =
		   adder1_fifo_stage0_reg_first_BITS_28_TO_24_0_S_ETC___d11 ?
		     f2__h1376 :
		     c__h1411;
    endcase
  end
  always@(shift_new0__h6961 or
	  adder1_fifo_output_reg_first__83_BIT_0_62_AND__ETC___d269 or
	  adder1_fifo_output_reg$D_OUT or
	  adder1_fifo_output_reg_first__83_BIT_0_62_AND__ETC___d265)
  begin
    case (shift_new0__h6961)
      2'd0:
	  CASE_shift_new0961_0_adder1_fifo_output_regD__ETC__q6 =
	      adder1_fifo_output_reg$D_OUT[0];
      2'd1:
	  CASE_shift_new0961_0_adder1_fifo_output_regD__ETC__q6 =
	      adder1_fifo_output_reg_first__83_BIT_0_62_AND__ETC___d265;
      default: CASE_shift_new0961_0_adder1_fifo_output_regD__ETC__q6 =
		   adder1_fifo_output_reg_first__83_BIT_0_62_AND__ETC___d269;
    endcase
  end
  always@(shift_new0__h6961 or
	  adder1_fifo_output_reg_first__83_BIT_0_62_AND__ETC___d269 or
	  adder1_fifo_output_reg$D_OUT or
	  adder1_fifo_output_reg_first__83_BIT_0_62_AND__ETC___d265)
  begin
    case (shift_new0__h6961)
      2'd0:
	  CASE_shift_new0961_0_NOT_adder1_fifo_output_re_ETC__q7 =
	      !adder1_fifo_output_reg$D_OUT[0];
      2'd1:
	  CASE_shift_new0961_0_NOT_adder1_fifo_output_re_ETC__q7 =
	      !adder1_fifo_output_reg_first__83_BIT_0_62_AND__ETC___d265;
      default: CASE_shift_new0961_0_NOT_adder1_fifo_output_re_ETC__q7 =
		   !adder1_fifo_output_reg_first__83_BIT_0_62_AND__ETC___d269;
    endcase
  end
  always@(adder1_fifo_output_reg$D_OUT or a__h7008)
  begin
    case (adder1_fifo_output_reg$D_OUT[13:12])
      2'd0:
	  output_regf_out_posit__h6985 =
	      { adder1_fifo_output_reg$D_OUT[14],
		adder1_fifo_output_reg$D_OUT[14] ?
		  7'd0 - a__h7008 :
		  a__h7008 };
      2'd1: output_regf_out_posit__h6985 = 8'd128;
      default: output_regf_out_posit__h6985 = 8'd0;
    endcase
  end
  always@(IF_IF_compute_request_put_BIT_15_66_THEN_0_MIN_ETC___d439)
  begin
    case (IF_IF_compute_request_put_BIT_15_66_THEN_0_MIN_ETC___d439)
      3'd2: x__h12347 = 4'd3;
      3'd3: x__h12347 = 4'd2;
      3'd4: x__h12347 = 4'd1;
      3'd5: x__h12347 = 4'd0;
      default: x__h12347 =
		   (IF_IF_compute_request_put_BIT_15_66_THEN_0_MIN_ETC___d439 <=
		    3'd1) ?
		     4'd4 :
		     4'd0;
    endcase
  end
  always@(IF_IF_compute_request_put_BIT_7_68_THEN_0_MINU_ETC___d541)
  begin
    case (IF_IF_compute_request_put_BIT_7_68_THEN_0_MINU_ETC___d541)
      3'd2: x__h15048 = 4'd3;
      3'd3: x__h15048 = 4'd2;
      3'd4: x__h15048 = 4'd1;
      3'd5: x__h15048 = 4'd0;
      default: x__h15048 =
		   (IF_IF_compute_request_put_BIT_7_68_THEN_0_MINU_ETC___d541 <=
		    3'd1) ?
		     4'd4 :
		     4'd0;
    endcase
  end
endmodule  // mkPNE_test

