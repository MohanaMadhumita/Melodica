//
// Generated by Bluespec Compiler (build 16071ee)
//
// On Wed Sep 16 14:08:05 IST 2020
//
//
// Ports:
// Name                         I/O  size props
// RDY_compute_request_put        O     1 reg
// compute_response_get           O    12 reg
// RDY_compute_response_get       O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// compute_request_put            I    32
// EN_compute_request_put         I     1
// EN_compute_response_get        I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPNE_test(CLK,
		  RST_N,

		  compute_request_put,
		  EN_compute_request_put,
		  RDY_compute_request_put,

		  EN_compute_response_get,
		  compute_response_get,
		  RDY_compute_response_get);
  input  CLK;
  input  RST_N;

  // action method compute_request_put
  input  [31 : 0] compute_request_put;
  input  EN_compute_request_put;
  output RDY_compute_request_put;

  // actionvalue method compute_response_get
  input  EN_compute_response_get;
  output [11 : 0] compute_response_get;
  output RDY_compute_response_get;

  // signals for module outputs
  wire [11 : 0] compute_response_get;
  wire RDY_compute_request_put, RDY_compute_response_get;

  // ports of submodule ffO
  wire [11 : 0] ffO$D_IN, ffO$D_OUT;
  wire ffO$CLR, ffO$DEQ, ffO$EMPTY_N, ffO$ENQ, ffO$FULL_N;

  // ports of submodule normalizer_fifo_output_reg
  wire [11 : 0] normalizer_fifo_output_reg$D_IN,
		normalizer_fifo_output_reg$D_OUT;
  wire normalizer_fifo_output_reg$CLR,
       normalizer_fifo_output_reg$DEQ,
       normalizer_fifo_output_reg$EMPTY_N,
       normalizer_fifo_output_reg$ENQ,
       normalizer_fifo_output_reg$FULL_N;

  // ports of submodule normalizer_fifo_stage0_reg
  wire [17 : 0] normalizer_fifo_stage0_reg$D_IN;
  wire normalizer_fifo_stage0_reg$CLR,
       normalizer_fifo_stage0_reg$DEQ,
       normalizer_fifo_stage0_reg$ENQ;

  // ports of submodule normalizer_fifo_stage1_reg
  wire [20 : 0] normalizer_fifo_stage1_reg$D_IN;
  wire normalizer_fifo_stage1_reg$CLR,
       normalizer_fifo_stage1_reg$DEQ,
       normalizer_fifo_stage1_reg$ENQ;

  // ports of submodule normalizer_fifo_stage2_reg
  wire [11 : 0] normalizer_fifo_stage2_reg$D_IN;
  wire normalizer_fifo_stage2_reg$CLR,
       normalizer_fifo_stage2_reg$DEQ,
       normalizer_fifo_stage2_reg$ENQ;

  // ports of submodule quireToPosit1_fifo_output_reg
  wire [14 : 0] quireToPosit1_fifo_output_reg$D_IN,
		quireToPosit1_fifo_output_reg$D_OUT;
  wire quireToPosit1_fifo_output_reg$CLR,
       quireToPosit1_fifo_output_reg$DEQ,
       quireToPosit1_fifo_output_reg$EMPTY_N,
       quireToPosit1_fifo_output_reg$ENQ,
       quireToPosit1_fifo_output_reg$FULL_N;

  // ports of submodule quireToPosit1_fifo_stage0_reg
  wire [39 : 0] quireToPosit1_fifo_stage0_reg$D_IN,
		quireToPosit1_fifo_stage0_reg$D_OUT;
  wire quireToPosit1_fifo_stage0_reg$CLR,
       quireToPosit1_fifo_stage0_reg$DEQ,
       quireToPosit1_fifo_stage0_reg$EMPTY_N,
       quireToPosit1_fifo_stage0_reg$ENQ,
       quireToPosit1_fifo_stage0_reg$FULL_N;

  // ports of submodule quireToPosit1_fifo_stage1_reg
  wire [14 : 0] quireToPosit1_fifo_stage1_reg$D_IN,
		quireToPosit1_fifo_stage1_reg$D_OUT;
  wire quireToPosit1_fifo_stage1_reg$CLR,
       quireToPosit1_fifo_stage1_reg$DEQ,
       quireToPosit1_fifo_stage1_reg$EMPTY_N,
       quireToPosit1_fifo_stage1_reg$ENQ,
       quireToPosit1_fifo_stage1_reg$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_quireToPosit1_stage_1,
       CAN_FIRE_RL_quireToPosit1_stage_2,
       CAN_FIRE_RL_rl_connect,
       CAN_FIRE_RL_rl_out,
       CAN_FIRE_compute_request_put,
       CAN_FIRE_compute_response_get,
       WILL_FIRE_RL_quireToPosit1_stage_1,
       WILL_FIRE_RL_quireToPosit1_stage_2,
       WILL_FIRE_RL_rl_connect,
       WILL_FIRE_RL_rl_out,
       WILL_FIRE_compute_request_put,
       WILL_FIRE_compute_response_get;

  // remaining internal signals
  reg [7 : 0] output_regf_out_posit__h1366;
  reg CASE_shift_new0342_0_NOT_quireToPosit1_fifo_ou_ETC__q6,
      CASE_shift_new0342_0_quireToPosit1_fifo_output_ETC__q5;
  wire [36 : 0] compute_request_put_BIT_31_24_AND_compute_requ_ETC___d307;
  wire [30 : 0] IF_compute_request_put_BIT_31_24_THEN_0_MINUS__ETC___d232,
		carry_int_frac_shifted__h603;
  wire [6 : 0] IF_IF_NOT_IF_quireToPosit1_fifo_output_reg_fir_ETC___d171,
	       IF_NOT_IF_quireToPosit1_fifo_output_reg_first__ETC___d167,
	       IF_quireToPosit1_fifo_output_reg_first__3_BIT__ETC___d88,
	       a__h1382,
	       b__h1523,
	       b__h1649,
	       b__h2296,
	       b__h3512,
	       k__h1709,
	       k__h1754,
	       k_expo__h1345,
	       x__h1539,
	       x__h1766,
	       y__h1540,
	       y__h1541;
  wire [5 : 0] IF_0_CONCAT_IF_IF_compute_request_put_BIT_31_2_ETC___d301,
	       _0_CONCAT_IF_IF_compute_request_put_BIT_31_24_T_ETC___d296,
	       _19_MINUS_0_CONCAT_IF_IF_compute_request_put_BI_ETC___d298,
	       x__h691;
  wire [4 : 0] IF_quireToPosit1_fifo_stage0_reg_first_BITS_35_ETC___d14,
	       msbZeros__h4091,
	       quireToPosit1_fifo_stage0_regD_OUT_BITS_35_TO_31__q2,
	       x__h3023;
  wire [3 : 0] _0_MINUS_quireToPosit1_fifo_output_regD_OUT_BI_ETC__q1,
	       quireToPosit1_fifo_output_regD_OUT_BITS_5_TO_2__q4,
	       stage1_regf_frac__h478,
	       x023_BITS_3_TO_0__q3;
  wire [2 : 0] IF_6_MINUS_IF_quireToPosit1_fifo_output_reg_fi_ETC___d81,
	       IF_quireToPosit1_fifo_output_reg_first__3_BIT__ETC___d60,
	       _4_MINUS_IF_6_MINUS_IF_quireToPosit1_fifo_outpu_ETC___d105,
	       _6_MINUS_IF_quireToPosit1_fifo_output_reg_first_ETC___d67,
	       quireToPosit1_fifo_output_reg_first__3_BITS_9__ETC___d56,
	       x__h1752,
	       x__h3199,
	       x__h3360;
  wire [1 : 0] _theResult___snd_snd__h2477,
	       i1__h3250,
	       i__h3152,
	       shift_new0__h1342,
	       shift_new__h2424,
	       x__h2428;
  wire IF_IF_6_MINUS_IF_quireToPosit1_fifo_output_reg_ETC___d142,
       NOT_4_MINUS_IF_6_MINUS_IF_quireToPosit1_fifo_o_ETC___d159,
       NOT_4_MINUS_IF_6_MINUS_IF_quireToPosit1_fifo_o_ETC___d203,
       NOT_6_MINUS_IF_quireToPosit1_fifo_output_reg_f_ETC___d109,
       NOT_6_MINUS_IF_quireToPosit1_fifo_output_reg_f_ETC___d119,
       NOT_6_MINUS_IF_quireToPosit1_fifo_output_reg_f_ETC___d175,
       NOT_6_MINUS_IF_quireToPosit1_fifo_output_reg_f_ETC___d181,
       NOT_6_MINUS_IF_quireToPosit1_fifo_output_reg_f_ETC___d200,
       NOT_6_MINUS_IF_quireToPosit1_fifo_output_reg_f_ETC___d204,
       NOT_IF_quireToPosit1_fifo_output_reg_first__3__ETC___d93,
       NOT_NOT_6_MINUS_IF_quireToPosit1_fifo_output_r_ETC___d132,
       _4_MINUS_IF_6_MINUS_IF_quireToPosit1_fifo_outpu_ETC___d144,
       _theResult____h1352,
       _theResult___fst__h2328,
       expo_new__h2394,
       expo_new__h2425,
       flag_prev_truncate__h1351,
       mask_e__h2326,
       quireToPosit1_fifo_output_reg_first__3_BITS_5__ETC___d115,
       quireToPosit1_fifo_output_reg_first__3_BIT_0_2_ETC___d125,
       quireToPosit1_fifo_output_reg_first__3_BIT_0_2_ETC___d129,
       quireToPosit1_fifo_output_reg_first__3_BIT_6_9_ETC___d72,
       quireToPosit1_fifo_stage0_reg_first_BITS_35_TO_ETC___d7,
       truncated_frac_msb__h1347,
       x__h2299,
       x__h3043,
       x__h4402,
       x__h708,
       x__h756,
       y__h3240,
       y__h3244;

  // action method compute_request_put
  assign RDY_compute_request_put = quireToPosit1_fifo_stage0_reg$FULL_N ;
  assign CAN_FIRE_compute_request_put = quireToPosit1_fifo_stage0_reg$FULL_N ;
  assign WILL_FIRE_compute_request_put = EN_compute_request_put ;

  // actionvalue method compute_response_get
  assign compute_response_get = ffO$D_OUT ;
  assign RDY_compute_response_get = ffO$EMPTY_N ;
  assign CAN_FIRE_compute_response_get = ffO$EMPTY_N ;
  assign WILL_FIRE_compute_response_get = EN_compute_response_get ;

  // submodule ffO
  FIFO2 #(.width(32'd12), .guarded(32'd1)) ffO(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(ffO$D_IN),
					       .ENQ(ffO$ENQ),
					       .DEQ(ffO$DEQ),
					       .CLR(ffO$CLR),
					       .D_OUT(ffO$D_OUT),
					       .FULL_N(ffO$FULL_N),
					       .EMPTY_N(ffO$EMPTY_N));

  // submodule normalizer_fifo_output_reg
  FIFO2 #(.width(32'd12),
	  .guarded(32'd1)) normalizer_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_output_reg$D_IN),
						      .ENQ(normalizer_fifo_output_reg$ENQ),
						      .DEQ(normalizer_fifo_output_reg$DEQ),
						      .CLR(normalizer_fifo_output_reg$CLR),
						      .D_OUT(normalizer_fifo_output_reg$D_OUT),
						      .FULL_N(normalizer_fifo_output_reg$FULL_N),
						      .EMPTY_N(normalizer_fifo_output_reg$EMPTY_N));

  // submodule normalizer_fifo_stage0_reg
  FIFO2 #(.width(32'd18),
	  .guarded(32'd1)) normalizer_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_stage0_reg$D_IN),
						      .ENQ(normalizer_fifo_stage0_reg$ENQ),
						      .DEQ(normalizer_fifo_stage0_reg$DEQ),
						      .CLR(normalizer_fifo_stage0_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule normalizer_fifo_stage1_reg
  FIFO2 #(.width(32'd21),
	  .guarded(32'd1)) normalizer_fifo_stage1_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_stage1_reg$D_IN),
						      .ENQ(normalizer_fifo_stage1_reg$ENQ),
						      .DEQ(normalizer_fifo_stage1_reg$DEQ),
						      .CLR(normalizer_fifo_stage1_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule normalizer_fifo_stage2_reg
  FIFO2 #(.width(32'd12),
	  .guarded(32'd1)) normalizer_fifo_stage2_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_stage2_reg$D_IN),
						      .ENQ(normalizer_fifo_stage2_reg$ENQ),
						      .DEQ(normalizer_fifo_stage2_reg$DEQ),
						      .CLR(normalizer_fifo_stage2_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule quireToPosit1_fifo_output_reg
  FIFO2 #(.width(32'd15),
	  .guarded(32'd1)) quireToPosit1_fifo_output_reg(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(quireToPosit1_fifo_output_reg$D_IN),
							 .ENQ(quireToPosit1_fifo_output_reg$ENQ),
							 .DEQ(quireToPosit1_fifo_output_reg$DEQ),
							 .CLR(quireToPosit1_fifo_output_reg$CLR),
							 .D_OUT(quireToPosit1_fifo_output_reg$D_OUT),
							 .FULL_N(quireToPosit1_fifo_output_reg$FULL_N),
							 .EMPTY_N(quireToPosit1_fifo_output_reg$EMPTY_N));

  // submodule quireToPosit1_fifo_stage0_reg
  FIFO2 #(.width(32'd40),
	  .guarded(32'd1)) quireToPosit1_fifo_stage0_reg(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(quireToPosit1_fifo_stage0_reg$D_IN),
							 .ENQ(quireToPosit1_fifo_stage0_reg$ENQ),
							 .DEQ(quireToPosit1_fifo_stage0_reg$DEQ),
							 .CLR(quireToPosit1_fifo_stage0_reg$CLR),
							 .D_OUT(quireToPosit1_fifo_stage0_reg$D_OUT),
							 .FULL_N(quireToPosit1_fifo_stage0_reg$FULL_N),
							 .EMPTY_N(quireToPosit1_fifo_stage0_reg$EMPTY_N));

  // submodule quireToPosit1_fifo_stage1_reg
  FIFO2 #(.width(32'd15),
	  .guarded(32'd1)) quireToPosit1_fifo_stage1_reg(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(quireToPosit1_fifo_stage1_reg$D_IN),
							 .ENQ(quireToPosit1_fifo_stage1_reg$ENQ),
							 .DEQ(quireToPosit1_fifo_stage1_reg$DEQ),
							 .CLR(quireToPosit1_fifo_stage1_reg$CLR),
							 .D_OUT(quireToPosit1_fifo_stage1_reg$D_OUT),
							 .FULL_N(quireToPosit1_fifo_stage1_reg$FULL_N),
							 .EMPTY_N(quireToPosit1_fifo_stage1_reg$EMPTY_N));

  // rule RL_rl_connect
  assign CAN_FIRE_RL_rl_connect =
	     quireToPosit1_fifo_output_reg$EMPTY_N &&
	     normalizer_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_rl_connect = CAN_FIRE_RL_rl_connect ;

  // rule RL_rl_out
  assign CAN_FIRE_RL_rl_out =
	     normalizer_fifo_output_reg$EMPTY_N && ffO$FULL_N ;
  assign WILL_FIRE_RL_rl_out = CAN_FIRE_RL_rl_out ;

  // rule RL_quireToPosit1_stage_1
  assign CAN_FIRE_RL_quireToPosit1_stage_1 =
	     quireToPosit1_fifo_stage0_reg$EMPTY_N &&
	     quireToPosit1_fifo_stage1_reg$FULL_N ;
  assign WILL_FIRE_RL_quireToPosit1_stage_1 =
	     CAN_FIRE_RL_quireToPosit1_stage_1 ;

  // rule RL_quireToPosit1_stage_2
  assign CAN_FIRE_RL_quireToPosit1_stage_2 =
	     quireToPosit1_fifo_stage1_reg$EMPTY_N &&
	     quireToPosit1_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_quireToPosit1_stage_2 =
	     CAN_FIRE_RL_quireToPosit1_stage_2 ;

  // submodule ffO
  assign ffO$D_IN = normalizer_fifo_output_reg$D_OUT ;
  assign ffO$ENQ = CAN_FIRE_RL_rl_out ;
  assign ffO$DEQ = EN_compute_response_get ;
  assign ffO$CLR = 1'b0 ;

  // submodule normalizer_fifo_output_reg
  assign normalizer_fifo_output_reg$D_IN =
	     { quireToPosit1_fifo_output_reg$D_OUT[11],
	       output_regf_out_posit__h1366,
	       quireToPosit1_fifo_output_reg$D_OUT[13:12],
	       flag_prev_truncate__h1351 - _theResult____h1352 ||
	       a__h1382 == 7'd0 &&
	       NOT_6_MINUS_IF_quireToPosit1_fifo_output_reg_f_ETC___d204 } ;
  assign normalizer_fifo_output_reg$ENQ = CAN_FIRE_RL_rl_connect ;
  assign normalizer_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_out ;
  assign normalizer_fifo_output_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_stage0_reg
  assign normalizer_fifo_stage0_reg$D_IN = 18'h0 ;
  assign normalizer_fifo_stage0_reg$ENQ = 1'b0 ;
  assign normalizer_fifo_stage0_reg$DEQ = 1'b0 ;
  assign normalizer_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_stage1_reg
  assign normalizer_fifo_stage1_reg$D_IN = 21'h0 ;
  assign normalizer_fifo_stage1_reg$ENQ = 1'b0 ;
  assign normalizer_fifo_stage1_reg$DEQ = 1'b0 ;
  assign normalizer_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_stage2_reg
  assign normalizer_fifo_stage2_reg$D_IN = 12'h0 ;
  assign normalizer_fifo_stage2_reg$ENQ = 1'b0 ;
  assign normalizer_fifo_stage2_reg$DEQ = 1'b0 ;
  assign normalizer_fifo_stage2_reg$CLR = 1'b0 ;

  // submodule quireToPosit1_fifo_output_reg
  assign quireToPosit1_fifo_output_reg$D_IN =
	     quireToPosit1_fifo_stage1_reg$D_OUT ;
  assign quireToPosit1_fifo_output_reg$ENQ =
	     CAN_FIRE_RL_quireToPosit1_stage_2 ;
  assign quireToPosit1_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_connect ;
  assign quireToPosit1_fifo_output_reg$CLR = 1'b0 ;

  // submodule quireToPosit1_fifo_stage0_reg
  assign quireToPosit1_fifo_stage0_reg$D_IN =
	     { compute_request_put[31],
	       (!compute_request_put[31] &&
		compute_request_put[30:0] == 31'd0) ?
		 2'd2 :
		 2'd0,
	       compute_request_put_BIT_31_24_AND_compute_requ_ETC___d307 } ;
  assign quireToPosit1_fifo_stage0_reg$ENQ = EN_compute_request_put ;
  assign quireToPosit1_fifo_stage0_reg$DEQ =
	     CAN_FIRE_RL_quireToPosit1_stage_1 ;
  assign quireToPosit1_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule quireToPosit1_fifo_stage1_reg
  assign quireToPosit1_fifo_stage1_reg$D_IN =
	     { quireToPosit1_fifo_stage0_reg$D_OUT[39:31],
	       stage1_regf_frac__h478,
	       x__h708,
	       x__h756 } ;
  assign quireToPosit1_fifo_stage1_reg$ENQ =
	     CAN_FIRE_RL_quireToPosit1_stage_1 ;
  assign quireToPosit1_fifo_stage1_reg$DEQ =
	     CAN_FIRE_RL_quireToPosit1_stage_2 ;
  assign quireToPosit1_fifo_stage1_reg$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_0_CONCAT_IF_IF_compute_request_put_BIT_31_2_ETC___d301 =
	     (_0_CONCAT_IF_IF_compute_request_put_BIT_31_24_T_ETC___d296[5] &&
	      _19_MINUS_0_CONCAT_IF_IF_compute_request_put_BI_ETC___d298[5]) ?
	       6'd31 :
	       _19_MINUS_0_CONCAT_IF_IF_compute_request_put_BI_ETC___d298 ;
  assign IF_6_MINUS_IF_quireToPosit1_fifo_output_reg_fi_ETC___d81 =
	     (_6_MINUS_IF_quireToPosit1_fifo_output_reg_first_ETC___d67 ==
	      3'd0) ?
	       _6_MINUS_IF_quireToPosit1_fifo_output_reg_first_ETC___d67 :
	       _6_MINUS_IF_quireToPosit1_fifo_output_reg_first_ETC___d67 -
	       3'd1 ;
  assign IF_IF_6_MINUS_IF_quireToPosit1_fifo_output_reg_ETC___d142 =
	     (shift_new0__h1342 == 2'd0) ?
	       !quireToPosit1_fifo_output_reg$D_OUT[1] :
	       !quireToPosit1_fifo_output_reg_first__3_BITS_5__ETC___d115 ;
  assign IF_IF_NOT_IF_quireToPosit1_fifo_output_reg_fir_ETC___d171 =
	     (b__h1523[6] &&
	      !IF_NOT_IF_quireToPosit1_fifo_output_reg_first__ETC___d167[6]) ?
	       7'd127 :
	       IF_NOT_IF_quireToPosit1_fifo_output_reg_first__ETC___d167 ;
  assign IF_NOT_IF_quireToPosit1_fifo_output_reg_first__ETC___d167 =
	     b__h1523 + b__h3512 ;
  assign IF_compute_request_put_BIT_31_24_THEN_0_MINUS__ETC___d232 =
	     compute_request_put[31] ?
	       31'd0 - compute_request_put[30:0] :
	       compute_request_put[30:0] ;
  assign IF_quireToPosit1_fifo_output_reg_first__3_BIT__ETC___d60 =
	     (quireToPosit1_fifo_output_reg$D_OUT[9] &&
	      !quireToPosit1_fifo_output_reg_first__3_BITS_9__ETC___d56[2]) ?
	       3'd7 :
	       quireToPosit1_fifo_output_reg_first__3_BITS_9__ETC___d56 ;
  assign IF_quireToPosit1_fifo_output_reg_first__3_BIT__ETC___d88 =
	     b__h1649 + b__h2296 ;
  assign IF_quireToPosit1_fifo_stage0_reg_first_BITS_35_ETC___d14 =
	     quireToPosit1_fifo_stage0_reg_first_BITS_35_TO_ETC___d7 ?
	       carry_int_frac_shifted__h603[30:26] :
	       5'd31 ;
  assign NOT_4_MINUS_IF_6_MINUS_IF_quireToPosit1_fifo_o_ETC___d159 =
	     !_4_MINUS_IF_6_MINUS_IF_quireToPosit1_fifo_outpu_ETC___d144 &&
	     { 28'd0, (x__h3023[3:0] & ~(4'hE << x__h3360[1:0])) >> 0 } ==
	     32'd0 &&
	     IF_IF_6_MINUS_IF_quireToPosit1_fifo_output_reg_ETC___d142 ||
	     _6_MINUS_IF_quireToPosit1_fifo_output_reg_first_ETC___d67 ==
	     3'd0 &&
	     shift_new0__h1342 == 2'd0 ||
	     k_expo__h1345 == 7'd127 &&
	     IF_6_MINUS_IF_quireToPosit1_fifo_output_reg_fi_ETC___d81 ==
	     3'd0 &&
	     x__h3023[3:0] == 4'd0 &&
	     IF_IF_6_MINUS_IF_quireToPosit1_fifo_output_reg_ETC___d142 ;
  assign NOT_4_MINUS_IF_6_MINUS_IF_quireToPosit1_fifo_o_ETC___d203 =
	     _4_MINUS_IF_6_MINUS_IF_quireToPosit1_fifo_outpu_ETC___d105 !=
	     3'd0 &&
	     (_4_MINUS_IF_6_MINUS_IF_quireToPosit1_fifo_outpu_ETC___d105 !=
	      3'd1 ||
	      truncated_frac_msb__h1347) &&
	     (_4_MINUS_IF_6_MINUS_IF_quireToPosit1_fifo_outpu_ETC___d144 ||
	      { 28'd0, (x__h3023[3:0] & ~(4'hE << x__h3360[1:0])) >> 0 } !=
	      32'd0 ||
	      truncated_frac_msb__h1347) &&
	     NOT_6_MINUS_IF_quireToPosit1_fifo_output_reg_f_ETC___d200 ;
  assign NOT_6_MINUS_IF_quireToPosit1_fifo_output_reg_f_ETC___d109 =
	     x023_BITS_3_TO_0__q3[_4_MINUS_IF_6_MINUS_IF_quireToPosit1_fifo_outpu_ETC___d105[1:0]] ;
  assign NOT_6_MINUS_IF_quireToPosit1_fifo_output_reg_f_ETC___d119 =
	     x023_BITS_3_TO_0__q3[x__h3199[1:0]] ;
  assign NOT_6_MINUS_IF_quireToPosit1_fifo_output_reg_f_ETC___d175 =
	     NOT_6_MINUS_IF_quireToPosit1_fifo_output_reg_f_ETC___d109 ||
	     ((_4_MINUS_IF_6_MINUS_IF_quireToPosit1_fifo_outpu_ETC___d105 ==
	       3'd0) ?
		IF_IF_6_MINUS_IF_quireToPosit1_fifo_output_reg_ETC___d142 :
		!NOT_6_MINUS_IF_quireToPosit1_fifo_output_reg_f_ETC___d119) ;
  assign NOT_6_MINUS_IF_quireToPosit1_fifo_output_reg_f_ETC___d181 =
	     NOT_6_MINUS_IF_quireToPosit1_fifo_output_reg_f_ETC___d175 ||
	     CASE_shift_new0342_0_NOT_quireToPosit1_fifo_ou_ETC__q6 ;
  assign NOT_6_MINUS_IF_quireToPosit1_fifo_output_reg_f_ETC___d200 =
	     (_6_MINUS_IF_quireToPosit1_fifo_output_reg_first_ETC___d67 !=
	      3'd0 ||
	      shift_new0__h1342 != 2'd0 ||
	      !NOT_6_MINUS_IF_quireToPosit1_fifo_output_reg_f_ETC___d119) &&
	     (k_expo__h1345 != 7'd127 ||
	      IF_6_MINUS_IF_quireToPosit1_fifo_output_reg_fi_ETC___d81 !=
	      3'd0 ||
	      x__h3023[3:0] != 4'd0 ||
	      truncated_frac_msb__h1347) ;
  assign NOT_6_MINUS_IF_quireToPosit1_fifo_output_reg_f_ETC___d204 =
	     NOT_6_MINUS_IF_quireToPosit1_fifo_output_reg_f_ETC___d181 ||
	     IF_6_MINUS_IF_quireToPosit1_fifo_output_reg_fi_ETC___d81 ==
	     3'd0 &&
	     !(~k_expo__h1345[0]) ||
	     NOT_4_MINUS_IF_6_MINUS_IF_quireToPosit1_fifo_o_ETC___d203 ;
  assign NOT_IF_quireToPosit1_fifo_output_reg_first__3__ETC___d93 =
	     (!b__h1649[6] && b__h2296[6] || b__h1649[6] && !b__h2296[6]) &&
	     !IF_quireToPosit1_fifo_output_reg_first__3_BIT__ETC___d88[6] ||
	     b__h1649[6] && b__h2296[6] ;
  assign NOT_NOT_6_MINUS_IF_quireToPosit1_fifo_output_r_ETC___d132 =
	     !NOT_6_MINUS_IF_quireToPosit1_fifo_output_reg_f_ETC___d109 &&
	     flag_prev_truncate__h1351 &&
	     CASE_shift_new0342_0_quireToPosit1_fifo_output_ETC__q5 ;
  assign _0_CONCAT_IF_IF_compute_request_put_BIT_31_24_T_ETC___d296 =
	     { 1'd0, msbZeros__h4091 } + 6'd1 ;
  assign _0_MINUS_quireToPosit1_fifo_output_regD_OUT_BI_ETC__q1 =
	     4'd0 - quireToPosit1_fifo_output_reg$D_OUT[10:7] ;
  assign _19_MINUS_0_CONCAT_IF_IF_compute_request_put_BI_ETC___d298 =
	     6'd19 -
	     _0_CONCAT_IF_IF_compute_request_put_BIT_31_24_T_ETC___d296 ;
  assign _4_MINUS_IF_6_MINUS_IF_quireToPosit1_fifo_outpu_ETC___d105 =
	     3'd4 - IF_6_MINUS_IF_quireToPosit1_fifo_output_reg_fi_ETC___d81 ;
  assign _4_MINUS_IF_6_MINUS_IF_quireToPosit1_fifo_outpu_ETC___d144 =
	     _4_MINUS_IF_6_MINUS_IF_quireToPosit1_fifo_outpu_ETC___d105 <
	     3'd2 ;
  assign _6_MINUS_IF_quireToPosit1_fifo_output_reg_first_ETC___d67 =
	     3'd6 -
	     (quireToPosit1_fifo_output_reg$D_OUT[10] ?
		_0_MINUS_quireToPosit1_fifo_output_regD_OUT_BI_ETC__q1[2:0] :
		IF_quireToPosit1_fifo_output_reg_first__3_BIT__ETC___d60) ;
  assign _theResult____h1352 =
	     NOT_NOT_6_MINUS_IF_quireToPosit1_fifo_output_r_ETC___d132 &&
	     (IF_6_MINUS_IF_quireToPosit1_fifo_output_reg_fi_ETC___d81 !=
	      3'd0 ||
	      ~k_expo__h1345[0]) &&
	     (_4_MINUS_IF_6_MINUS_IF_quireToPosit1_fifo_outpu_ETC___d105 ==
	      3'd0 ||
	      _4_MINUS_IF_6_MINUS_IF_quireToPosit1_fifo_outpu_ETC___d105 ==
	      3'd1 &&
	      IF_IF_6_MINUS_IF_quireToPosit1_fifo_output_reg_ETC___d142 ||
	      NOT_4_MINUS_IF_6_MINUS_IF_quireToPosit1_fifo_o_ETC___d159) ;
  assign _theResult___fst__h2328 =
	     quireToPosit1_fifo_output_reg_first__3_BIT_6_9_ETC___d72 ?
	       expo_new__h2425 :
	       expo_new__h2394 ;
  assign _theResult___snd_snd__h2477 =
	     quireToPosit1_fifo_output_reg_first__3_BIT_6_9_ETC___d72 ?
	       shift_new__h2424 :
	       2'd0 ;
  assign a__h1382 =
	     IF_IF_NOT_IF_quireToPosit1_fifo_output_reg_fir_ETC___d171 +
	     { 6'd0,
	       IF_IF_NOT_IF_quireToPosit1_fifo_output_reg_fir_ETC___d171 ==
	       7'd0 &&
	       NOT_6_MINUS_IF_quireToPosit1_fifo_output_reg_f_ETC___d204 } ;
  assign b__h1523 = x__h1539 - y__h1540 ;
  assign b__h1649 =
	     quireToPosit1_fifo_output_reg$D_OUT[10] ? k__h1709 : k__h1754 ;
  assign b__h2296 =
	     { 6'd0, x__h2299 } <<
	     IF_6_MINUS_IF_quireToPosit1_fifo_output_reg_fi_ETC___d81 ;
  assign b__h3512 = { 6'd0, flag_prev_truncate__h1351 } ;
  assign carry_int_frac_shifted__h603 =
	     quireToPosit1_fifo_stage0_reg$D_OUT[30:0] << x__h691 ;
  assign compute_request_put_BIT_31_24_AND_compute_requ_ETC___d307 =
	     { x__h4402,
	       ((IF_0_CONCAT_IF_IF_compute_request_put_BIT_31_2_ETC___d301 ^
		 6'h20) <
		6'd20) ?
		 5'd20 :
		 (((IF_0_CONCAT_IF_IF_compute_request_put_BIT_31_2_ETC___d301 ^
		    6'h20) <=
		   6'd44) ?
		    IF_0_CONCAT_IF_IF_compute_request_put_BIT_31_2_ETC___d301[4:0] :
		    5'd12),
	       IF_compute_request_put_BIT_31_24_THEN_0_MINUS__ETC___d232 } ;
  assign expo_new__h2394 =
	     _6_MINUS_IF_quireToPosit1_fifo_output_reg_first_ETC___d67 ==
	     3'd0 &&
	     quireToPosit1_fifo_output_reg$D_OUT[6] ;
  assign expo_new__h2425 =
	     x__h2428[0] & quireToPosit1_fifo_output_reg$D_OUT[6] ;
  assign flag_prev_truncate__h1351 =
	     (_4_MINUS_IF_6_MINUS_IF_quireToPosit1_fifo_outpu_ETC___d105 ==
	      3'd0) ?
	       truncated_frac_msb__h1347 :
	       NOT_6_MINUS_IF_quireToPosit1_fifo_output_reg_f_ETC___d119 ;
  assign i1__h3250 = shift_new0__h1342 - 2'd2 ;
  assign i__h3152 = shift_new0__h1342 - 2'd1 ;
  assign k__h1709 = 7'd1 << x__h1752 ;
  assign k__h1754 = ~x__h1766 ;
  assign k_expo__h1345 =
	     NOT_IF_quireToPosit1_fifo_output_reg_first__3__ETC___d93 ?
	       7'd127 :
	       IF_quireToPosit1_fifo_output_reg_first__3_BIT__ETC___d88 ;
  assign mask_e__h2326 =
	     3'd1 -
	     _6_MINUS_IF_quireToPosit1_fifo_output_reg_first_ETC___d67 ==
	     3'd0 ;
  assign msbZeros__h4091 =
	     IF_compute_request_put_BIT_31_24_THEN_0_MINUS__ETC___d232[30] ?
	       5'd0 :
	       (IF_compute_request_put_BIT_31_24_THEN_0_MINUS__ETC___d232[29] ?
		  5'd1 :
		  (IF_compute_request_put_BIT_31_24_THEN_0_MINUS__ETC___d232[28] ?
		     5'd2 :
		     (IF_compute_request_put_BIT_31_24_THEN_0_MINUS__ETC___d232[27] ?
			5'd3 :
			(IF_compute_request_put_BIT_31_24_THEN_0_MINUS__ETC___d232[26] ?
			   5'd4 :
			   (IF_compute_request_put_BIT_31_24_THEN_0_MINUS__ETC___d232[25] ?
			      5'd5 :
			      (IF_compute_request_put_BIT_31_24_THEN_0_MINUS__ETC___d232[24] ?
				 5'd6 :
				 (IF_compute_request_put_BIT_31_24_THEN_0_MINUS__ETC___d232[23] ?
				    5'd7 :
				    (IF_compute_request_put_BIT_31_24_THEN_0_MINUS__ETC___d232[22] ?
				       5'd8 :
				       (IF_compute_request_put_BIT_31_24_THEN_0_MINUS__ETC___d232[21] ?
					  5'd9 :
					  (IF_compute_request_put_BIT_31_24_THEN_0_MINUS__ETC___d232[20] ?
					     5'd10 :
					     (IF_compute_request_put_BIT_31_24_THEN_0_MINUS__ETC___d232[19] ?
						5'd11 :
						(IF_compute_request_put_BIT_31_24_THEN_0_MINUS__ETC___d232[18] ?
						   5'd12 :
						   (IF_compute_request_put_BIT_31_24_THEN_0_MINUS__ETC___d232[17] ?
						      5'd13 :
						      (IF_compute_request_put_BIT_31_24_THEN_0_MINUS__ETC___d232[16] ?
							 5'd14 :
							 (IF_compute_request_put_BIT_31_24_THEN_0_MINUS__ETC___d232[15] ?
							    5'd15 :
							    (IF_compute_request_put_BIT_31_24_THEN_0_MINUS__ETC___d232[14] ?
							       5'd16 :
							       (IF_compute_request_put_BIT_31_24_THEN_0_MINUS__ETC___d232[13] ?
								  5'd17 :
								  (IF_compute_request_put_BIT_31_24_THEN_0_MINUS__ETC___d232[12] ?
								     5'd18 :
								     (IF_compute_request_put_BIT_31_24_THEN_0_MINUS__ETC___d232[11] ?
									5'd19 :
									(IF_compute_request_put_BIT_31_24_THEN_0_MINUS__ETC___d232[10] ?
									   5'd20 :
									   (IF_compute_request_put_BIT_31_24_THEN_0_MINUS__ETC___d232[9] ?
									      5'd21 :
									      (IF_compute_request_put_BIT_31_24_THEN_0_MINUS__ETC___d232[8] ?
										 5'd22 :
										 (IF_compute_request_put_BIT_31_24_THEN_0_MINUS__ETC___d232[7] ?
										    5'd23 :
										    (IF_compute_request_put_BIT_31_24_THEN_0_MINUS__ETC___d232[6] ?
										       5'd24 :
										       (IF_compute_request_put_BIT_31_24_THEN_0_MINUS__ETC___d232[5] ?
											  5'd25 :
											  (IF_compute_request_put_BIT_31_24_THEN_0_MINUS__ETC___d232[4] ?
											     5'd26 :
											     (IF_compute_request_put_BIT_31_24_THEN_0_MINUS__ETC___d232[3] ?
												5'd27 :
												(IF_compute_request_put_BIT_31_24_THEN_0_MINUS__ETC___d232[2] ?
												   5'd28 :
												   (IF_compute_request_put_BIT_31_24_THEN_0_MINUS__ETC___d232[1] ?
												      5'd29 :
												      (IF_compute_request_put_BIT_31_24_THEN_0_MINUS__ETC___d232[0] ?
													 5'd30 :
													 5'd31)))))))))))))))))))))))))))))) ;
  assign quireToPosit1_fifo_output_regD_OUT_BITS_5_TO_2__q4 =
	     quireToPosit1_fifo_output_reg$D_OUT[5:2] ;
  assign quireToPosit1_fifo_output_reg_first__3_BITS_5__ETC___d115 =
	     quireToPosit1_fifo_output_regD_OUT_BITS_5_TO_2__q4[i__h3152] ;
  assign quireToPosit1_fifo_output_reg_first__3_BITS_9__ETC___d56 =
	     quireToPosit1_fifo_output_reg$D_OUT[9:7] + 3'd1 ;
  assign quireToPosit1_fifo_output_reg_first__3_BIT_0_2_ETC___d125 =
	     quireToPosit1_fifo_output_reg$D_OUT[0] & y__h3240 ;
  assign quireToPosit1_fifo_output_reg_first__3_BIT_0_2_ETC___d129 =
	     quireToPosit1_fifo_output_reg_first__3_BIT_0_2_ETC___d125 &
	     y__h3244 ;
  assign quireToPosit1_fifo_output_reg_first__3_BIT_6_9_ETC___d72 =
	     quireToPosit1_fifo_output_reg$D_OUT[6] & mask_e__h2326 ;
  assign quireToPosit1_fifo_stage0_regD_OUT_BITS_35_TO_31__q2 =
	     quireToPosit1_fifo_stage0_reg$D_OUT[35:31] ;
  assign quireToPosit1_fifo_stage0_reg_first_BITS_35_TO_ETC___d7 =
	     (quireToPosit1_fifo_stage0_reg$D_OUT[35:31] ^ 5'h10) < 5'd28 ;
  assign shift_new0__h1342 =
	     (_6_MINUS_IF_quireToPosit1_fifo_output_reg_first_ETC___d67 ==
	      3'd0) ?
	       _theResult___snd_snd__h2477 :
	       2'd0 ;
  assign shift_new__h2424 = { 1'd0, x__h3043 } ;
  assign stage1_regf_frac__h478 =
	     IF_quireToPosit1_fifo_stage0_reg_first_BITS_35_ETC___d14[4] ?
	       IF_quireToPosit1_fifo_stage0_reg_first_BITS_35_ETC___d14[3:0] :
	       IF_quireToPosit1_fifo_stage0_reg_first_BITS_35_ETC___d14[4:1] ;
  assign truncated_frac_msb__h1347 =
	     (shift_new0__h1342 == 2'd0) ?
	       quireToPosit1_fifo_output_reg$D_OUT[1] :
	       quireToPosit1_fifo_output_reg_first__3_BITS_5__ETC___d115 ;
  assign x023_BITS_3_TO_0__q3 = x__h3023[3:0] ;
  assign x__h1539 = k_expo__h1345 + y__h1541 ;
  assign x__h1752 =
	     3'd6 -
	     _0_MINUS_quireToPosit1_fifo_output_regD_OUT_BI_ETC__q1[2:0] ;
  assign x__h1766 =
	     7'd127 >>
	     IF_quireToPosit1_fifo_output_reg_first__3_BIT__ETC___d60 ;
  assign x__h2299 =
	     (_6_MINUS_IF_quireToPosit1_fifo_output_reg_first_ETC___d67 ==
	      3'd0) ?
	       _theResult___fst__h2328 :
	       quireToPosit1_fifo_output_reg$D_OUT[6] ;
  assign x__h2428 =
	     2'd1 <<
	     _6_MINUS_IF_quireToPosit1_fifo_output_reg_first_ETC___d67 ;
  assign x__h3023 =
	     { _6_MINUS_IF_quireToPosit1_fifo_output_reg_first_ETC___d67 !=
	       3'd0,
	       quireToPosit1_fifo_output_reg$D_OUT[5:2] } >>
	     shift_new0__h1342 ;
  assign x__h3043 = 1'd0 - quireToPosit1_fifo_output_reg$D_OUT[6] ;
  assign x__h3199 =
	     _4_MINUS_IF_6_MINUS_IF_quireToPosit1_fifo_outpu_ETC___d105 -
	     3'd1 ;
  assign x__h3360 =
	     _4_MINUS_IF_6_MINUS_IF_quireToPosit1_fifo_outpu_ETC___d105 -
	     3'd2 ;
  assign x__h4402 =
	     compute_request_put[31] && compute_request_put[30:0] == 31'd0 ;
  assign x__h691 =
	     (6'd19 -
	      { quireToPosit1_fifo_stage0_regD_OUT_BITS_35_TO_31__q2[4],
		quireToPosit1_fifo_stage0_regD_OUT_BITS_35_TO_31__q2 }) -
	     6'd1 ;
  assign x__h708 =
	     ((quireToPosit1_fifo_stage0_reg$D_OUT[30:0] == 31'd0 &&
	       quireToPosit1_fifo_stage0_reg$D_OUT[38:37] == 2'd0) ?
		2'd2 :
		quireToPosit1_fifo_stage0_reg$D_OUT[38:37]) !=
	     2'd2 &&
	     (!quireToPosit1_fifo_stage0_reg_first_BITS_35_TO_ETC___d7 ||
	      carry_int_frac_shifted__h603[25]) ;
  assign x__h756 =
	     ((quireToPosit1_fifo_stage0_reg$D_OUT[30:0] == 31'd0 &&
	       quireToPosit1_fifo_stage0_reg$D_OUT[38:37] == 2'd0) ?
		2'd2 :
		quireToPosit1_fifo_stage0_reg$D_OUT[38:37]) ==
	     2'd2 ||
	     quireToPosit1_fifo_stage0_reg_first_BITS_35_TO_ETC___d7 &&
	     carry_int_frac_shifted__h603[24:0] == 25'd0 ;
  assign y__h1540 = { 6'd0, _theResult____h1352 } ;
  assign y__h1541 =
	     { 3'd0, x__h3023[3:0] } >>
	     _4_MINUS_IF_6_MINUS_IF_quireToPosit1_fifo_outpu_ETC___d105 ;
  assign y__h3240 = ~quireToPosit1_fifo_output_reg$D_OUT[1] ;
  assign y__h3244 =
	     { 28'd0,
	       (quireToPosit1_fifo_output_reg$D_OUT[5:2] &
		~(4'hE << i1__h3250)) >>
	       0 } ==
	     32'd0 ;
  always@(shift_new0__h1342 or
	  quireToPosit1_fifo_output_reg_first__3_BIT_0_2_ETC___d129 or
	  quireToPosit1_fifo_output_reg$D_OUT or
	  quireToPosit1_fifo_output_reg_first__3_BIT_0_2_ETC___d125)
  begin
    case (shift_new0__h1342)
      2'd0:
	  CASE_shift_new0342_0_quireToPosit1_fifo_output_ETC__q5 =
	      quireToPosit1_fifo_output_reg$D_OUT[0];
      2'd1:
	  CASE_shift_new0342_0_quireToPosit1_fifo_output_ETC__q5 =
	      quireToPosit1_fifo_output_reg_first__3_BIT_0_2_ETC___d125;
      default: CASE_shift_new0342_0_quireToPosit1_fifo_output_ETC__q5 =
		   quireToPosit1_fifo_output_reg_first__3_BIT_0_2_ETC___d129;
    endcase
  end
  always@(shift_new0__h1342 or
	  quireToPosit1_fifo_output_reg_first__3_BIT_0_2_ETC___d129 or
	  quireToPosit1_fifo_output_reg$D_OUT or
	  quireToPosit1_fifo_output_reg_first__3_BIT_0_2_ETC___d125)
  begin
    case (shift_new0__h1342)
      2'd0:
	  CASE_shift_new0342_0_NOT_quireToPosit1_fifo_ou_ETC__q6 =
	      !quireToPosit1_fifo_output_reg$D_OUT[0];
      2'd1:
	  CASE_shift_new0342_0_NOT_quireToPosit1_fifo_ou_ETC__q6 =
	      !quireToPosit1_fifo_output_reg_first__3_BIT_0_2_ETC___d125;
      default: CASE_shift_new0342_0_NOT_quireToPosit1_fifo_ou_ETC__q6 =
		   !quireToPosit1_fifo_output_reg_first__3_BIT_0_2_ETC___d129;
    endcase
  end
  always@(quireToPosit1_fifo_output_reg$D_OUT or a__h1382)
  begin
    case (quireToPosit1_fifo_output_reg$D_OUT[13:12])
      2'd0:
	  output_regf_out_posit__h1366 =
	      { quireToPosit1_fifo_output_reg$D_OUT[14],
		quireToPosit1_fifo_output_reg$D_OUT[14] ?
		  7'd0 - a__h1382 :
		  a__h1382 };
      2'd1: output_regf_out_posit__h1366 = 8'd128;
      default: output_regf_out_posit__h1366 = 8'd0;
    endcase
  end
endmodule  // mkPNE_test

