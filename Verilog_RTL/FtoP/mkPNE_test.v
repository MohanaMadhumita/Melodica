//
// Generated by Bluespec Compiler (build 16071ee)
//
// On Wed Sep 16 14:08:10 IST 2020
//
//
// Ports:
// Name                         I/O  size props
// RDY_compute_request_put        O     1 reg
// compute_response_get           O    12 reg
// RDY_compute_response_get       O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// compute_request_put            I    32
// EN_compute_request_put         I     1
// EN_compute_response_get        I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPNE_test(CLK,
		  RST_N,

		  compute_request_put,
		  EN_compute_request_put,
		  RDY_compute_request_put,

		  EN_compute_response_get,
		  compute_response_get,
		  RDY_compute_response_get);
  input  CLK;
  input  RST_N;

  // action method compute_request_put
  input  [31 : 0] compute_request_put;
  input  EN_compute_request_put;
  output RDY_compute_request_put;

  // actionvalue method compute_response_get
  input  EN_compute_response_get;
  output [11 : 0] compute_response_get;
  output RDY_compute_response_get;

  // signals for module outputs
  wire [11 : 0] compute_response_get;
  wire RDY_compute_request_put, RDY_compute_response_get;

  // ports of submodule fToP_fifo_output_reg
  wire [14 : 0] fToP_fifo_output_reg$D_IN, fToP_fifo_output_reg$D_OUT;
  wire fToP_fifo_output_reg$CLR,
       fToP_fifo_output_reg$DEQ,
       fToP_fifo_output_reg$EMPTY_N,
       fToP_fifo_output_reg$ENQ,
       fToP_fifo_output_reg$FULL_N;

  // ports of submodule fToP_fifo_stage0_reg
  wire [17 : 0] fToP_fifo_stage0_reg$D_IN, fToP_fifo_stage0_reg$D_OUT;
  wire fToP_fifo_stage0_reg$CLR,
       fToP_fifo_stage0_reg$DEQ,
       fToP_fifo_stage0_reg$EMPTY_N,
       fToP_fifo_stage0_reg$ENQ,
       fToP_fifo_stage0_reg$FULL_N;

  // ports of submodule ffO
  wire [11 : 0] ffO$D_IN, ffO$D_OUT;
  wire ffO$CLR, ffO$DEQ, ffO$EMPTY_N, ffO$ENQ, ffO$FULL_N;

  // ports of submodule normalizer_fifo_output_reg
  wire [11 : 0] normalizer_fifo_output_reg$D_IN,
		normalizer_fifo_output_reg$D_OUT;
  wire normalizer_fifo_output_reg$CLR,
       normalizer_fifo_output_reg$DEQ,
       normalizer_fifo_output_reg$EMPTY_N,
       normalizer_fifo_output_reg$ENQ,
       normalizer_fifo_output_reg$FULL_N;

  // ports of submodule normalizer_fifo_stage0_reg
  wire [17 : 0] normalizer_fifo_stage0_reg$D_IN;
  wire normalizer_fifo_stage0_reg$CLR,
       normalizer_fifo_stage0_reg$DEQ,
       normalizer_fifo_stage0_reg$ENQ;

  // ports of submodule normalizer_fifo_stage1_reg
  wire [20 : 0] normalizer_fifo_stage1_reg$D_IN;
  wire normalizer_fifo_stage1_reg$CLR,
       normalizer_fifo_stage1_reg$DEQ,
       normalizer_fifo_stage1_reg$ENQ;

  // ports of submodule normalizer_fifo_stage2_reg
  wire [11 : 0] normalizer_fifo_stage2_reg$D_IN;
  wire normalizer_fifo_stage2_reg$CLR,
       normalizer_fifo_stage2_reg$DEQ,
       normalizer_fifo_stage2_reg$ENQ;

  // rule scheduling signals
  wire CAN_FIRE_RL_fToP_stage_1,
       CAN_FIRE_RL_rl_connect,
       CAN_FIRE_RL_rl_out,
       CAN_FIRE_compute_request_put,
       CAN_FIRE_compute_response_get,
       WILL_FIRE_RL_fToP_stage_1,
       WILL_FIRE_RL_rl_connect,
       WILL_FIRE_RL_rl_out,
       WILL_FIRE_compute_request_put,
       WILL_FIRE_compute_response_get;

  // remaining internal signals
  reg [7 : 0] output_regf_out_posit__h1176;
  reg CASE_shift_new0152_0_NOT_fToP_fifo_output_reg_ETC__q5,
      CASE_shift_new0152_0_fToP_fifo_output_regD_OU_ETC__q4;
  wire [8 : 0] _0_CONCAT_compute_request_put_BITS_30_TO_23_19__ETC___d231;
  wire [7 : 0] IF_0_CONCAT_compute_request_put_BITS_30_TO_23__ETC__q6,
	       IF_0_CONCAT_compute_request_put_BITS_30_TO_23__ETC__q7,
	       _0_CONCAT_compute_request_put_BITS_30_TO_23_19__ETC___d239,
	       _0_CONCAT_compute_request_put_BITS_30_TO_23_19__ETC___d243;
  wire [6 : 0] IF_IF_NOT_IF_fToP_fifo_output_reg_first__7_BIT_ETC___d165,
	       IF_NOT_IF_fToP_fifo_output_reg_first__7_BIT_10_ETC___d161,
	       IF_fToP_fifo_output_reg_first__7_BIT_10_2_THEN_ETC___d82,
	       a__h1195,
	       b__h1343,
	       b__h1469,
	       b__h2116,
	       b__h3332,
	       k__h1529,
	       k__h1574,
	       k_expo__h1155,
	       x__h1359,
	       x__h1586,
	       y__h1360,
	       y__h1361;
  wire [4 : 0] IF_0_CONCAT_compute_request_put_BITS_30_TO_23__ETC___d237,
	       frac__h354,
	       x__h2843,
	       x__h426;
  wire [3 : 0] _0_MINUS_fToP_fifo_output_regD_OUT_BITS_10_TO_7__q1,
	       fToP_fifo_output_regD_OUT_BITS_5_TO_2__q3,
	       x843_BITS_3_TO_0__q2,
	       x_frac__h373;
  wire [2 : 0] IF_0_CONCAT_compute_request_put_BITS_30_TO_23__ETC___d248,
	       IF_6_MINUS_IF_fToP_fifo_output_reg_first__7_BI_ETC___d75,
	       IF_fToP_fifo_output_reg_first__7_BIT_9_8_AND_N_ETC___d54,
	       IF_fToP_fifo_stage0_reg_first_BIT_4_THEN_NEG_f_ETC___d11,
	       _4_MINUS_IF_6_MINUS_IF_fToP_fifo_output_reg_fir_ETC___d99,
	       _6_MINUS_IF_fToP_fifo_output_reg_first__7_BIT_1_ETC___d61,
	       fToP_fifo_output_reg_first__7_BITS_9_TO_7_9_PL_ETC___d50,
	       x__h1572,
	       x__h3019,
	       x__h3180,
	       x__h486;
  wire [1 : 0] _theResult___snd_snd__h2297,
	       i1__h3070,
	       i__h2972,
	       shift_new0__h1152,
	       shift_new__h2244,
	       x__h2248;
  wire IF_IF_6_MINUS_IF_fToP_fifo_output_reg_first__7_ETC___d136,
       NOT_4_MINUS_IF_6_MINUS_IF_fToP_fifo_output_reg_ETC___d153,
       NOT_4_MINUS_IF_6_MINUS_IF_fToP_fifo_output_reg_ETC___d197,
       NOT_6_MINUS_IF_fToP_fifo_output_reg_first__7_B_ETC___d103,
       NOT_6_MINUS_IF_fToP_fifo_output_reg_first__7_B_ETC___d113,
       NOT_6_MINUS_IF_fToP_fifo_output_reg_first__7_B_ETC___d169,
       NOT_6_MINUS_IF_fToP_fifo_output_reg_first__7_B_ETC___d175,
       NOT_6_MINUS_IF_fToP_fifo_output_reg_first__7_B_ETC___d194,
       NOT_6_MINUS_IF_fToP_fifo_output_reg_first__7_B_ETC___d198,
       NOT_IF_fToP_fifo_output_reg_first__7_BIT_10_2__ETC___d87,
       NOT_NOT_6_MINUS_IF_fToP_fifo_output_reg_first__ETC___d126,
       _0_CONCAT_compute_request_put_BITS_30_TO_23_19__ETC___d233,
       _0_CONCAT_compute_request_put_BITS_30_TO_23_19__ETC___d234,
       _4_MINUS_IF_6_MINUS_IF_fToP_fifo_output_reg_fir_ETC___d138,
       _theResult____h1162,
       _theResult___fst__h2148,
       expo_new__h2214,
       expo_new__h2245,
       fToP_fifo_output_reg_first__7_BITS_5_TO_2_0_BI_ETC___d109,
       fToP_fifo_output_reg_first__7_BIT_0_16_AND_INV_ETC___d119,
       fToP_fifo_output_reg_first__7_BIT_0_16_AND_INV_ETC___d123,
       fToP_fifo_output_reg_first__7_BIT_6_3_AND_1_MI_ETC___d66,
       flag_prev_truncate__h1161,
       mask_e__h2146,
       truncated_frac_msb__h1157,
       truncated_frac_zero__h355,
       x__h2119,
       x__h2863,
       x__h4239,
       x__h4402,
       x__h499,
       x__h576,
       x__h588,
       x__h589,
       y__h3060,
       y__h3064;

  // action method compute_request_put
  assign RDY_compute_request_put = fToP_fifo_stage0_reg$FULL_N ;
  assign CAN_FIRE_compute_request_put = fToP_fifo_stage0_reg$FULL_N ;
  assign WILL_FIRE_compute_request_put = EN_compute_request_put ;

  // actionvalue method compute_response_get
  assign compute_response_get = ffO$D_OUT ;
  assign RDY_compute_response_get = ffO$EMPTY_N ;
  assign CAN_FIRE_compute_response_get = ffO$EMPTY_N ;
  assign WILL_FIRE_compute_response_get = EN_compute_response_get ;

  // submodule fToP_fifo_output_reg
  FIFO2 #(.width(32'd15), .guarded(32'd1)) fToP_fifo_output_reg(.RST(RST_N),
								.CLK(CLK),
								.D_IN(fToP_fifo_output_reg$D_IN),
								.ENQ(fToP_fifo_output_reg$ENQ),
								.DEQ(fToP_fifo_output_reg$DEQ),
								.CLR(fToP_fifo_output_reg$CLR),
								.D_OUT(fToP_fifo_output_reg$D_OUT),
								.FULL_N(fToP_fifo_output_reg$FULL_N),
								.EMPTY_N(fToP_fifo_output_reg$EMPTY_N));

  // submodule fToP_fifo_stage0_reg
  FIFO2 #(.width(32'd18), .guarded(32'd1)) fToP_fifo_stage0_reg(.RST(RST_N),
								.CLK(CLK),
								.D_IN(fToP_fifo_stage0_reg$D_IN),
								.ENQ(fToP_fifo_stage0_reg$ENQ),
								.DEQ(fToP_fifo_stage0_reg$DEQ),
								.CLR(fToP_fifo_stage0_reg$CLR),
								.D_OUT(fToP_fifo_stage0_reg$D_OUT),
								.FULL_N(fToP_fifo_stage0_reg$FULL_N),
								.EMPTY_N(fToP_fifo_stage0_reg$EMPTY_N));

  // submodule ffO
  FIFO2 #(.width(32'd12), .guarded(32'd1)) ffO(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(ffO$D_IN),
					       .ENQ(ffO$ENQ),
					       .DEQ(ffO$DEQ),
					       .CLR(ffO$CLR),
					       .D_OUT(ffO$D_OUT),
					       .FULL_N(ffO$FULL_N),
					       .EMPTY_N(ffO$EMPTY_N));

  // submodule normalizer_fifo_output_reg
  FIFO2 #(.width(32'd12),
	  .guarded(32'd1)) normalizer_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_output_reg$D_IN),
						      .ENQ(normalizer_fifo_output_reg$ENQ),
						      .DEQ(normalizer_fifo_output_reg$DEQ),
						      .CLR(normalizer_fifo_output_reg$CLR),
						      .D_OUT(normalizer_fifo_output_reg$D_OUT),
						      .FULL_N(normalizer_fifo_output_reg$FULL_N),
						      .EMPTY_N(normalizer_fifo_output_reg$EMPTY_N));

  // submodule normalizer_fifo_stage0_reg
  FIFO2 #(.width(32'd18),
	  .guarded(32'd1)) normalizer_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_stage0_reg$D_IN),
						      .ENQ(normalizer_fifo_stage0_reg$ENQ),
						      .DEQ(normalizer_fifo_stage0_reg$DEQ),
						      .CLR(normalizer_fifo_stage0_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule normalizer_fifo_stage1_reg
  FIFO2 #(.width(32'd21),
	  .guarded(32'd1)) normalizer_fifo_stage1_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_stage1_reg$D_IN),
						      .ENQ(normalizer_fifo_stage1_reg$ENQ),
						      .DEQ(normalizer_fifo_stage1_reg$DEQ),
						      .CLR(normalizer_fifo_stage1_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule normalizer_fifo_stage2_reg
  FIFO2 #(.width(32'd12),
	  .guarded(32'd1)) normalizer_fifo_stage2_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_stage2_reg$D_IN),
						      .ENQ(normalizer_fifo_stage2_reg$ENQ),
						      .DEQ(normalizer_fifo_stage2_reg$DEQ),
						      .CLR(normalizer_fifo_stage2_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // rule RL_rl_connect
  assign CAN_FIRE_RL_rl_connect =
	     fToP_fifo_output_reg$EMPTY_N &&
	     normalizer_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_rl_connect = CAN_FIRE_RL_rl_connect ;

  // rule RL_rl_out
  assign CAN_FIRE_RL_rl_out =
	     normalizer_fifo_output_reg$EMPTY_N && ffO$FULL_N ;
  assign WILL_FIRE_RL_rl_out = CAN_FIRE_RL_rl_out ;

  // rule RL_fToP_stage_1
  assign CAN_FIRE_RL_fToP_stage_1 =
	     fToP_fifo_stage0_reg$EMPTY_N && fToP_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_fToP_stage_1 = CAN_FIRE_RL_fToP_stage_1 ;

  // submodule fToP_fifo_output_reg
  assign fToP_fifo_output_reg$D_IN =
	     { fToP_fifo_stage0_reg$D_OUT[17:9],
	       x_frac__h373,
	       x__h499,
	       x__h576 } ;
  assign fToP_fifo_output_reg$ENQ = CAN_FIRE_RL_fToP_stage_1 ;
  assign fToP_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_connect ;
  assign fToP_fifo_output_reg$CLR = 1'b0 ;

  // submodule fToP_fifo_stage0_reg
  assign fToP_fifo_stage0_reg$D_IN =
	     { compute_request_put[31],
	       (compute_request_put[30:23] == 8'd255 &&
		compute_request_put[22:0] == 23'd0) ?
		 2'd1 :
		 ((compute_request_put[30:23] == 8'd0 &&
		   compute_request_put[22:0] == 23'd0) ?
		    2'd2 :
		    2'd0),
	       x__h4239,
	       IF_0_CONCAT_compute_request_put_BITS_30_TO_23__ETC___d237,
	       compute_request_put[22:19],
	       IF_0_CONCAT_compute_request_put_BITS_30_TO_23__ETC___d248,
	       compute_request_put[18],
	       x__h4402 } ;
  assign fToP_fifo_stage0_reg$ENQ = EN_compute_request_put ;
  assign fToP_fifo_stage0_reg$DEQ = CAN_FIRE_RL_fToP_stage_1 ;
  assign fToP_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule ffO
  assign ffO$D_IN = normalizer_fifo_output_reg$D_OUT ;
  assign ffO$ENQ = CAN_FIRE_RL_rl_out ;
  assign ffO$DEQ = EN_compute_response_get ;
  assign ffO$CLR = 1'b0 ;

  // submodule normalizer_fifo_output_reg
  assign normalizer_fifo_output_reg$D_IN =
	     { fToP_fifo_output_reg$D_OUT[11],
	       output_regf_out_posit__h1176,
	       fToP_fifo_output_reg$D_OUT[13:12],
	       flag_prev_truncate__h1161 - _theResult____h1162 ||
	       a__h1195 == 7'd0 &&
	       NOT_6_MINUS_IF_fToP_fifo_output_reg_first__7_B_ETC___d198 } ;
  assign normalizer_fifo_output_reg$ENQ = CAN_FIRE_RL_rl_connect ;
  assign normalizer_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_out ;
  assign normalizer_fifo_output_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_stage0_reg
  assign normalizer_fifo_stage0_reg$D_IN = 18'h0 ;
  assign normalizer_fifo_stage0_reg$ENQ = 1'b0 ;
  assign normalizer_fifo_stage0_reg$DEQ = 1'b0 ;
  assign normalizer_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_stage1_reg
  assign normalizer_fifo_stage1_reg$D_IN = 21'h0 ;
  assign normalizer_fifo_stage1_reg$ENQ = 1'b0 ;
  assign normalizer_fifo_stage1_reg$DEQ = 1'b0 ;
  assign normalizer_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_stage2_reg
  assign normalizer_fifo_stage2_reg$D_IN = 12'h0 ;
  assign normalizer_fifo_stage2_reg$ENQ = 1'b0 ;
  assign normalizer_fifo_stage2_reg$DEQ = 1'b0 ;
  assign normalizer_fifo_stage2_reg$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_0_CONCAT_compute_request_put_BITS_30_TO_23__ETC___d237 =
	     _0_CONCAT_compute_request_put_BITS_30_TO_23_19__ETC___d233 ?
	       5'd20 :
	       (_0_CONCAT_compute_request_put_BITS_30_TO_23_19__ETC___d234 ?
		  _0_CONCAT_compute_request_put_BITS_30_TO_23_19__ETC___d231[4:0] :
		  5'd12) ;
  assign IF_0_CONCAT_compute_request_put_BITS_30_TO_23__ETC___d248 =
	     _0_CONCAT_compute_request_put_BITS_30_TO_23_19__ETC___d233 ?
	       IF_0_CONCAT_compute_request_put_BITS_30_TO_23__ETC__q6[2:0] :
	       (_0_CONCAT_compute_request_put_BITS_30_TO_23_19__ETC___d234 ?
		  3'd0 :
		  IF_0_CONCAT_compute_request_put_BITS_30_TO_23__ETC__q7[2:0]) ;
  assign IF_0_CONCAT_compute_request_put_BITS_30_TO_23__ETC__q6 =
	     ((_0_CONCAT_compute_request_put_BITS_30_TO_23_19__ETC___d239 ^
	       8'h80) <=
	      8'd125) ?
	       8'd253 :
	       _0_CONCAT_compute_request_put_BITS_30_TO_23_19__ETC___d239 ;
  assign IF_0_CONCAT_compute_request_put_BITS_30_TO_23__ETC__q7 =
	     ((_0_CONCAT_compute_request_put_BITS_30_TO_23_19__ETC___d243 ^
	       8'h80) <=
	      8'd131) ?
	       _0_CONCAT_compute_request_put_BITS_30_TO_23_19__ETC___d243 :
	       8'd3 ;
  assign IF_6_MINUS_IF_fToP_fifo_output_reg_first__7_BI_ETC___d75 =
	     (_6_MINUS_IF_fToP_fifo_output_reg_first__7_BIT_1_ETC___d61 ==
	      3'd0) ?
	       _6_MINUS_IF_fToP_fifo_output_reg_first__7_BIT_1_ETC___d61 :
	       _6_MINUS_IF_fToP_fifo_output_reg_first__7_BIT_1_ETC___d61 -
	       3'd1 ;
  assign IF_IF_6_MINUS_IF_fToP_fifo_output_reg_first__7_ETC___d136 =
	     (shift_new0__h1152 == 2'd0) ?
	       !fToP_fifo_output_reg$D_OUT[1] :
	       !fToP_fifo_output_reg_first__7_BITS_5_TO_2_0_BI_ETC___d109 ;
  assign IF_IF_NOT_IF_fToP_fifo_output_reg_first__7_BIT_ETC___d165 =
	     (b__h1343[6] &&
	      !IF_NOT_IF_fToP_fifo_output_reg_first__7_BIT_10_ETC___d161[6]) ?
	       7'd127 :
	       IF_NOT_IF_fToP_fifo_output_reg_first__7_BIT_10_ETC___d161 ;
  assign IF_NOT_IF_fToP_fifo_output_reg_first__7_BIT_10_ETC___d161 =
	     b__h1343 + b__h3332 ;
  assign IF_fToP_fifo_output_reg_first__7_BIT_10_2_THEN_ETC___d82 =
	     b__h1469 + b__h2116 ;
  assign IF_fToP_fifo_output_reg_first__7_BIT_9_8_AND_N_ETC___d54 =
	     (fToP_fifo_output_reg$D_OUT[9] &&
	      !fToP_fifo_output_reg_first__7_BITS_9_TO_7_9_PL_ETC___d50[2]) ?
	       3'd7 :
	       fToP_fifo_output_reg_first__7_BITS_9_TO_7_9_PL_ETC___d50 ;
  assign IF_fToP_fifo_stage0_reg_first_BIT_4_THEN_NEG_f_ETC___d11 =
	     fToP_fifo_stage0_reg$D_OUT[4] ?
	       -fToP_fifo_stage0_reg$D_OUT[4:2] :
	       fToP_fifo_stage0_reg$D_OUT[4:2] ;
  assign NOT_4_MINUS_IF_6_MINUS_IF_fToP_fifo_output_reg_ETC___d153 =
	     !_4_MINUS_IF_6_MINUS_IF_fToP_fifo_output_reg_fir_ETC___d138 &&
	     { 28'd0, (x__h2843[3:0] & ~(4'hE << x__h3180[1:0])) >> 0 } ==
	     32'd0 &&
	     IF_IF_6_MINUS_IF_fToP_fifo_output_reg_first__7_ETC___d136 ||
	     _6_MINUS_IF_fToP_fifo_output_reg_first__7_BIT_1_ETC___d61 ==
	     3'd0 &&
	     shift_new0__h1152 == 2'd0 ||
	     k_expo__h1155 == 7'd127 &&
	     IF_6_MINUS_IF_fToP_fifo_output_reg_first__7_BI_ETC___d75 ==
	     3'd0 &&
	     x__h2843[3:0] == 4'd0 &&
	     IF_IF_6_MINUS_IF_fToP_fifo_output_reg_first__7_ETC___d136 ;
  assign NOT_4_MINUS_IF_6_MINUS_IF_fToP_fifo_output_reg_ETC___d197 =
	     _4_MINUS_IF_6_MINUS_IF_fToP_fifo_output_reg_fir_ETC___d99 !=
	     3'd0 &&
	     (_4_MINUS_IF_6_MINUS_IF_fToP_fifo_output_reg_fir_ETC___d99 !=
	      3'd1 ||
	      truncated_frac_msb__h1157) &&
	     (_4_MINUS_IF_6_MINUS_IF_fToP_fifo_output_reg_fir_ETC___d138 ||
	      { 28'd0, (x__h2843[3:0] & ~(4'hE << x__h3180[1:0])) >> 0 } !=
	      32'd0 ||
	      truncated_frac_msb__h1157) &&
	     NOT_6_MINUS_IF_fToP_fifo_output_reg_first__7_B_ETC___d194 ;
  assign NOT_6_MINUS_IF_fToP_fifo_output_reg_first__7_B_ETC___d103 =
	     x843_BITS_3_TO_0__q2[_4_MINUS_IF_6_MINUS_IF_fToP_fifo_output_reg_fir_ETC___d99[1:0]] ;
  assign NOT_6_MINUS_IF_fToP_fifo_output_reg_first__7_B_ETC___d113 =
	     x843_BITS_3_TO_0__q2[x__h3019[1:0]] ;
  assign NOT_6_MINUS_IF_fToP_fifo_output_reg_first__7_B_ETC___d169 =
	     NOT_6_MINUS_IF_fToP_fifo_output_reg_first__7_B_ETC___d103 ||
	     ((_4_MINUS_IF_6_MINUS_IF_fToP_fifo_output_reg_fir_ETC___d99 ==
	       3'd0) ?
		IF_IF_6_MINUS_IF_fToP_fifo_output_reg_first__7_ETC___d136 :
		!NOT_6_MINUS_IF_fToP_fifo_output_reg_first__7_B_ETC___d113) ;
  assign NOT_6_MINUS_IF_fToP_fifo_output_reg_first__7_B_ETC___d175 =
	     NOT_6_MINUS_IF_fToP_fifo_output_reg_first__7_B_ETC___d169 ||
	     CASE_shift_new0152_0_NOT_fToP_fifo_output_reg_ETC__q5 ;
  assign NOT_6_MINUS_IF_fToP_fifo_output_reg_first__7_B_ETC___d194 =
	     (_6_MINUS_IF_fToP_fifo_output_reg_first__7_BIT_1_ETC___d61 !=
	      3'd0 ||
	      shift_new0__h1152 != 2'd0 ||
	      !NOT_6_MINUS_IF_fToP_fifo_output_reg_first__7_B_ETC___d113) &&
	     (k_expo__h1155 != 7'd127 ||
	      IF_6_MINUS_IF_fToP_fifo_output_reg_first__7_BI_ETC___d75 !=
	      3'd0 ||
	      x__h2843[3:0] != 4'd0 ||
	      truncated_frac_msb__h1157) ;
  assign NOT_6_MINUS_IF_fToP_fifo_output_reg_first__7_B_ETC___d198 =
	     NOT_6_MINUS_IF_fToP_fifo_output_reg_first__7_B_ETC___d175 ||
	     IF_6_MINUS_IF_fToP_fifo_output_reg_first__7_BI_ETC___d75 ==
	     3'd0 &&
	     !(~k_expo__h1155[0]) ||
	     NOT_4_MINUS_IF_6_MINUS_IF_fToP_fifo_output_reg_ETC___d197 ;
  assign NOT_IF_fToP_fifo_output_reg_first__7_BIT_10_2__ETC___d87 =
	     (!b__h1469[6] && b__h2116[6] || b__h1469[6] && !b__h2116[6]) &&
	     !IF_fToP_fifo_output_reg_first__7_BIT_10_2_THEN_ETC___d82[6] ||
	     b__h1469[6] && b__h2116[6] ;
  assign NOT_NOT_6_MINUS_IF_fToP_fifo_output_reg_first__ETC___d126 =
	     !NOT_6_MINUS_IF_fToP_fifo_output_reg_first__7_B_ETC___d103 &&
	     flag_prev_truncate__h1161 &&
	     CASE_shift_new0152_0_fToP_fifo_output_regD_OU_ETC__q4 ;
  assign _0_CONCAT_compute_request_put_BITS_30_TO_23_19__ETC___d231 =
	     { 1'd0, compute_request_put[30:23] } - 9'd127 ;
  assign _0_CONCAT_compute_request_put_BITS_30_TO_23_19__ETC___d233 =
	     (_0_CONCAT_compute_request_put_BITS_30_TO_23_19__ETC___d231[7:0] ^
	      8'h80) <
	     8'd116 ;
  assign _0_CONCAT_compute_request_put_BITS_30_TO_23_19__ETC___d234 =
	     (_0_CONCAT_compute_request_put_BITS_30_TO_23_19__ETC___d231[7:0] ^
	      8'h80) <=
	     8'd140 ;
  assign _0_CONCAT_compute_request_put_BITS_30_TO_23_19__ETC___d239 =
	     _0_CONCAT_compute_request_put_BITS_30_TO_23_19__ETC___d231[7:0] -
	     8'd244 ;
  assign _0_CONCAT_compute_request_put_BITS_30_TO_23_19__ETC___d243 =
	     _0_CONCAT_compute_request_put_BITS_30_TO_23_19__ETC___d231[7:0] -
	     8'd12 ;
  assign _0_MINUS_fToP_fifo_output_regD_OUT_BITS_10_TO_7__q1 =
	     4'd0 - fToP_fifo_output_reg$D_OUT[10:7] ;
  assign _4_MINUS_IF_6_MINUS_IF_fToP_fifo_output_reg_fir_ETC___d138 =
	     _4_MINUS_IF_6_MINUS_IF_fToP_fifo_output_reg_fir_ETC___d99 <
	     3'd2 ;
  assign _4_MINUS_IF_6_MINUS_IF_fToP_fifo_output_reg_fir_ETC___d99 =
	     3'd4 - IF_6_MINUS_IF_fToP_fifo_output_reg_first__7_BI_ETC___d75 ;
  assign _6_MINUS_IF_fToP_fifo_output_reg_first__7_BIT_1_ETC___d61 =
	     3'd6 -
	     (fToP_fifo_output_reg$D_OUT[10] ?
		_0_MINUS_fToP_fifo_output_regD_OUT_BITS_10_TO_7__q1[2:0] :
		IF_fToP_fifo_output_reg_first__7_BIT_9_8_AND_N_ETC___d54) ;
  assign _theResult____h1162 =
	     NOT_NOT_6_MINUS_IF_fToP_fifo_output_reg_first__ETC___d126 &&
	     (IF_6_MINUS_IF_fToP_fifo_output_reg_first__7_BI_ETC___d75 !=
	      3'd0 ||
	      ~k_expo__h1155[0]) &&
	     (_4_MINUS_IF_6_MINUS_IF_fToP_fifo_output_reg_fir_ETC___d99 ==
	      3'd0 ||
	      _4_MINUS_IF_6_MINUS_IF_fToP_fifo_output_reg_fir_ETC___d99 ==
	      3'd1 &&
	      IF_IF_6_MINUS_IF_fToP_fifo_output_reg_first__7_ETC___d136 ||
	      NOT_4_MINUS_IF_6_MINUS_IF_fToP_fifo_output_reg_ETC___d153) ;
  assign _theResult___fst__h2148 =
	     fToP_fifo_output_reg_first__7_BIT_6_3_AND_1_MI_ETC___d66 ?
	       expo_new__h2245 :
	       expo_new__h2214 ;
  assign _theResult___snd_snd__h2297 =
	     fToP_fifo_output_reg_first__7_BIT_6_3_AND_1_MI_ETC___d66 ?
	       shift_new__h2244 :
	       2'd0 ;
  assign a__h1195 =
	     IF_IF_NOT_IF_fToP_fifo_output_reg_first__7_BIT_ETC___d165 +
	     { 6'd0,
	       IF_IF_NOT_IF_fToP_fifo_output_reg_first__7_BIT_ETC___d165 ==
	       7'd0 &&
	       NOT_6_MINUS_IF_fToP_fifo_output_reg_first__7_B_ETC___d198 } ;
  assign b__h1343 = x__h1359 - y__h1360 ;
  assign b__h1469 = fToP_fifo_output_reg$D_OUT[10] ? k__h1529 : k__h1574 ;
  assign b__h2116 =
	     { 6'd0, x__h2119 } <<
	     IF_6_MINUS_IF_fToP_fifo_output_reg_first__7_BI_ETC___d75 ;
  assign b__h3332 = { 6'd0, flag_prev_truncate__h1161 } ;
  assign expo_new__h2214 =
	     _6_MINUS_IF_fToP_fifo_output_reg_first__7_BIT_1_ETC___d61 ==
	     3'd0 &&
	     fToP_fifo_output_reg$D_OUT[6] ;
  assign expo_new__h2245 = x__h2248[0] & fToP_fifo_output_reg$D_OUT[6] ;
  assign fToP_fifo_output_regD_OUT_BITS_5_TO_2__q3 =
	     fToP_fifo_output_reg$D_OUT[5:2] ;
  assign fToP_fifo_output_reg_first__7_BITS_5_TO_2_0_BI_ETC___d109 =
	     fToP_fifo_output_regD_OUT_BITS_5_TO_2__q3[i__h2972] ;
  assign fToP_fifo_output_reg_first__7_BITS_9_TO_7_9_PL_ETC___d50 =
	     fToP_fifo_output_reg$D_OUT[9:7] + 3'd1 ;
  assign fToP_fifo_output_reg_first__7_BIT_0_16_AND_INV_ETC___d119 =
	     fToP_fifo_output_reg$D_OUT[0] & y__h3060 ;
  assign fToP_fifo_output_reg_first__7_BIT_0_16_AND_INV_ETC___d123 =
	     fToP_fifo_output_reg_first__7_BIT_0_16_AND_INV_ETC___d119 &
	     y__h3064 ;
  assign fToP_fifo_output_reg_first__7_BIT_6_3_AND_1_MI_ETC___d66 =
	     fToP_fifo_output_reg$D_OUT[6] & mask_e__h2146 ;
  assign flag_prev_truncate__h1161 =
	     (_4_MINUS_IF_6_MINUS_IF_fToP_fifo_output_reg_fir_ETC___d99 ==
	      3'd0) ?
	       truncated_frac_msb__h1157 :
	       NOT_6_MINUS_IF_fToP_fifo_output_reg_first__7_B_ETC___d113 ;
  assign frac__h354 = { 1'd1, fToP_fifo_stage0_reg$D_OUT[8:5] } ;
  assign i1__h3070 = shift_new0__h1152 - 2'd2 ;
  assign i__h2972 = shift_new0__h1152 - 2'd1 ;
  assign k__h1529 = 7'd1 << x__h1572 ;
  assign k__h1574 = ~x__h1586 ;
  assign k_expo__h1155 =
	     NOT_IF_fToP_fifo_output_reg_first__7_BIT_10_2__ETC___d87 ?
	       7'd127 :
	       IF_fToP_fifo_output_reg_first__7_BIT_10_2_THEN_ETC___d82 ;
  assign mask_e__h2146 =
	     3'd1 -
	     _6_MINUS_IF_fToP_fifo_output_reg_first__7_BIT_1_ETC___d61 ==
	     3'd0 ;
  assign shift_new0__h1152 =
	     (_6_MINUS_IF_fToP_fifo_output_reg_first__7_BIT_1_ETC___d61 ==
	      3'd0) ?
	       _theResult___snd_snd__h2297 :
	       2'd0 ;
  assign shift_new__h2244 = { 1'd0, x__h2863 } ;
  assign truncated_frac_msb__h1157 =
	     (shift_new0__h1152 == 2'd0) ?
	       fToP_fifo_output_reg$D_OUT[1] :
	       fToP_fifo_output_reg_first__7_BITS_5_TO_2_0_BI_ETC___d109 ;
  assign truncated_frac_zero__h355 =
	     fToP_fifo_stage0_reg$D_OUT[4] ?
	       { 27'd0,
		 (frac__h354 &
		  ~(5'h1E <<
		    IF_fToP_fifo_stage0_reg_first_BIT_4_THEN_NEG_f_ETC___d11)) >>
		 0 } ==
	       32'd0 :
	       fToP_fifo_stage0_reg$D_OUT[4:2] == 3'd0 ;
  assign x843_BITS_3_TO_0__q2 = x__h2843[3:0] ;
  assign x__h1359 = k_expo__h1155 + y__h1361 ;
  assign x__h1572 =
	     3'd6 - _0_MINUS_fToP_fifo_output_regD_OUT_BITS_10_TO_7__q1[2:0] ;
  assign x__h1586 =
	     7'd127 >>
	     IF_fToP_fifo_output_reg_first__7_BIT_9_8_AND_N_ETC___d54 ;
  assign x__h2119 =
	     (_6_MINUS_IF_fToP_fifo_output_reg_first__7_BIT_1_ETC___d61 ==
	      3'd0) ?
	       _theResult___fst__h2148 :
	       fToP_fifo_output_reg$D_OUT[6] ;
  assign x__h2248 =
	     2'd1 <<
	     _6_MINUS_IF_fToP_fifo_output_reg_first__7_BIT_1_ETC___d61 ;
  assign x__h2843 =
	     { _6_MINUS_IF_fToP_fifo_output_reg_first__7_BIT_1_ETC___d61 !=
	       3'd0,
	       fToP_fifo_output_reg$D_OUT[5:2] } >>
	     shift_new0__h1152 ;
  assign x__h2863 = 1'd0 - fToP_fifo_output_reg$D_OUT[6] ;
  assign x__h3019 =
	     _4_MINUS_IF_6_MINUS_IF_fToP_fifo_output_reg_fir_ETC___d99 -
	     3'd1 ;
  assign x__h3180 =
	     _4_MINUS_IF_6_MINUS_IF_fToP_fifo_output_reg_fir_ETC___d99 -
	     3'd2 ;
  assign x__h4239 =
	     compute_request_put[30:23] == 8'd255 &&
	     compute_request_put[22:0] != 23'd0 ;
  assign x__h426 = frac__h354 >> x__h486 ;
  assign x__h4402 = compute_request_put[17:0] == 18'd0 ;
  assign x__h486 =
	     IF_fToP_fifo_stage0_reg_first_BIT_4_THEN_NEG_f_ETC___d11 + 3'd1 ;
  assign x__h499 =
	     fToP_fifo_stage0_reg$D_OUT[4] ?
	       frac__h354[x__h486] :
	       fToP_fifo_stage0_reg$D_OUT[4:2] != 3'd0 ||
	       fToP_fifo_stage0_reg$D_OUT[1] ;
  assign x__h576 = x__h588 & truncated_frac_zero__h355 ;
  assign x__h588 = x__h589 & fToP_fifo_stage0_reg$D_OUT[0] ;
  assign x__h589 = ~fToP_fifo_stage0_reg$D_OUT[1] ;
  assign x_frac__h373 =
	     fToP_fifo_stage0_reg$D_OUT[4] ?
	       x__h426[3:0] :
	       ((fToP_fifo_stage0_reg$D_OUT[4:2] == 3'd0) ?
		  fToP_fifo_stage0_reg$D_OUT[8:5] :
		  4'd15) ;
  assign y__h1360 = { 6'd0, _theResult____h1162 } ;
  assign y__h1361 =
	     { 3'd0, x__h2843[3:0] } >>
	     _4_MINUS_IF_6_MINUS_IF_fToP_fifo_output_reg_fir_ETC___d99 ;
  assign y__h3060 = ~fToP_fifo_output_reg$D_OUT[1] ;
  assign y__h3064 =
	     { 28'd0,
	       (fToP_fifo_output_reg$D_OUT[5:2] & ~(4'hE << i1__h3070)) >>
	       0 } ==
	     32'd0 ;
  always@(shift_new0__h1152 or
	  fToP_fifo_output_reg_first__7_BIT_0_16_AND_INV_ETC___d123 or
	  fToP_fifo_output_reg$D_OUT or
	  fToP_fifo_output_reg_first__7_BIT_0_16_AND_INV_ETC___d119)
  begin
    case (shift_new0__h1152)
      2'd0:
	  CASE_shift_new0152_0_fToP_fifo_output_regD_OU_ETC__q4 =
	      fToP_fifo_output_reg$D_OUT[0];
      2'd1:
	  CASE_shift_new0152_0_fToP_fifo_output_regD_OU_ETC__q4 =
	      fToP_fifo_output_reg_first__7_BIT_0_16_AND_INV_ETC___d119;
      default: CASE_shift_new0152_0_fToP_fifo_output_regD_OU_ETC__q4 =
		   fToP_fifo_output_reg_first__7_BIT_0_16_AND_INV_ETC___d123;
    endcase
  end
  always@(shift_new0__h1152 or
	  fToP_fifo_output_reg_first__7_BIT_0_16_AND_INV_ETC___d123 or
	  fToP_fifo_output_reg$D_OUT or
	  fToP_fifo_output_reg_first__7_BIT_0_16_AND_INV_ETC___d119)
  begin
    case (shift_new0__h1152)
      2'd0:
	  CASE_shift_new0152_0_NOT_fToP_fifo_output_reg_ETC__q5 =
	      !fToP_fifo_output_reg$D_OUT[0];
      2'd1:
	  CASE_shift_new0152_0_NOT_fToP_fifo_output_reg_ETC__q5 =
	      !fToP_fifo_output_reg_first__7_BIT_0_16_AND_INV_ETC___d119;
      default: CASE_shift_new0152_0_NOT_fToP_fifo_output_reg_ETC__q5 =
		   !fToP_fifo_output_reg_first__7_BIT_0_16_AND_INV_ETC___d123;
    endcase
  end
  always@(fToP_fifo_output_reg$D_OUT or a__h1195)
  begin
    case (fToP_fifo_output_reg$D_OUT[13:12])
      2'd0:
	  output_regf_out_posit__h1176 =
	      { fToP_fifo_output_reg$D_OUT[14],
		fToP_fifo_output_reg$D_OUT[14] ? 7'd0 - a__h1195 : a__h1195 };
      2'd1: output_regf_out_posit__h1176 = 8'd128;
      default: output_regf_out_posit__h1176 = 8'd0;
    endcase
  end
endmodule  // mkPNE_test

