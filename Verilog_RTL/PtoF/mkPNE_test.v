//
// Generated by Bluespec Compiler (build 16071ee)
//
// On Wed Sep 16 14:08:13 IST 2020
//
//
// Ports:
// Name                         I/O  size props
// RDY_compute_request_put        O     1 reg
// compute_response_get           O    32 reg
// RDY_compute_response_get       O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// compute_request_put            I     8
// EN_compute_request_put         I     1
// EN_compute_response_get        I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPNE_test(CLK,
		  RST_N,

		  compute_request_put,
		  EN_compute_request_put,
		  RDY_compute_request_put,

		  EN_compute_response_get,
		  compute_response_get,
		  RDY_compute_response_get);
  input  CLK;
  input  RST_N;

  // action method compute_request_put
  input  [7 : 0] compute_request_put;
  input  EN_compute_request_put;
  output RDY_compute_request_put;

  // actionvalue method compute_response_get
  input  EN_compute_response_get;
  output [31 : 0] compute_response_get;
  output RDY_compute_response_get;

  // signals for module outputs
  wire [31 : 0] compute_response_get;
  wire RDY_compute_request_put, RDY_compute_response_get;

  // ports of submodule extracter_fifo_output_reg
  wire [11 : 0] extracter_fifo_output_reg$D_IN,
		extracter_fifo_output_reg$D_OUT;
  wire extracter_fifo_output_reg$CLR,
       extracter_fifo_output_reg$DEQ,
       extracter_fifo_output_reg$EMPTY_N,
       extracter_fifo_output_reg$ENQ,
       extracter_fifo_output_reg$FULL_N;

  // ports of submodule extracter_fifo_stage0_reg
  wire [9 : 0] extracter_fifo_stage0_reg$D_IN;
  wire extracter_fifo_stage0_reg$CLR,
       extracter_fifo_stage0_reg$DEQ,
       extracter_fifo_stage0_reg$ENQ;

  // ports of submodule extracter_fifo_stage1_reg
  wire [14 : 0] extracter_fifo_stage1_reg$D_IN;
  wire extracter_fifo_stage1_reg$CLR,
       extracter_fifo_stage1_reg$DEQ,
       extracter_fifo_stage1_reg$ENQ;

  // ports of submodule extracter_fifo_stage2_reg
  wire [12 : 0] extracter_fifo_stage2_reg$D_IN;
  wire extracter_fifo_stage2_reg$CLR,
       extracter_fifo_stage2_reg$DEQ,
       extracter_fifo_stage2_reg$ENQ;

  // ports of submodule ffO
  wire [31 : 0] ffO$D_IN, ffO$D_OUT;
  wire ffO$CLR, ffO$DEQ, ffO$EMPTY_N, ffO$ENQ, ffO$FULL_N;

  // ports of submodule ptoF_fifo_output_reg
  reg [31 : 0] ptoF_fifo_output_reg$D_IN;
  wire [31 : 0] ptoF_fifo_output_reg$D_OUT;
  wire ptoF_fifo_output_reg$CLR,
       ptoF_fifo_output_reg$DEQ,
       ptoF_fifo_output_reg$EMPTY_N,
       ptoF_fifo_output_reg$ENQ,
       ptoF_fifo_output_reg$FULL_N;

  // ports of submodule ptoF_fifo_stage0_reg
  wire [41 : 0] ptoF_fifo_stage0_reg$D_IN, ptoF_fifo_stage0_reg$D_OUT;
  wire ptoF_fifo_stage0_reg$CLR,
       ptoF_fifo_stage0_reg$DEQ,
       ptoF_fifo_stage0_reg$EMPTY_N,
       ptoF_fifo_stage0_reg$ENQ,
       ptoF_fifo_stage0_reg$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_ptoF_stage_2,
       CAN_FIRE_RL_rl_connect0,
       CAN_FIRE_RL_rl_out,
       CAN_FIRE_compute_request_put,
       CAN_FIRE_compute_response_get,
       WILL_FIRE_RL_ptoF_stage_2,
       WILL_FIRE_RL_rl_connect0,
       WILL_FIRE_RL_rl_out,
       WILL_FIRE_compute_request_put,
       WILL_FIRE_compute_response_get;

  // remaining internal signals
  reg [3 : 0] x__h4079;
  wire [31 : 0] float_no__h751;
  wire [23 : 0] frac__h744, x__h832;
  wire [22 : 0] frac_f__h750, stage0_regf_frac__h1219;
  wire [8 : 0] IF_compute_request_put_BITS_6_TO_0_2_EQ_0_3_AN_ETC___d182,
	       x__h802;
  wire [7 : 0] IF_SEXT_extracter_fifo_output_reg_first__3_BIT_ETC___d61,
	       SEXT_extracter_fifo_output_reg_first__3_BITS_8_ETC___d57,
	       SEXT_extracter_fifo_output_reg_first__3_BITS_8_ETC___d69,
	       SEXT_extracter_fifo_output_reg_first__3_BITS_8_ETC__q6,
	       ptoF_fifo_stage0_regD_OUT_BITS_38_TO_31__q2;
  wire [6 : 0] INV_new_inp470__q1, new_inp__h1470;
  wire [5 : 0] IF_SEXT_extracter_fifo_output_reg_first__3_BIT_ETC___d75,
	       IF_ptoF_fifo_stage0_reg_first_BIT_7_3_THEN_NEG_ETC___d18,
	       x__h892;
  wire [4 : 0] IF_SEXT_extracter_fifo_output_reg_first__3_BIT_ETC__q7,
	       IF_SEXT_extracter_fifo_output_reg_first__3_BIT_ETC__q8,
	       SEXT_IF_IF_compute_request_put_BIT_7_4_THEN_0__ETC___d128,
	       SEXT_IF_new_inp470_BIT_6_THEN_b819_ELSE_b821__q5,
	       extracter_fifo_output_regD_OUT_BITS_8_TO_4__q3;
  wire [3 : 0] IF_new_inp470_BIT_6_THEN_b819_ELSE_b821__q4,
	       b__h1819,
	       b__h1821,
	       frac__h1478,
	       x__h2840;
  wire [2 : 0] IF_IF_compute_request_put_BIT_7_4_THEN_0_MINUS_ETC___d157,
	       x__h1829,
	       x__h2847,
	       x__h4030;
  wire SEXT_extracter_fifo_output_reg_first__3_BITS_8_ETC___d58,
       SEXT_extracter_fifo_output_reg_first__3_BITS_8_ETC___d59,
       add_round__h752,
       expo__h1477,
       truncated_frac_msb__h746,
       truncated_frac_zero__h745,
       x__h919,
       x__h920,
       x__h940,
       y__h941;

  // action method compute_request_put
  assign RDY_compute_request_put = extracter_fifo_output_reg$FULL_N ;
  assign CAN_FIRE_compute_request_put = extracter_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_compute_request_put = EN_compute_request_put ;

  // actionvalue method compute_response_get
  assign compute_response_get = ffO$D_OUT ;
  assign RDY_compute_response_get = ffO$EMPTY_N ;
  assign CAN_FIRE_compute_response_get = ffO$EMPTY_N ;
  assign WILL_FIRE_compute_response_get = EN_compute_response_get ;

  // submodule extracter_fifo_output_reg
  FIFO2 #(.width(32'd12),
	  .guarded(32'd1)) extracter_fifo_output_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(extracter_fifo_output_reg$D_IN),
						     .ENQ(extracter_fifo_output_reg$ENQ),
						     .DEQ(extracter_fifo_output_reg$DEQ),
						     .CLR(extracter_fifo_output_reg$CLR),
						     .D_OUT(extracter_fifo_output_reg$D_OUT),
						     .FULL_N(extracter_fifo_output_reg$FULL_N),
						     .EMPTY_N(extracter_fifo_output_reg$EMPTY_N));

  // submodule extracter_fifo_stage0_reg
  FIFO2 #(.width(32'd10),
	  .guarded(32'd1)) extracter_fifo_stage0_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(extracter_fifo_stage0_reg$D_IN),
						     .ENQ(extracter_fifo_stage0_reg$ENQ),
						     .DEQ(extracter_fifo_stage0_reg$DEQ),
						     .CLR(extracter_fifo_stage0_reg$CLR),
						     .D_OUT(),
						     .FULL_N(),
						     .EMPTY_N());

  // submodule extracter_fifo_stage1_reg
  FIFO2 #(.width(32'd15),
	  .guarded(32'd1)) extracter_fifo_stage1_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(extracter_fifo_stage1_reg$D_IN),
						     .ENQ(extracter_fifo_stage1_reg$ENQ),
						     .DEQ(extracter_fifo_stage1_reg$DEQ),
						     .CLR(extracter_fifo_stage1_reg$CLR),
						     .D_OUT(),
						     .FULL_N(),
						     .EMPTY_N());

  // submodule extracter_fifo_stage2_reg
  FIFO2 #(.width(32'd13),
	  .guarded(32'd1)) extracter_fifo_stage2_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(extracter_fifo_stage2_reg$D_IN),
						     .ENQ(extracter_fifo_stage2_reg$ENQ),
						     .DEQ(extracter_fifo_stage2_reg$DEQ),
						     .CLR(extracter_fifo_stage2_reg$CLR),
						     .D_OUT(),
						     .FULL_N(),
						     .EMPTY_N());

  // submodule ffO
  FIFO2 #(.width(32'd32), .guarded(32'd1)) ffO(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(ffO$D_IN),
					       .ENQ(ffO$ENQ),
					       .DEQ(ffO$DEQ),
					       .CLR(ffO$CLR),
					       .D_OUT(ffO$D_OUT),
					       .FULL_N(ffO$FULL_N),
					       .EMPTY_N(ffO$EMPTY_N));

  // submodule ptoF_fifo_output_reg
  FIFO2 #(.width(32'd32), .guarded(32'd1)) ptoF_fifo_output_reg(.RST(RST_N),
								.CLK(CLK),
								.D_IN(ptoF_fifo_output_reg$D_IN),
								.ENQ(ptoF_fifo_output_reg$ENQ),
								.DEQ(ptoF_fifo_output_reg$DEQ),
								.CLR(ptoF_fifo_output_reg$CLR),
								.D_OUT(ptoF_fifo_output_reg$D_OUT),
								.FULL_N(ptoF_fifo_output_reg$FULL_N),
								.EMPTY_N(ptoF_fifo_output_reg$EMPTY_N));

  // submodule ptoF_fifo_stage0_reg
  FIFO2 #(.width(32'd42), .guarded(32'd1)) ptoF_fifo_stage0_reg(.RST(RST_N),
								.CLK(CLK),
								.D_IN(ptoF_fifo_stage0_reg$D_IN),
								.ENQ(ptoF_fifo_stage0_reg$ENQ),
								.DEQ(ptoF_fifo_stage0_reg$DEQ),
								.CLR(ptoF_fifo_stage0_reg$CLR),
								.D_OUT(ptoF_fifo_stage0_reg$D_OUT),
								.FULL_N(ptoF_fifo_stage0_reg$FULL_N),
								.EMPTY_N(ptoF_fifo_stage0_reg$EMPTY_N));

  // rule RL_rl_connect0
  assign CAN_FIRE_RL_rl_connect0 =
	     extracter_fifo_output_reg$EMPTY_N &&
	     ptoF_fifo_stage0_reg$FULL_N ;
  assign WILL_FIRE_RL_rl_connect0 = CAN_FIRE_RL_rl_connect0 ;

  // rule RL_rl_out
  assign CAN_FIRE_RL_rl_out = ptoF_fifo_output_reg$EMPTY_N && ffO$FULL_N ;
  assign WILL_FIRE_RL_rl_out = CAN_FIRE_RL_rl_out ;

  // rule RL_ptoF_stage_2
  assign CAN_FIRE_RL_ptoF_stage_2 =
	     ptoF_fifo_stage0_reg$EMPTY_N && ptoF_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_ptoF_stage_2 = CAN_FIRE_RL_ptoF_stage_2 ;

  // submodule extracter_fifo_output_reg
  assign extracter_fifo_output_reg$D_IN =
	     { (compute_request_put[6:0] == 7'd0 && !compute_request_put[7]) ?
		 2'd2 :
		 ((compute_request_put[6:0] == 7'd0 &&
		   compute_request_put[7]) ?
		    2'd1 :
		    2'd0),
	       compute_request_put[7],
	       IF_compute_request_put_BITS_6_TO_0_2_EQ_0_3_AN_ETC___d182 } ;
  assign extracter_fifo_output_reg$ENQ = EN_compute_request_put ;
  assign extracter_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_connect0 ;
  assign extracter_fifo_output_reg$CLR = 1'b0 ;

  // submodule extracter_fifo_stage0_reg
  assign extracter_fifo_stage0_reg$D_IN = 10'h0 ;
  assign extracter_fifo_stage0_reg$ENQ = 1'b0 ;
  assign extracter_fifo_stage0_reg$DEQ = 1'b0 ;
  assign extracter_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule extracter_fifo_stage1_reg
  assign extracter_fifo_stage1_reg$D_IN = 15'h0 ;
  assign extracter_fifo_stage1_reg$ENQ = 1'b0 ;
  assign extracter_fifo_stage1_reg$DEQ = 1'b0 ;
  assign extracter_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule extracter_fifo_stage2_reg
  assign extracter_fifo_stage2_reg$D_IN = 13'h0 ;
  assign extracter_fifo_stage2_reg$ENQ = 1'b0 ;
  assign extracter_fifo_stage2_reg$DEQ = 1'b0 ;
  assign extracter_fifo_stage2_reg$CLR = 1'b0 ;

  // submodule ffO
  assign ffO$D_IN = ptoF_fifo_output_reg$D_OUT ;
  assign ffO$ENQ = CAN_FIRE_RL_rl_out ;
  assign ffO$DEQ = EN_compute_response_get ;
  assign ffO$CLR = 1'b0 ;

  // submodule ptoF_fifo_output_reg
  always@(ptoF_fifo_stage0_reg$D_OUT or float_no__h751 or add_round__h752)
  begin
    case (ptoF_fifo_stage0_reg$D_OUT[40:39])
      2'd1: ptoF_fifo_output_reg$D_IN = 32'hFF800000;
      2'd2: ptoF_fifo_output_reg$D_IN = 32'd0;
      default: ptoF_fifo_output_reg$D_IN =
		   float_no__h751 + { 31'd0, add_round__h752 };
    endcase
  end
  assign ptoF_fifo_output_reg$ENQ = CAN_FIRE_RL_ptoF_stage_2 ;
  assign ptoF_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_out ;
  assign ptoF_fifo_output_reg$CLR = 1'b0 ;

  // submodule ptoF_fifo_stage0_reg
  assign ptoF_fifo_stage0_reg$D_IN =
	     { extracter_fifo_output_reg$D_OUT[9],
	       extracter_fifo_output_reg$D_OUT[11:10],
	       IF_SEXT_extracter_fifo_output_reg_first__3_BIT_ETC___d61,
	       stage0_regf_frac__h1219,
	       IF_SEXT_extracter_fifo_output_reg_first__3_BIT_ETC___d75,
	       2'd1 } ;
  assign ptoF_fifo_stage0_reg$ENQ = CAN_FIRE_RL_rl_connect0 ;
  assign ptoF_fifo_stage0_reg$DEQ = CAN_FIRE_RL_ptoF_stage_2 ;
  assign ptoF_fifo_stage0_reg$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_compute_request_put_BIT_7_4_THEN_0_MINUS_ETC___d157 =
	     new_inp__h1470[6] ?
	       ((!INV_new_inp470__q1[6] && !INV_new_inp470__q1[5] &&
		 !INV_new_inp470__q1[4] &&
		 !INV_new_inp470__q1[3] &&
		 !INV_new_inp470__q1[2] &&
		 !INV_new_inp470__q1[1] &&
		 !INV_new_inp470__q1[0]) ?
		  3'd7 :
		  3'd6) -
	       x__h1829 :
	       ((!new_inp__h1470[5] && !new_inp__h1470[4] &&
		 !new_inp__h1470[3] &&
		 !new_inp__h1470[2] &&
		 !new_inp__h1470[1] &&
		 !new_inp__h1470[0]) ?
		  3'd7 :
		  3'd6) -
	       x__h2847 ;
  assign IF_SEXT_extracter_fifo_output_reg_first__3_BIT_ETC___d61 =
	     SEXT_extracter_fifo_output_reg_first__3_BITS_8_ETC___d58 ?
	       8'd129 :
	       (SEXT_extracter_fifo_output_reg_first__3_BITS_8_ETC___d59 ?
		  SEXT_extracter_fifo_output_reg_first__3_BITS_8_ETC___d57 :
		  8'd127) ;
  assign IF_SEXT_extracter_fifo_output_reg_first__3_BIT_ETC___d75 =
	     SEXT_extracter_fifo_output_reg_first__3_BITS_8_ETC___d58 ?
	       { IF_SEXT_extracter_fifo_output_reg_first__3_BIT_ETC__q7[4],
		 IF_SEXT_extracter_fifo_output_reg_first__3_BIT_ETC__q7 } :
	       (SEXT_extracter_fifo_output_reg_first__3_BITS_8_ETC___d59 ?
		  6'd0 :
		  { IF_SEXT_extracter_fifo_output_reg_first__3_BIT_ETC__q8[4],
		    IF_SEXT_extracter_fifo_output_reg_first__3_BIT_ETC__q8 }) ;
  assign IF_SEXT_extracter_fifo_output_reg_first__3_BIT_ETC__q7 =
	     ((SEXT_extracter_fifo_output_reg_first__3_BITS_8_ETC__q6[4:0] ^
	       5'h10) <=
	      5'd17) ?
	       5'd1 :
	       SEXT_extracter_fifo_output_reg_first__3_BITS_8_ETC__q6[4:0] ;
  assign IF_SEXT_extracter_fifo_output_reg_first__3_BIT_ETC__q8 =
	     SEXT_extracter_fifo_output_reg_first__3_BITS_8_ETC___d69[4] ?
	       SEXT_extracter_fifo_output_reg_first__3_BITS_8_ETC___d69[4:0] :
	       5'd31 ;
  assign IF_compute_request_put_BITS_6_TO_0_2_EQ_0_3_AN_ETC___d182 =
	     (compute_request_put[6:0] == 7'd0 && !compute_request_put[7]) ?
	       9'd0 :
	       { SEXT_IF_IF_compute_request_put_BIT_7_4_THEN_0__ETC___d128 +
		 { 4'd0, expo__h1477 },
		 frac__h1478 } ;
  assign IF_new_inp470_BIT_6_THEN_b819_ELSE_b821__q4 =
	     new_inp__h1470[6] ? b__h1819 : b__h1821 ;
  assign IF_ptoF_fifo_stage0_reg_first_BIT_7_3_THEN_NEG_ETC___d18 =
	     ptoF_fifo_stage0_reg$D_OUT[7] ?
	       -ptoF_fifo_stage0_reg$D_OUT[7:2] :
	       ptoF_fifo_stage0_reg$D_OUT[7:2] ;
  assign INV_new_inp470__q1 = ~new_inp__h1470 ;
  assign SEXT_IF_IF_compute_request_put_BIT_7_4_THEN_0__ETC___d128 =
	     { SEXT_IF_new_inp470_BIT_6_THEN_b819_ELSE_b821__q5[3:0], 1'd0 } ;
  assign SEXT_IF_new_inp470_BIT_6_THEN_b819_ELSE_b821__q5 =
	     { IF_new_inp470_BIT_6_THEN_b819_ELSE_b821__q4[3],
	       IF_new_inp470_BIT_6_THEN_b819_ELSE_b821__q4 } ;
  assign SEXT_extracter_fifo_output_reg_first__3_BITS_8_ETC___d57 =
	     { {3{extracter_fifo_output_regD_OUT_BITS_8_TO_4__q3[4]}},
	       extracter_fifo_output_regD_OUT_BITS_8_TO_4__q3 } ;
  assign SEXT_extracter_fifo_output_reg_first__3_BITS_8_ETC___d58 =
	     (SEXT_extracter_fifo_output_reg_first__3_BITS_8_ETC___d57 ^
	      8'h80) <
	     8'd1 ;
  assign SEXT_extracter_fifo_output_reg_first__3_BITS_8_ETC___d59 =
	     (SEXT_extracter_fifo_output_reg_first__3_BITS_8_ETC___d57 ^
	      8'h80) <=
	     8'd255 ;
  assign SEXT_extracter_fifo_output_reg_first__3_BITS_8_ETC___d69 =
	     SEXT_extracter_fifo_output_reg_first__3_BITS_8_ETC___d57 -
	     8'd127 ;
  assign SEXT_extracter_fifo_output_reg_first__3_BITS_8_ETC__q6 =
	     SEXT_extracter_fifo_output_reg_first__3_BITS_8_ETC___d57 -
	     8'd129 ;
  assign add_round__h752 = x__h919 & truncated_frac_msb__h746 ;
  assign b__h1819 = { 1'd0, x__h1829 } - 4'd1 ;
  assign b__h1821 = 4'd0 - x__h2840 ;
  assign expo__h1477 =
	     (IF_IF_compute_request_put_BIT_7_4_THEN_0_MINUS_ETC___d157 ==
	      3'd0) ?
	       3'd1 -
	       IF_IF_compute_request_put_BIT_7_4_THEN_0_MINUS_ETC___d157 ==
	       3'd0 &&
	       new_inp__h1470[0] :
	       new_inp__h1470[x__h4030] ;
  assign extracter_fifo_output_regD_OUT_BITS_8_TO_4__q3 =
	     extracter_fifo_output_reg$D_OUT[8:4] ;
  assign float_no__h751 =
	     { ptoF_fifo_stage0_reg$D_OUT[41], x__h802[7:0], frac_f__h750 } ;
  assign frac__h1478 = new_inp__h1470[3:0] << x__h4079 ;
  assign frac__h744 = { 1'd1, ptoF_fifo_stage0_reg$D_OUT[30:8] } ;
  assign frac_f__h750 =
	     ptoF_fifo_stage0_reg$D_OUT[7] ?
	       x__h832[22:0] :
	       ((ptoF_fifo_stage0_reg$D_OUT[7:2] == 6'd0) ?
		  ptoF_fifo_stage0_reg$D_OUT[30:8] :
		  23'd8388607) ;
  assign new_inp__h1470 =
	     compute_request_put[7] ?
	       7'd0 - compute_request_put[6:0] :
	       compute_request_put[6:0] ;
  assign ptoF_fifo_stage0_regD_OUT_BITS_38_TO_31__q2 =
	     ptoF_fifo_stage0_reg$D_OUT[38:31] ;
  assign stage0_regf_frac__h1219 =
	     { extracter_fifo_output_reg$D_OUT[3:0], 19'd0 } ;
  assign truncated_frac_msb__h746 =
	     ptoF_fifo_stage0_reg$D_OUT[7] ?
	       frac__h744[x__h892[4:0]] :
	       ptoF_fifo_stage0_reg$D_OUT[7:2] != 6'd0 ||
	       ptoF_fifo_stage0_reg$D_OUT[1] ;
  assign truncated_frac_zero__h745 =
	     ptoF_fifo_stage0_reg$D_OUT[7] ?
	       x__h940 & y__h941 :
	       ptoF_fifo_stage0_reg$D_OUT[7:2] == 6'd0 &&
	       ptoF_fifo_stage0_reg$D_OUT[0] ;
  assign x__h1829 =
	     INV_new_inp470__q1[6] ?
	       3'd0 :
	       (INV_new_inp470__q1[5] ?
		  3'd1 :
		  (INV_new_inp470__q1[4] ?
		     3'd2 :
		     (INV_new_inp470__q1[3] ?
			3'd3 :
			(INV_new_inp470__q1[2] ?
			   3'd4 :
			   (INV_new_inp470__q1[1] ?
			      3'd5 :
			      (INV_new_inp470__q1[0] ? 3'd6 : 3'd7)))))) ;
  assign x__h2840 = { 1'd0, x__h2847 } ;
  assign x__h2847 =
	     new_inp__h1470[6] ?
	       3'd0 :
	       (new_inp__h1470[5] ?
		  3'd1 :
		  (new_inp__h1470[4] ?
		     3'd2 :
		     (new_inp__h1470[3] ?
			3'd3 :
			(new_inp__h1470[2] ?
			   3'd4 :
			   (new_inp__h1470[1] ?
			      3'd5 :
			      (new_inp__h1470[0] ? 3'd6 : 3'd7)))))) ;
  assign x__h4030 =
	     IF_IF_compute_request_put_BIT_7_4_THEN_0_MINUS_ETC___d157 -
	     3'd1 ;
  assign x__h802 =
	     { ptoF_fifo_stage0_regD_OUT_BITS_38_TO_31__q2[7],
	       ptoF_fifo_stage0_regD_OUT_BITS_38_TO_31__q2 } +
	     9'd127 ;
  assign x__h832 = frac__h744 >> x__h892 ;
  assign x__h892 =
	     IF_ptoF_fifo_stage0_reg_first_BIT_7_3_THEN_NEG_ETC___d18 + 6'd1 ;
  assign x__h919 = x__h920 | frac_f__h750[0] ;
  assign x__h920 = ~truncated_frac_zero__h745 ;
  assign x__h940 = ~ptoF_fifo_stage0_reg$D_OUT[1] ;
  assign y__h941 =
	     { 8'd0,
	       (frac__h744 &
		~(24'hFFFFFE <<
		  IF_ptoF_fifo_stage0_reg_first_BIT_7_3_THEN_NEG_ETC___d18[4:0])) >>
	       0 } ==
	     32'd0 ;
  always@(IF_IF_compute_request_put_BIT_7_4_THEN_0_MINUS_ETC___d157)
  begin
    case (IF_IF_compute_request_put_BIT_7_4_THEN_0_MINUS_ETC___d157)
      3'd2: x__h4079 = 4'd3;
      3'd3: x__h4079 = 4'd2;
      3'd4: x__h4079 = 4'd1;
      3'd5: x__h4079 = 4'd0;
      default: x__h4079 =
		   (IF_IF_compute_request_put_BIT_7_4_THEN_0_MINUS_ETC___d157 <=
		    3'd1) ?
		     4'd4 :
		     4'd0;
    endcase
  end
endmodule  // mkPNE_test

