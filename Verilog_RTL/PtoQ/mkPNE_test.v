//
// Generated by Bluespec Compiler (build 16071ee)
//
// On Wed Sep 16 14:08:07 IST 2020
//
//
// Ports:
// Name                         I/O  size props
// RDY_compute_request_put        O     1 reg
// compute_response_get           O    32 reg
// RDY_compute_response_get       O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// compute_request_put            I     8
// EN_compute_request_put         I     1
// EN_compute_response_get        I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPNE_test(CLK,
		  RST_N,

		  compute_request_put,
		  EN_compute_request_put,
		  RDY_compute_request_put,

		  EN_compute_response_get,
		  compute_response_get,
		  RDY_compute_response_get);
  input  CLK;
  input  RST_N;

  // action method compute_request_put
  input  [7 : 0] compute_request_put;
  input  EN_compute_request_put;
  output RDY_compute_request_put;

  // actionvalue method compute_response_get
  input  EN_compute_response_get;
  output [31 : 0] compute_response_get;
  output RDY_compute_response_get;

  // signals for module outputs
  wire [31 : 0] compute_response_get;
  wire RDY_compute_request_put, RDY_compute_response_get;

  // ports of submodule extracter_fifo_output_reg
  wire [11 : 0] extracter_fifo_output_reg$D_IN,
		extracter_fifo_output_reg$D_OUT;
  wire extracter_fifo_output_reg$CLR,
       extracter_fifo_output_reg$DEQ,
       extracter_fifo_output_reg$EMPTY_N,
       extracter_fifo_output_reg$ENQ,
       extracter_fifo_output_reg$FULL_N;

  // ports of submodule extracter_fifo_stage0_reg
  wire [9 : 0] extracter_fifo_stage0_reg$D_IN;
  wire extracter_fifo_stage0_reg$CLR,
       extracter_fifo_stage0_reg$DEQ,
       extracter_fifo_stage0_reg$ENQ;

  // ports of submodule extracter_fifo_stage1_reg
  wire [14 : 0] extracter_fifo_stage1_reg$D_IN;
  wire extracter_fifo_stage1_reg$CLR,
       extracter_fifo_stage1_reg$DEQ,
       extracter_fifo_stage1_reg$ENQ;

  // ports of submodule extracter_fifo_stage2_reg
  wire [12 : 0] extracter_fifo_stage2_reg$D_IN;
  wire extracter_fifo_stage2_reg$CLR,
       extracter_fifo_stage2_reg$DEQ,
       extracter_fifo_stage2_reg$ENQ;

  // ports of submodule ffO
  wire [31 : 0] ffO$D_IN, ffO$D_OUT;
  wire ffO$CLR, ffO$DEQ, ffO$EMPTY_N, ffO$ENQ, ffO$FULL_N;

  // ports of submodule positToquire_fifo_output_reg
  wire [31 : 0] positToquire_fifo_output_reg$D_IN,
		positToquire_fifo_output_reg$D_OUT;
  wire positToquire_fifo_output_reg$CLR,
       positToquire_fifo_output_reg$DEQ,
       positToquire_fifo_output_reg$EMPTY_N,
       positToquire_fifo_output_reg$ENQ,
       positToquire_fifo_output_reg$FULL_N;

  // ports of submodule positToquire_fifo_stage0_reg
  wire [11 : 0] positToquire_fifo_stage0_reg$D_IN;
  wire positToquire_fifo_stage0_reg$CLR,
       positToquire_fifo_stage0_reg$DEQ,
       positToquire_fifo_stage0_reg$ENQ;

  // ports of submodule positToquire_fifo_stage1_reg
  wire [26 : 0] positToquire_fifo_stage1_reg$D_IN,
		positToquire_fifo_stage1_reg$D_OUT;
  wire positToquire_fifo_stage1_reg$CLR,
       positToquire_fifo_stage1_reg$DEQ,
       positToquire_fifo_stage1_reg$EMPTY_N,
       positToquire_fifo_stage1_reg$ENQ,
       positToquire_fifo_stage1_reg$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_positToquire_stage_2,
       CAN_FIRE_RL_rl_connect0,
       CAN_FIRE_RL_rl_out,
       CAN_FIRE_compute_request_put,
       CAN_FIRE_compute_response_get,
       WILL_FIRE_RL_positToquire_stage_2,
       WILL_FIRE_RL_rl_connect0,
       WILL_FIRE_RL_rl_out,
       WILL_FIRE_compute_request_put,
       WILL_FIRE_compute_response_get;

  // remaining internal signals
  reg [3 : 0] x__h3760;
  wire [31 : 0] twos_complement_carry_int_frac__h864;
  wire [23 : 0] f_new__h1000, int_frac__h986;
  wire [8 : 0] IF_compute_request_put_BITS_6_TO_0_2_EQ_0_3_AN_ETC___d132;
  wire [6 : 0] INV_new_inp145__q1, new_inp__h1145;
  wire [4 : 0] SEXT_IF_IF_compute_request_put_BIT_7_4_THEN_0__ETC___d78,
	       SEXT_IF_new_inp145_BIT_6_THEN_b500_ELSE_b502__q3,
	       x__h1047;
  wire [3 : 0] IF_new_inp145_BIT_6_THEN_b500_ELSE_b502__q2,
	       b__h1500,
	       b__h1502,
	       frac__h1153,
	       x__h2521;
  wire [2 : 0] IF_IF_compute_request_put_BIT_7_4_THEN_0_MINUS_ETC___d107,
	       x__h1510,
	       x__h2528,
	       x__h3711;
  wire expo__h1152;

  // action method compute_request_put
  assign RDY_compute_request_put = extracter_fifo_output_reg$FULL_N ;
  assign CAN_FIRE_compute_request_put = extracter_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_compute_request_put = EN_compute_request_put ;

  // actionvalue method compute_response_get
  assign compute_response_get = ffO$D_OUT ;
  assign RDY_compute_response_get = ffO$EMPTY_N ;
  assign CAN_FIRE_compute_response_get = ffO$EMPTY_N ;
  assign WILL_FIRE_compute_response_get = EN_compute_response_get ;

  // submodule extracter_fifo_output_reg
  FIFO2 #(.width(32'd12),
	  .guarded(32'd1)) extracter_fifo_output_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(extracter_fifo_output_reg$D_IN),
						     .ENQ(extracter_fifo_output_reg$ENQ),
						     .DEQ(extracter_fifo_output_reg$DEQ),
						     .CLR(extracter_fifo_output_reg$CLR),
						     .D_OUT(extracter_fifo_output_reg$D_OUT),
						     .FULL_N(extracter_fifo_output_reg$FULL_N),
						     .EMPTY_N(extracter_fifo_output_reg$EMPTY_N));

  // submodule extracter_fifo_stage0_reg
  FIFO2 #(.width(32'd10),
	  .guarded(32'd1)) extracter_fifo_stage0_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(extracter_fifo_stage0_reg$D_IN),
						     .ENQ(extracter_fifo_stage0_reg$ENQ),
						     .DEQ(extracter_fifo_stage0_reg$DEQ),
						     .CLR(extracter_fifo_stage0_reg$CLR),
						     .D_OUT(),
						     .FULL_N(),
						     .EMPTY_N());

  // submodule extracter_fifo_stage1_reg
  FIFO2 #(.width(32'd15),
	  .guarded(32'd1)) extracter_fifo_stage1_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(extracter_fifo_stage1_reg$D_IN),
						     .ENQ(extracter_fifo_stage1_reg$ENQ),
						     .DEQ(extracter_fifo_stage1_reg$DEQ),
						     .CLR(extracter_fifo_stage1_reg$CLR),
						     .D_OUT(),
						     .FULL_N(),
						     .EMPTY_N());

  // submodule extracter_fifo_stage2_reg
  FIFO2 #(.width(32'd13),
	  .guarded(32'd1)) extracter_fifo_stage2_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(extracter_fifo_stage2_reg$D_IN),
						     .ENQ(extracter_fifo_stage2_reg$ENQ),
						     .DEQ(extracter_fifo_stage2_reg$DEQ),
						     .CLR(extracter_fifo_stage2_reg$CLR),
						     .D_OUT(),
						     .FULL_N(),
						     .EMPTY_N());

  // submodule ffO
  FIFO2 #(.width(32'd32), .guarded(32'd1)) ffO(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(ffO$D_IN),
					       .ENQ(ffO$ENQ),
					       .DEQ(ffO$DEQ),
					       .CLR(ffO$CLR),
					       .D_OUT(ffO$D_OUT),
					       .FULL_N(ffO$FULL_N),
					       .EMPTY_N(ffO$EMPTY_N));

  // submodule positToquire_fifo_output_reg
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) positToquire_fifo_output_reg(.RST(RST_N),
							.CLK(CLK),
							.D_IN(positToquire_fifo_output_reg$D_IN),
							.ENQ(positToquire_fifo_output_reg$ENQ),
							.DEQ(positToquire_fifo_output_reg$DEQ),
							.CLR(positToquire_fifo_output_reg$CLR),
							.D_OUT(positToquire_fifo_output_reg$D_OUT),
							.FULL_N(positToquire_fifo_output_reg$FULL_N),
							.EMPTY_N(positToquire_fifo_output_reg$EMPTY_N));

  // submodule positToquire_fifo_stage0_reg
  FIFO2 #(.width(32'd12),
	  .guarded(32'd1)) positToquire_fifo_stage0_reg(.RST(RST_N),
							.CLK(CLK),
							.D_IN(positToquire_fifo_stage0_reg$D_IN),
							.ENQ(positToquire_fifo_stage0_reg$ENQ),
							.DEQ(positToquire_fifo_stage0_reg$DEQ),
							.CLR(positToquire_fifo_stage0_reg$CLR),
							.D_OUT(),
							.FULL_N(),
							.EMPTY_N());

  // submodule positToquire_fifo_stage1_reg
  FIFO2 #(.width(32'd27),
	  .guarded(32'd1)) positToquire_fifo_stage1_reg(.RST(RST_N),
							.CLK(CLK),
							.D_IN(positToquire_fifo_stage1_reg$D_IN),
							.ENQ(positToquire_fifo_stage1_reg$ENQ),
							.DEQ(positToquire_fifo_stage1_reg$DEQ),
							.CLR(positToquire_fifo_stage1_reg$CLR),
							.D_OUT(positToquire_fifo_stage1_reg$D_OUT),
							.FULL_N(positToquire_fifo_stage1_reg$FULL_N),
							.EMPTY_N(positToquire_fifo_stage1_reg$EMPTY_N));

  // rule RL_rl_connect0
  assign CAN_FIRE_RL_rl_connect0 =
	     extracter_fifo_output_reg$EMPTY_N &&
	     positToquire_fifo_stage1_reg$FULL_N ;
  assign WILL_FIRE_RL_rl_connect0 = CAN_FIRE_RL_rl_connect0 ;

  // rule RL_rl_out
  assign CAN_FIRE_RL_rl_out =
	     positToquire_fifo_output_reg$EMPTY_N && ffO$FULL_N ;
  assign WILL_FIRE_RL_rl_out = CAN_FIRE_RL_rl_out ;

  // rule RL_positToquire_stage_2
  assign CAN_FIRE_RL_positToquire_stage_2 =
	     positToquire_fifo_stage1_reg$EMPTY_N &&
	     positToquire_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_positToquire_stage_2 =
	     CAN_FIRE_RL_positToquire_stage_2 ;

  // submodule extracter_fifo_output_reg
  assign extracter_fifo_output_reg$D_IN =
	     { (compute_request_put[6:0] == 7'd0 && !compute_request_put[7]) ?
		 2'd2 :
		 ((compute_request_put[6:0] == 7'd0 &&
		   compute_request_put[7]) ?
		    2'd1 :
		    2'd0),
	       compute_request_put[7],
	       IF_compute_request_put_BITS_6_TO_0_2_EQ_0_3_AN_ETC___d132 } ;
  assign extracter_fifo_output_reg$ENQ = EN_compute_request_put ;
  assign extracter_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_connect0 ;
  assign extracter_fifo_output_reg$CLR = 1'b0 ;

  // submodule extracter_fifo_stage0_reg
  assign extracter_fifo_stage0_reg$D_IN = 10'h0 ;
  assign extracter_fifo_stage0_reg$ENQ = 1'b0 ;
  assign extracter_fifo_stage0_reg$DEQ = 1'b0 ;
  assign extracter_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule extracter_fifo_stage1_reg
  assign extracter_fifo_stage1_reg$D_IN = 15'h0 ;
  assign extracter_fifo_stage1_reg$ENQ = 1'b0 ;
  assign extracter_fifo_stage1_reg$DEQ = 1'b0 ;
  assign extracter_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule extracter_fifo_stage2_reg
  assign extracter_fifo_stage2_reg$D_IN = 13'h0 ;
  assign extracter_fifo_stage2_reg$ENQ = 1'b0 ;
  assign extracter_fifo_stage2_reg$DEQ = 1'b0 ;
  assign extracter_fifo_stage2_reg$CLR = 1'b0 ;

  // submodule ffO
  assign ffO$D_IN = positToquire_fifo_output_reg$D_OUT ;
  assign ffO$ENQ = CAN_FIRE_RL_rl_out ;
  assign ffO$DEQ = EN_compute_response_get ;
  assign ffO$CLR = 1'b0 ;

  // submodule positToquire_fifo_output_reg
  assign positToquire_fifo_output_reg$D_IN =
	     (positToquire_fifo_stage1_reg$D_OUT[1:0] == 2'd2) ?
	       32'd0 :
	       twos_complement_carry_int_frac__h864 ;
  assign positToquire_fifo_output_reg$ENQ = CAN_FIRE_RL_positToquire_stage_2 ;
  assign positToquire_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_out ;
  assign positToquire_fifo_output_reg$CLR = 1'b0 ;

  // submodule positToquire_fifo_stage0_reg
  assign positToquire_fifo_stage0_reg$D_IN = 12'h0 ;
  assign positToquire_fifo_stage0_reg$ENQ = 1'b0 ;
  assign positToquire_fifo_stage0_reg$DEQ = 1'b0 ;
  assign positToquire_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule positToquire_fifo_stage1_reg
  assign positToquire_fifo_stage1_reg$D_IN =
	     { extracter_fifo_output_reg$D_OUT[9],
	       int_frac__h986,
	       extracter_fifo_output_reg$D_OUT[11:10] } ;
  assign positToquire_fifo_stage1_reg$ENQ = CAN_FIRE_RL_rl_connect0 ;
  assign positToquire_fifo_stage1_reg$DEQ = CAN_FIRE_RL_positToquire_stage_2 ;
  assign positToquire_fifo_stage1_reg$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_compute_request_put_BIT_7_4_THEN_0_MINUS_ETC___d107 =
	     new_inp__h1145[6] ?
	       ((!INV_new_inp145__q1[6] && !INV_new_inp145__q1[5] &&
		 !INV_new_inp145__q1[4] &&
		 !INV_new_inp145__q1[3] &&
		 !INV_new_inp145__q1[2] &&
		 !INV_new_inp145__q1[1] &&
		 !INV_new_inp145__q1[0]) ?
		  3'd7 :
		  3'd6) -
	       x__h1510 :
	       ((!new_inp__h1145[5] && !new_inp__h1145[4] &&
		 !new_inp__h1145[3] &&
		 !new_inp__h1145[2] &&
		 !new_inp__h1145[1] &&
		 !new_inp__h1145[0]) ?
		  3'd7 :
		  3'd6) -
	       x__h2528 ;
  assign IF_compute_request_put_BITS_6_TO_0_2_EQ_0_3_AN_ETC___d132 =
	     (compute_request_put[6:0] == 7'd0 && !compute_request_put[7]) ?
	       9'd0 :
	       { SEXT_IF_IF_compute_request_put_BIT_7_4_THEN_0__ETC___d78 +
		 { 4'd0, expo__h1152 },
		 frac__h1153 } ;
  assign IF_new_inp145_BIT_6_THEN_b500_ELSE_b502__q2 =
	     new_inp__h1145[6] ? b__h1500 : b__h1502 ;
  assign INV_new_inp145__q1 = ~new_inp__h1145 ;
  assign SEXT_IF_IF_compute_request_put_BIT_7_4_THEN_0__ETC___d78 =
	     { SEXT_IF_new_inp145_BIT_6_THEN_b500_ELSE_b502__q3[3:0], 1'd0 } ;
  assign SEXT_IF_new_inp145_BIT_6_THEN_b500_ELSE_b502__q3 =
	     { IF_new_inp145_BIT_6_THEN_b500_ELSE_b502__q2[3],
	       IF_new_inp145_BIT_6_THEN_b500_ELSE_b502__q2 } ;
  assign b__h1500 = { 1'd0, x__h1510 } - 4'd1 ;
  assign b__h1502 = 4'd0 - x__h2521 ;
  assign expo__h1152 =
	     (IF_IF_compute_request_put_BIT_7_4_THEN_0_MINUS_ETC___d107 ==
	      3'd0) ?
	       3'd1 -
	       IF_IF_compute_request_put_BIT_7_4_THEN_0_MINUS_ETC___d107 ==
	       3'd0 &&
	       new_inp__h1145[0] :
	       new_inp__h1145[x__h3711] ;
  assign f_new__h1000 = { 20'd1, extracter_fifo_output_reg$D_OUT[3:0] } ;
  assign frac__h1153 = new_inp__h1145[3:0] << x__h3760 ;
  assign int_frac__h986 = f_new__h1000 << x__h1047 ;
  assign new_inp__h1145 =
	     compute_request_put[7] ?
	       7'd0 - compute_request_put[6:0] :
	       compute_request_put[6:0] ;
  assign twos_complement_carry_int_frac__h864 =
	     { positToquire_fifo_stage1_reg$D_OUT[26],
	       positToquire_fifo_stage1_reg$D_OUT[26] ?
		 31'd0 - { 7'd0, positToquire_fifo_stage1_reg$D_OUT[25:2] } :
		 { 7'd0, positToquire_fifo_stage1_reg$D_OUT[25:2] } } ;
  assign x__h1047 = extracter_fifo_output_reg$D_OUT[8:4] + 5'd8 ;
  assign x__h1510 =
	     INV_new_inp145__q1[6] ?
	       3'd0 :
	       (INV_new_inp145__q1[5] ?
		  3'd1 :
		  (INV_new_inp145__q1[4] ?
		     3'd2 :
		     (INV_new_inp145__q1[3] ?
			3'd3 :
			(INV_new_inp145__q1[2] ?
			   3'd4 :
			   (INV_new_inp145__q1[1] ?
			      3'd5 :
			      (INV_new_inp145__q1[0] ? 3'd6 : 3'd7)))))) ;
  assign x__h2521 = { 1'd0, x__h2528 } ;
  assign x__h2528 =
	     new_inp__h1145[6] ?
	       3'd0 :
	       (new_inp__h1145[5] ?
		  3'd1 :
		  (new_inp__h1145[4] ?
		     3'd2 :
		     (new_inp__h1145[3] ?
			3'd3 :
			(new_inp__h1145[2] ?
			   3'd4 :
			   (new_inp__h1145[1] ?
			      3'd5 :
			      (new_inp__h1145[0] ? 3'd6 : 3'd7)))))) ;
  assign x__h3711 =
	     IF_IF_compute_request_put_BIT_7_4_THEN_0_MINUS_ETC___d107 -
	     3'd1 ;
  always@(IF_IF_compute_request_put_BIT_7_4_THEN_0_MINUS_ETC___d107)
  begin
    case (IF_IF_compute_request_put_BIT_7_4_THEN_0_MINUS_ETC___d107)
      3'd2: x__h3760 = 4'd3;
      3'd3: x__h3760 = 4'd2;
      3'd4: x__h3760 = 4'd1;
      3'd5: x__h3760 = 4'd0;
      default: x__h3760 =
		   (IF_IF_compute_request_put_BIT_7_4_THEN_0_MINUS_ETC___d107 <=
		    3'd1) ?
		     4'd4 :
		     4'd0;
    endcase
  end
endmodule  // mkPNE_test

