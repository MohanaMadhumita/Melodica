//
// Generated by Bluespec Compiler (build 16071ee)
//
// On Wed Sep 16 14:08:02 IST 2020
//
//
// Ports:
// Name                         I/O  size props
// RDY_compute_request_put        O     1
// compute_response_get           O    32 reg
// RDY_compute_response_get       O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// compute_request_put            I    48
// EN_compute_request_put         I     1
// EN_compute_response_get        I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPNE_test(CLK,
		  RST_N,

		  compute_request_put,
		  EN_compute_request_put,
		  RDY_compute_request_put,

		  EN_compute_response_get,
		  compute_response_get,
		  RDY_compute_response_get);
  input  CLK;
  input  RST_N;

  // action method compute_request_put
  input  [47 : 0] compute_request_put;
  input  EN_compute_request_put;
  output RDY_compute_request_put;

  // actionvalue method compute_response_get
  input  EN_compute_response_get;
  output [31 : 0] compute_response_get;
  output RDY_compute_response_get;

  // signals for module outputs
  wire [31 : 0] compute_response_get;
  wire RDY_compute_request_put, RDY_compute_response_get;

  // register divider_intDivide_rg_denom
  reg [4 : 0] divider_intDivide_rg_denom;
  wire [4 : 0] divider_intDivide_rg_denom$D_IN;
  wire divider_intDivide_rg_denom$EN;

  // register divider_intDivide_rg_denom2
  reg [12 : 0] divider_intDivide_rg_denom2;
  reg [12 : 0] divider_intDivide_rg_denom2$D_IN;
  wire divider_intDivide_rg_denom2$EN;

  // register divider_intDivide_rg_n
  reg [8 : 0] divider_intDivide_rg_n;
  reg [8 : 0] divider_intDivide_rg_n$D_IN;
  wire divider_intDivide_rg_n$EN;

  // register divider_intDivide_rg_numer
  reg [12 : 0] divider_intDivide_rg_numer;
  wire [12 : 0] divider_intDivide_rg_numer$D_IN;
  wire divider_intDivide_rg_numer$EN;

  // register divider_intDivide_rg_quo
  reg [8 : 0] divider_intDivide_rg_quo;
  wire [8 : 0] divider_intDivide_rg_quo$D_IN;
  wire divider_intDivide_rg_quo$EN;

  // register divider_intDivide_rg_state
  reg [1 : 0] divider_intDivide_rg_state;
  reg [1 : 0] divider_intDivide_rg_state$D_IN;
  wire divider_intDivide_rg_state$EN;

  // ports of submodule adder_fifo_output_reg
  wire [31 : 0] adder_fifo_output_reg$D_IN, adder_fifo_output_reg$D_OUT;
  wire adder_fifo_output_reg$CLR,
       adder_fifo_output_reg$DEQ,
       adder_fifo_output_reg$EMPTY_N,
       adder_fifo_output_reg$ENQ,
       adder_fifo_output_reg$FULL_N;

  // ports of submodule adder_fifo_stage0_reg
  wire [38 : 0] adder_fifo_stage0_reg$D_IN, adder_fifo_stage0_reg$D_OUT;
  wire adder_fifo_stage0_reg$CLR,
       adder_fifo_stage0_reg$DEQ,
       adder_fifo_stage0_reg$EMPTY_N,
       adder_fifo_stage0_reg$ENQ,
       adder_fifo_stage0_reg$FULL_N;

  // ports of submodule divider_fifo_output_reg
  wire [36 : 0] divider_fifo_output_reg$D_IN, divider_fifo_output_reg$D_OUT;
  wire divider_fifo_output_reg$CLR,
       divider_fifo_output_reg$DEQ,
       divider_fifo_output_reg$EMPTY_N,
       divider_fifo_output_reg$ENQ,
       divider_fifo_output_reg$FULL_N;

  // ports of submodule divider_fifo_stage0_reg
  wire [9 : 0] divider_fifo_stage0_reg$D_IN, divider_fifo_stage0_reg$D_OUT;
  wire divider_fifo_stage0_reg$CLR,
       divider_fifo_stage0_reg$DEQ,
       divider_fifo_stage0_reg$EMPTY_N,
       divider_fifo_stage0_reg$ENQ,
       divider_fifo_stage0_reg$FULL_N;

  // ports of submodule divider_intDivide_fifo_output_reg
  wire [10 : 0] divider_intDivide_fifo_output_reg$D_IN,
		divider_intDivide_fifo_output_reg$D_OUT;
  wire divider_intDivide_fifo_output_reg$CLR,
       divider_intDivide_fifo_output_reg$DEQ,
       divider_intDivide_fifo_output_reg$EMPTY_N,
       divider_intDivide_fifo_output_reg$ENQ,
       divider_intDivide_fifo_output_reg$FULL_N;

  // ports of submodule extracter1_fifo_output_reg
  wire [11 : 0] extracter1_fifo_output_reg$D_IN,
		extracter1_fifo_output_reg$D_OUT;
  wire extracter1_fifo_output_reg$CLR,
       extracter1_fifo_output_reg$DEQ,
       extracter1_fifo_output_reg$EMPTY_N,
       extracter1_fifo_output_reg$ENQ,
       extracter1_fifo_output_reg$FULL_N;

  // ports of submodule extracter1_fifo_stage0_reg
  wire [9 : 0] extracter1_fifo_stage0_reg$D_IN;
  wire extracter1_fifo_stage0_reg$CLR,
       extracter1_fifo_stage0_reg$DEQ,
       extracter1_fifo_stage0_reg$ENQ;

  // ports of submodule extracter1_fifo_stage1_reg
  wire [14 : 0] extracter1_fifo_stage1_reg$D_IN;
  wire extracter1_fifo_stage1_reg$CLR,
       extracter1_fifo_stage1_reg$DEQ,
       extracter1_fifo_stage1_reg$ENQ;

  // ports of submodule extracter1_fifo_stage2_reg
  wire [12 : 0] extracter1_fifo_stage2_reg$D_IN;
  wire extracter1_fifo_stage2_reg$CLR,
       extracter1_fifo_stage2_reg$DEQ,
       extracter1_fifo_stage2_reg$ENQ;

  // ports of submodule extracter2_fifo_output_reg
  wire [11 : 0] extracter2_fifo_output_reg$D_IN,
		extracter2_fifo_output_reg$D_OUT;
  wire extracter2_fifo_output_reg$CLR,
       extracter2_fifo_output_reg$DEQ,
       extracter2_fifo_output_reg$EMPTY_N,
       extracter2_fifo_output_reg$ENQ,
       extracter2_fifo_output_reg$FULL_N;

  // ports of submodule extracter2_fifo_stage0_reg
  wire [9 : 0] extracter2_fifo_stage0_reg$D_IN;
  wire extracter2_fifo_stage0_reg$CLR,
       extracter2_fifo_stage0_reg$DEQ,
       extracter2_fifo_stage0_reg$ENQ;

  // ports of submodule extracter2_fifo_stage1_reg
  wire [14 : 0] extracter2_fifo_stage1_reg$D_IN;
  wire extracter2_fifo_stage1_reg$CLR,
       extracter2_fifo_stage1_reg$DEQ,
       extracter2_fifo_stage1_reg$ENQ;

  // ports of submodule extracter2_fifo_stage2_reg
  wire [12 : 0] extracter2_fifo_stage2_reg$D_IN;
  wire extracter2_fifo_stage2_reg$CLR,
       extracter2_fifo_stage2_reg$DEQ,
       extracter2_fifo_stage2_reg$ENQ;

  // ports of submodule ffO
  wire [31 : 0] ffO$D_IN, ffO$D_OUT;
  wire ffO$CLR, ffO$DEQ, ffO$EMPTY_N, ffO$ENQ, ffO$FULL_N;

  // ports of submodule fftemp
  wire [31 : 0] fftemp$D_IN, fftemp$D_OUT;
  wire fftemp$CLR, fftemp$DEQ, fftemp$EMPTY_N, fftemp$ENQ, fftemp$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_adder_stage_1,
       CAN_FIRE_RL_divider_intDivide_rl_loop1,
       CAN_FIRE_RL_divider_intDivide_rl_loop2,
       CAN_FIRE_RL_divider_stage_1,
       CAN_FIRE_RL_rl_connect0,
       CAN_FIRE_RL_rl_connect1,
       CAN_FIRE_RL_rl_out,
       CAN_FIRE_compute_request_put,
       CAN_FIRE_compute_response_get,
       WILL_FIRE_RL_adder_stage_1,
       WILL_FIRE_RL_divider_intDivide_rl_loop1,
       WILL_FIRE_RL_divider_intDivide_rl_loop2,
       WILL_FIRE_RL_divider_stage_1,
       WILL_FIRE_RL_rl_connect0,
       WILL_FIRE_RL_rl_connect1,
       WILL_FIRE_RL_rl_out,
       WILL_FIRE_compute_request_put,
       WILL_FIRE_compute_response_get;

  // inputs to muxes for submodule ports
  wire [12 : 0] MUX_divider_intDivide_rg_denom2$write_1__VAL_1,
		MUX_divider_intDivide_rg_denom2$write_1__VAL_2,
		MUX_divider_intDivide_rg_denom2$write_1__VAL_3,
		MUX_divider_intDivide_rg_numer$write_1__VAL_1,
		MUX_divider_intDivide_rg_numer$write_1__VAL_2;
  wire [10 : 0] MUX_divider_intDivide_fifo_output_reg$enq_1__VAL_1,
		MUX_divider_intDivide_fifo_output_reg$enq_1__VAL_2;
  wire [8 : 0] MUX_divider_intDivide_rg_n$write_1__VAL_1,
	       MUX_divider_intDivide_rg_n$write_1__VAL_3,
	       MUX_divider_intDivide_rg_quo$write_1__VAL_1,
	       MUX_divider_intDivide_rg_quo$write_1__VAL_2;
  wire [1 : 0] MUX_divider_intDivide_rg_state$write_1__VAL_3;
  wire MUX_divider_intDivide_fifo_output_reg$enq_1__SEL_1,
       MUX_divider_intDivide_rg_denom2$write_1__SEL_1,
       MUX_divider_intDivide_rg_denom2$write_1__SEL_2,
       MUX_divider_intDivide_rg_denom2$write_1__SEL_3,
       MUX_divider_intDivide_rg_numer$write_1__SEL_2,
       MUX_divider_intDivide_rg_state$write_1__SEL_2;

  // remaining internal signals
  reg [3 : 0] x__h10048, x__h12765;
  wire [31 : 0] IF_INV_NOT_IF_NOT_adder_fifo_stage0_reg_first__ETC___d151,
		IF_NOT_fftemp_first__18_BIT_31_19_20_AND_NOT_d_ETC___d233,
		SEXT_IF_adder_fifo_stage0_reg_first__08_BIT_7__ETC___d118,
		adder_fifo_stage0_reg_first__08_BITS_38_TO_7_2_ETC___d123,
		fftemp_first__18_PLUS_divider_fifo_output_reg__ETC___d226,
		twos_complement_carry_int_frac__h1887,
		x__h2639,
		x__h4670;
  wire [30 : 0] x__h2210;
  wire [23 : 0] IF_divider_fifo_stage0_reg_first__2_BIT_5_4_AN_ETC___d73,
		f_new___1__h2119,
		f_new__h1934,
		f_new__h2063,
		mask1__h2121,
		x__h2301;
  wire [12 : 0] y__h1477, y__h1574;
  wire [9 : 0] f__h1929, x__h2076;
  wire [8 : 0] IF_compute_request_put_BITS_14_TO_8_46_EQ_0_47_ETC___d346,
	       IF_compute_request_put_BITS_6_TO_0_48_EQ_0_49__ETC___d448;
  wire [6 : 0] IF_divider_fifo_stage0_reg_first__2_BIT_5_4_AN_ETC___d64,
	       INV_new_inp0152__q2,
	       INV_new_inp426__q1,
	       extracter1_fifo_output_reg_first__59_BIT_9_02__ETC___d211,
	       new_inp__h10152,
	       new_inp__h7426;
  wire [5 : 0] IF_divider_fifo_stage0_reg_first__2_BIT_5_4_TH_ETC___d48,
	       IF_divider_fifo_stage0_reg_first__2_BIT_5_4_TH_ETC___d49,
	       x__h2112,
	       x__h2200,
	       x__h2277;
  wire [4 : 0] NEG_extracter2_fifo_output_regD_OUT_BITS_8_TO_4__q8,
	       SEXT_IF_IF_compute_request_put_BIT_15_48_THEN__ETC___d292,
	       SEXT_IF_IF_compute_request_put_BIT_7_50_THEN_0_ETC___d394,
	       SEXT_IF_new_inp0152_BIT_6_THEN_b0507_ELSE_b0509__q4,
	       SEXT_IF_new_inp426_BIT_6_THEN_b790_ELSE_b792__q6,
	       denom__h4852,
	       extracter1_fifo_output_regD_OUT_BITS_8_TO_4__q7,
	       numer__h4851;
  wire [3 : 0] IF_new_inp0152_BIT_6_THEN_b0507_ELSE_b0509__q3,
	       IF_new_inp426_BIT_6_THEN_b790_ELSE_b792__q5,
	       b__h10507,
	       b__h10509,
	       b__h7790,
	       b__h7792,
	       frac__h10160,
	       frac__h7434,
	       x__h11528,
	       x__h8811;
  wire [2 : 0] IF_IF_compute_request_put_BIT_15_48_THEN_0_MIN_ETC___d321,
	       IF_IF_compute_request_put_BIT_7_50_THEN_0_MINU_ETC___d423,
	       x__h10517,
	       x__h11535,
	       x__h12716,
	       x__h7800,
	       x__h8818,
	       x__h9999;
  wire [1 : 0] IF_divider_fifo_stage0_reg_first__2_BIT_5_4_AN_ETC___d102,
	       IF_extracter1_fifo_output_reg_first__59_BITS_1_ETC___d166,
	       truncated_frac__h2614;
  wire NOT_IF_divider_fifo_stage0_reg_first__2_BIT_5__ETC___d51,
       all_bits_0__h2617,
       divider_intDivide_rg_denom2_ULE_0_CONCAT_divid_ETC___d7,
       divider_intDivide_rg_numer_ULT_0_CONCAT_divide_ETC___d16,
       divider_intDivide_rg_numer_ULT_divider_intDivi_ETC___d27,
       expo__h10159,
       expo__h7433,
       flag_truncated_frac__h2612,
       truncated_frac_msb___1__h2120,
       truncated_frac_zero___1__h2122,
       truncated_frac_zero__h1938,
       x__h1751,
       x__h2358,
       x__h2632,
       x__h2634,
       x__h3233,
       x__h5160,
       x__h5266,
       x__h7292,
       x__h7297,
       y__h2633,
       y__h4646,
       y__h7310;

  // action method compute_request_put
  assign RDY_compute_request_put =
	     extracter1_fifo_output_reg$FULL_N &&
	     extracter2_fifo_output_reg$FULL_N &&
	     fftemp$FULL_N ;
  assign CAN_FIRE_compute_request_put =
	     extracter1_fifo_output_reg$FULL_N &&
	     extracter2_fifo_output_reg$FULL_N &&
	     fftemp$FULL_N ;
  assign WILL_FIRE_compute_request_put = EN_compute_request_put ;

  // actionvalue method compute_response_get
  assign compute_response_get = ffO$D_OUT ;
  assign RDY_compute_response_get = ffO$EMPTY_N ;
  assign CAN_FIRE_compute_response_get = ffO$EMPTY_N ;
  assign WILL_FIRE_compute_response_get = EN_compute_response_get ;

  // submodule adder_fifo_output_reg
  FIFO2 #(.width(32'd32), .guarded(32'd1)) adder_fifo_output_reg(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(adder_fifo_output_reg$D_IN),
								 .ENQ(adder_fifo_output_reg$ENQ),
								 .DEQ(adder_fifo_output_reg$DEQ),
								 .CLR(adder_fifo_output_reg$CLR),
								 .D_OUT(adder_fifo_output_reg$D_OUT),
								 .FULL_N(adder_fifo_output_reg$FULL_N),
								 .EMPTY_N(adder_fifo_output_reg$EMPTY_N));

  // submodule adder_fifo_stage0_reg
  FIFO2 #(.width(32'd39), .guarded(32'd1)) adder_fifo_stage0_reg(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(adder_fifo_stage0_reg$D_IN),
								 .ENQ(adder_fifo_stage0_reg$ENQ),
								 .DEQ(adder_fifo_stage0_reg$DEQ),
								 .CLR(adder_fifo_stage0_reg$CLR),
								 .D_OUT(adder_fifo_stage0_reg$D_OUT),
								 .FULL_N(adder_fifo_stage0_reg$FULL_N),
								 .EMPTY_N(adder_fifo_stage0_reg$EMPTY_N));

  // submodule divider_fifo_output_reg
  FIFO2 #(.width(32'd37),
	  .guarded(32'd1)) divider_fifo_output_reg(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(divider_fifo_output_reg$D_IN),
						   .ENQ(divider_fifo_output_reg$ENQ),
						   .DEQ(divider_fifo_output_reg$DEQ),
						   .CLR(divider_fifo_output_reg$CLR),
						   .D_OUT(divider_fifo_output_reg$D_OUT),
						   .FULL_N(divider_fifo_output_reg$FULL_N),
						   .EMPTY_N(divider_fifo_output_reg$EMPTY_N));

  // submodule divider_fifo_stage0_reg
  FIFO2 #(.width(32'd10),
	  .guarded(32'd1)) divider_fifo_stage0_reg(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(divider_fifo_stage0_reg$D_IN),
						   .ENQ(divider_fifo_stage0_reg$ENQ),
						   .DEQ(divider_fifo_stage0_reg$DEQ),
						   .CLR(divider_fifo_stage0_reg$CLR),
						   .D_OUT(divider_fifo_stage0_reg$D_OUT),
						   .FULL_N(divider_fifo_stage0_reg$FULL_N),
						   .EMPTY_N(divider_fifo_stage0_reg$EMPTY_N));

  // submodule divider_intDivide_fifo_output_reg
  FIFO2 #(.width(32'd11),
	  .guarded(32'd1)) divider_intDivide_fifo_output_reg(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(divider_intDivide_fifo_output_reg$D_IN),
							     .ENQ(divider_intDivide_fifo_output_reg$ENQ),
							     .DEQ(divider_intDivide_fifo_output_reg$DEQ),
							     .CLR(divider_intDivide_fifo_output_reg$CLR),
							     .D_OUT(divider_intDivide_fifo_output_reg$D_OUT),
							     .FULL_N(divider_intDivide_fifo_output_reg$FULL_N),
							     .EMPTY_N(divider_intDivide_fifo_output_reg$EMPTY_N));

  // submodule extracter1_fifo_output_reg
  FIFO2 #(.width(32'd12),
	  .guarded(32'd1)) extracter1_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_output_reg$D_IN),
						      .ENQ(extracter1_fifo_output_reg$ENQ),
						      .DEQ(extracter1_fifo_output_reg$DEQ),
						      .CLR(extracter1_fifo_output_reg$CLR),
						      .D_OUT(extracter1_fifo_output_reg$D_OUT),
						      .FULL_N(extracter1_fifo_output_reg$FULL_N),
						      .EMPTY_N(extracter1_fifo_output_reg$EMPTY_N));

  // submodule extracter1_fifo_stage0_reg
  FIFO2 #(.width(32'd10),
	  .guarded(32'd1)) extracter1_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_stage0_reg$D_IN),
						      .ENQ(extracter1_fifo_stage0_reg$ENQ),
						      .DEQ(extracter1_fifo_stage0_reg$DEQ),
						      .CLR(extracter1_fifo_stage0_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter1_fifo_stage1_reg
  FIFO2 #(.width(32'd15),
	  .guarded(32'd1)) extracter1_fifo_stage1_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_stage1_reg$D_IN),
						      .ENQ(extracter1_fifo_stage1_reg$ENQ),
						      .DEQ(extracter1_fifo_stage1_reg$DEQ),
						      .CLR(extracter1_fifo_stage1_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter1_fifo_stage2_reg
  FIFO2 #(.width(32'd13),
	  .guarded(32'd1)) extracter1_fifo_stage2_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_stage2_reg$D_IN),
						      .ENQ(extracter1_fifo_stage2_reg$ENQ),
						      .DEQ(extracter1_fifo_stage2_reg$DEQ),
						      .CLR(extracter1_fifo_stage2_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter2_fifo_output_reg
  FIFO2 #(.width(32'd12),
	  .guarded(32'd1)) extracter2_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_output_reg$D_IN),
						      .ENQ(extracter2_fifo_output_reg$ENQ),
						      .DEQ(extracter2_fifo_output_reg$DEQ),
						      .CLR(extracter2_fifo_output_reg$CLR),
						      .D_OUT(extracter2_fifo_output_reg$D_OUT),
						      .FULL_N(extracter2_fifo_output_reg$FULL_N),
						      .EMPTY_N(extracter2_fifo_output_reg$EMPTY_N));

  // submodule extracter2_fifo_stage0_reg
  FIFO2 #(.width(32'd10),
	  .guarded(32'd1)) extracter2_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_stage0_reg$D_IN),
						      .ENQ(extracter2_fifo_stage0_reg$ENQ),
						      .DEQ(extracter2_fifo_stage0_reg$DEQ),
						      .CLR(extracter2_fifo_stage0_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter2_fifo_stage1_reg
  FIFO2 #(.width(32'd15),
	  .guarded(32'd1)) extracter2_fifo_stage1_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_stage1_reg$D_IN),
						      .ENQ(extracter2_fifo_stage1_reg$ENQ),
						      .DEQ(extracter2_fifo_stage1_reg$DEQ),
						      .CLR(extracter2_fifo_stage1_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter2_fifo_stage2_reg
  FIFO2 #(.width(32'd13),
	  .guarded(32'd1)) extracter2_fifo_stage2_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_stage2_reg$D_IN),
						      .ENQ(extracter2_fifo_stage2_reg$ENQ),
						      .DEQ(extracter2_fifo_stage2_reg$DEQ),
						      .CLR(extracter2_fifo_stage2_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule ffO
  FIFO2 #(.width(32'd32), .guarded(32'd1)) ffO(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(ffO$D_IN),
					       .ENQ(ffO$ENQ),
					       .DEQ(ffO$DEQ),
					       .CLR(ffO$CLR),
					       .D_OUT(ffO$D_OUT),
					       .FULL_N(ffO$FULL_N),
					       .EMPTY_N(ffO$EMPTY_N));

  // submodule fftemp
  FIFO2 #(.width(32'd32), .guarded(32'd1)) fftemp(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(fftemp$D_IN),
						  .ENQ(fftemp$ENQ),
						  .DEQ(fftemp$DEQ),
						  .CLR(fftemp$CLR),
						  .D_OUT(fftemp$D_OUT),
						  .FULL_N(fftemp$FULL_N),
						  .EMPTY_N(fftemp$EMPTY_N));

  // rule RL_rl_connect0
  assign CAN_FIRE_RL_rl_connect0 =
	     (divider_intDivide_rg_state == 2'd0 ||
	      divider_intDivide_rg_state == 2'd3) &&
	     extracter1_fifo_output_reg$EMPTY_N &&
	     extracter2_fifo_output_reg$EMPTY_N &&
	     divider_fifo_stage0_reg$FULL_N &&
	     (denom__h4852 != 5'd0 ||
	      divider_intDivide_fifo_output_reg$FULL_N) ;
  assign WILL_FIRE_RL_rl_connect0 = CAN_FIRE_RL_rl_connect0 ;

  // rule RL_rl_connect1
  assign CAN_FIRE_RL_rl_connect1 =
	     divider_fifo_output_reg$EMPTY_N &&
	     adder_fifo_stage0_reg$FULL_N &&
	     fftemp$EMPTY_N ;
  assign WILL_FIRE_RL_rl_connect1 = CAN_FIRE_RL_rl_connect1 ;

  // rule RL_rl_out
  assign CAN_FIRE_RL_rl_out = adder_fifo_output_reg$EMPTY_N && ffO$FULL_N ;
  assign WILL_FIRE_RL_rl_out = CAN_FIRE_RL_rl_out ;

  // rule RL_divider_stage_1
  assign CAN_FIRE_RL_divider_stage_1 =
	     divider_fifo_stage0_reg$EMPTY_N &&
	     divider_intDivide_fifo_output_reg$EMPTY_N &&
	     divider_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_divider_stage_1 = CAN_FIRE_RL_divider_stage_1 ;

  // rule RL_divider_intDivide_rl_loop1
  assign CAN_FIRE_RL_divider_intDivide_rl_loop1 =
	     divider_intDivide_rg_state == 2'd1 ;
  assign WILL_FIRE_RL_divider_intDivide_rl_loop1 =
	     CAN_FIRE_RL_divider_intDivide_rl_loop1 ;

  // rule RL_divider_intDivide_rl_loop2
  assign CAN_FIRE_RL_divider_intDivide_rl_loop2 =
	     (!divider_intDivide_rg_numer_ULT_0_CONCAT_divide_ETC___d16 ||
	      divider_intDivide_fifo_output_reg$FULL_N) &&
	     divider_intDivide_rg_state == 2'd2 ;
  assign WILL_FIRE_RL_divider_intDivide_rl_loop2 =
	     CAN_FIRE_RL_divider_intDivide_rl_loop2 ;

  // rule RL_adder_stage_1
  assign CAN_FIRE_RL_adder_stage_1 =
	     adder_fifo_stage0_reg$EMPTY_N && adder_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_adder_stage_1 = CAN_FIRE_RL_adder_stage_1 ;

  // inputs to muxes for submodule ports
  assign MUX_divider_intDivide_fifo_output_reg$enq_1__SEL_1 =
	     WILL_FIRE_RL_divider_intDivide_rl_loop2 &&
	     divider_intDivide_rg_numer_ULT_0_CONCAT_divide_ETC___d16 ;
  assign MUX_divider_intDivide_rg_denom2$write_1__SEL_1 =
	     WILL_FIRE_RL_divider_intDivide_rl_loop1 &&
	     divider_intDivide_rg_denom2_ULE_0_CONCAT_divid_ETC___d7 ;
  assign MUX_divider_intDivide_rg_denom2$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_connect0 && denom__h4852 != 5'd0 ;
  assign MUX_divider_intDivide_rg_denom2$write_1__SEL_3 =
	     WILL_FIRE_RL_divider_intDivide_rl_loop2 &&
	     !divider_intDivide_rg_numer_ULT_0_CONCAT_divide_ETC___d16 &&
	     divider_intDivide_rg_numer_ULT_divider_intDivi_ETC___d27 ;
  assign MUX_divider_intDivide_rg_numer$write_1__SEL_2 =
	     WILL_FIRE_RL_divider_intDivide_rl_loop2 &&
	     !divider_intDivide_rg_numer_ULT_0_CONCAT_divide_ETC___d16 &&
	     !divider_intDivide_rg_numer_ULT_divider_intDivi_ETC___d27 ;
  assign MUX_divider_intDivide_rg_state$write_1__SEL_2 =
	     WILL_FIRE_RL_divider_intDivide_rl_loop1 &&
	     !divider_intDivide_rg_denom2_ULE_0_CONCAT_divid_ETC___d7 ;
  assign MUX_divider_intDivide_fifo_output_reg$enq_1__VAL_1 =
	     { divider_intDivide_rg_quo,
	       divider_intDivide_rg_numer[4],
	       x__h1751 } ;
  assign MUX_divider_intDivide_fifo_output_reg$enq_1__VAL_2 =
	     { divider_intDivide_rg_quo, 2'd1 } ;
  assign MUX_divider_intDivide_rg_denom2$write_1__VAL_1 =
	     { divider_intDivide_rg_denom2[11:0], 1'd0 } ;
  assign MUX_divider_intDivide_rg_denom2$write_1__VAL_2 =
	     { 8'd0, denom__h4852 } ;
  assign MUX_divider_intDivide_rg_denom2$write_1__VAL_3 =
	     { 1'd0, divider_intDivide_rg_denom2[12:1] } ;
  assign MUX_divider_intDivide_rg_n$write_1__VAL_1 =
	     { divider_intDivide_rg_n[7:0], 1'd0 } ;
  assign MUX_divider_intDivide_rg_n$write_1__VAL_3 =
	     { 1'd0, divider_intDivide_rg_n[8:1] } ;
  assign MUX_divider_intDivide_rg_numer$write_1__VAL_1 =
	     { numer__h4851, 8'd0 } ;
  assign MUX_divider_intDivide_rg_numer$write_1__VAL_2 =
	     divider_intDivide_rg_numer - divider_intDivide_rg_denom2 ;
  assign MUX_divider_intDivide_rg_quo$write_1__VAL_1 =
	     divider_intDivide_rg_quo + divider_intDivide_rg_n ;
  assign MUX_divider_intDivide_rg_quo$write_1__VAL_2 =
	     (denom__h4852 == 5'd0) ? 9'd511 : 9'd0 ;
  assign MUX_divider_intDivide_rg_state$write_1__VAL_3 =
	     (denom__h4852 == 5'd0) ? 2'd3 : 2'd1 ;

  // register divider_intDivide_rg_denom
  assign divider_intDivide_rg_denom$D_IN = denom__h4852 ;
  assign divider_intDivide_rg_denom$EN =
	     MUX_divider_intDivide_rg_denom2$write_1__SEL_2 ;

  // register divider_intDivide_rg_denom2
  always@(MUX_divider_intDivide_rg_denom2$write_1__SEL_1 or
	  MUX_divider_intDivide_rg_denom2$write_1__VAL_1 or
	  MUX_divider_intDivide_rg_denom2$write_1__SEL_2 or
	  MUX_divider_intDivide_rg_denom2$write_1__VAL_2 or
	  MUX_divider_intDivide_rg_denom2$write_1__SEL_3 or
	  MUX_divider_intDivide_rg_denom2$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_divider_intDivide_rg_denom2$write_1__SEL_1:
	  divider_intDivide_rg_denom2$D_IN =
	      MUX_divider_intDivide_rg_denom2$write_1__VAL_1;
      MUX_divider_intDivide_rg_denom2$write_1__SEL_2:
	  divider_intDivide_rg_denom2$D_IN =
	      MUX_divider_intDivide_rg_denom2$write_1__VAL_2;
      MUX_divider_intDivide_rg_denom2$write_1__SEL_3:
	  divider_intDivide_rg_denom2$D_IN =
	      MUX_divider_intDivide_rg_denom2$write_1__VAL_3;
      default: divider_intDivide_rg_denom2$D_IN =
		   13'b0101010101010 /* unspecified value */ ;
    endcase
  end
  assign divider_intDivide_rg_denom2$EN =
	     WILL_FIRE_RL_divider_intDivide_rl_loop1 &&
	     divider_intDivide_rg_denom2_ULE_0_CONCAT_divid_ETC___d7 ||
	     WILL_FIRE_RL_rl_connect0 && denom__h4852 != 5'd0 ||
	     WILL_FIRE_RL_divider_intDivide_rl_loop2 &&
	     !divider_intDivide_rg_numer_ULT_0_CONCAT_divide_ETC___d16 &&
	     divider_intDivide_rg_numer_ULT_divider_intDivi_ETC___d27 ;

  // register divider_intDivide_rg_n
  always@(MUX_divider_intDivide_rg_denom2$write_1__SEL_1 or
	  MUX_divider_intDivide_rg_n$write_1__VAL_1 or
	  MUX_divider_intDivide_rg_denom2$write_1__SEL_2 or
	  MUX_divider_intDivide_rg_denom2$write_1__SEL_3 or
	  MUX_divider_intDivide_rg_n$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_divider_intDivide_rg_denom2$write_1__SEL_1:
	  divider_intDivide_rg_n$D_IN =
	      MUX_divider_intDivide_rg_n$write_1__VAL_1;
      MUX_divider_intDivide_rg_denom2$write_1__SEL_2:
	  divider_intDivide_rg_n$D_IN = 9'd1;
      MUX_divider_intDivide_rg_denom2$write_1__SEL_3:
	  divider_intDivide_rg_n$D_IN =
	      MUX_divider_intDivide_rg_n$write_1__VAL_3;
      default: divider_intDivide_rg_n$D_IN =
		   9'b010101010 /* unspecified value */ ;
    endcase
  end
  assign divider_intDivide_rg_n$EN =
	     WILL_FIRE_RL_divider_intDivide_rl_loop1 &&
	     divider_intDivide_rg_denom2_ULE_0_CONCAT_divid_ETC___d7 ||
	     WILL_FIRE_RL_rl_connect0 && denom__h4852 != 5'd0 ||
	     WILL_FIRE_RL_divider_intDivide_rl_loop2 &&
	     !divider_intDivide_rg_numer_ULT_0_CONCAT_divide_ETC___d16 &&
	     divider_intDivide_rg_numer_ULT_divider_intDivi_ETC___d27 ;

  // register divider_intDivide_rg_numer
  assign divider_intDivide_rg_numer$D_IN =
	     MUX_divider_intDivide_rg_denom2$write_1__SEL_2 ?
	       MUX_divider_intDivide_rg_numer$write_1__VAL_1 :
	       MUX_divider_intDivide_rg_numer$write_1__VAL_2 ;
  assign divider_intDivide_rg_numer$EN =
	     WILL_FIRE_RL_rl_connect0 && denom__h4852 != 5'd0 ||
	     WILL_FIRE_RL_divider_intDivide_rl_loop2 &&
	     !divider_intDivide_rg_numer_ULT_0_CONCAT_divide_ETC___d16 &&
	     !divider_intDivide_rg_numer_ULT_divider_intDivi_ETC___d27 ;

  // register divider_intDivide_rg_quo
  assign divider_intDivide_rg_quo$D_IN =
	     MUX_divider_intDivide_rg_numer$write_1__SEL_2 ?
	       MUX_divider_intDivide_rg_quo$write_1__VAL_1 :
	       MUX_divider_intDivide_rg_quo$write_1__VAL_2 ;
  assign divider_intDivide_rg_quo$EN =
	     WILL_FIRE_RL_divider_intDivide_rl_loop2 &&
	     !divider_intDivide_rg_numer_ULT_0_CONCAT_divide_ETC___d16 &&
	     !divider_intDivide_rg_numer_ULT_divider_intDivi_ETC___d27 ||
	     WILL_FIRE_RL_rl_connect0 ;

  // register divider_intDivide_rg_state
  always@(MUX_divider_intDivide_fifo_output_reg$enq_1__SEL_1 or
	  MUX_divider_intDivide_rg_state$write_1__SEL_2 or
	  WILL_FIRE_RL_rl_connect0 or
	  MUX_divider_intDivide_rg_state$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_divider_intDivide_fifo_output_reg$enq_1__SEL_1:
	  divider_intDivide_rg_state$D_IN = 2'd3;
      MUX_divider_intDivide_rg_state$write_1__SEL_2:
	  divider_intDivide_rg_state$D_IN = 2'd2;
      WILL_FIRE_RL_rl_connect0:
	  divider_intDivide_rg_state$D_IN =
	      MUX_divider_intDivide_rg_state$write_1__VAL_3;
      default: divider_intDivide_rg_state$D_IN =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  assign divider_intDivide_rg_state$EN =
	     WILL_FIRE_RL_divider_intDivide_rl_loop2 &&
	     divider_intDivide_rg_numer_ULT_0_CONCAT_divide_ETC___d16 ||
	     WILL_FIRE_RL_divider_intDivide_rl_loop1 &&
	     !divider_intDivide_rg_denom2_ULE_0_CONCAT_divid_ETC___d7 ||
	     WILL_FIRE_RL_rl_connect0 ;

  // submodule adder_fifo_output_reg
  assign adder_fifo_output_reg$D_IN =
	     (x__h2632 | y__h2633) ?
	       32'h80000000 :
	       IF_INV_NOT_IF_NOT_adder_fifo_stage0_reg_first__ETC___d151 ;
  assign adder_fifo_output_reg$ENQ = CAN_FIRE_RL_adder_stage_1 ;
  assign adder_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_out ;
  assign adder_fifo_output_reg$CLR = 1'b0 ;

  // submodule adder_fifo_stage0_reg
  assign adder_fifo_stage0_reg$D_IN =
	     { IF_NOT_fftemp_first__18_BIT_31_19_20_AND_NOT_d_ETC___d233,
	       x__h7292,
	       x__h7297,
	       2'd0,
	       divider_fifo_output_reg$D_OUT[36:34] } ;
  assign adder_fifo_stage0_reg$ENQ = CAN_FIRE_RL_rl_connect1 ;
  assign adder_fifo_stage0_reg$DEQ = CAN_FIRE_RL_adder_stage_1 ;
  assign adder_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule divider_fifo_output_reg
  assign divider_fifo_output_reg$D_IN =
	     { (twos_complement_carry_int_frac__h1887 == 32'd0 &&
		divider_fifo_stage0_reg$D_OUT[8:7] == 2'd0) ?
		 2'd2 :
		 divider_fifo_stage0_reg$D_OUT[8:7],
	       divider_fifo_stage0_reg$D_OUT[9],
	       twos_complement_carry_int_frac__h1887,
	       IF_divider_fifo_stage0_reg_first__2_BIT_5_4_AN_ETC___d102 } ;
  assign divider_fifo_output_reg$ENQ = CAN_FIRE_RL_divider_stage_1 ;
  assign divider_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_connect1 ;
  assign divider_fifo_output_reg$CLR = 1'b0 ;

  // submodule divider_fifo_stage0_reg
  assign divider_fifo_stage0_reg$D_IN =
	     { x__h5160,
	       (extracter1_fifo_output_reg$D_OUT[11:10] == 2'd2 &&
		extracter2_fifo_output_reg$D_OUT[11:10] != 2'd2 ||
		extracter1_fifo_output_reg$D_OUT[11:10] != 2'd1 &&
		extracter2_fifo_output_reg$D_OUT[11:10] == 2'd1) ?
		 2'd2 :
		 ((extracter1_fifo_output_reg$D_OUT[11:10] == 2'd1 &&
		   extracter2_fifo_output_reg$D_OUT[11:10] != 2'd1 ||
		   extracter1_fifo_output_reg$D_OUT[11:10] != 2'd2 &&
		   extracter2_fifo_output_reg$D_OUT[11:10] == 2'd2) ?
		    2'd1 :
		    2'd0),
	       extracter1_fifo_output_reg_first__59_BIT_9_02__ETC___d211 } ;
  assign divider_fifo_stage0_reg$ENQ = CAN_FIRE_RL_rl_connect0 ;
  assign divider_fifo_stage0_reg$DEQ = CAN_FIRE_RL_divider_stage_1 ;
  assign divider_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule divider_intDivide_fifo_output_reg
  assign divider_intDivide_fifo_output_reg$D_IN =
	     MUX_divider_intDivide_fifo_output_reg$enq_1__SEL_1 ?
	       MUX_divider_intDivide_fifo_output_reg$enq_1__VAL_1 :
	       MUX_divider_intDivide_fifo_output_reg$enq_1__VAL_2 ;
  assign divider_intDivide_fifo_output_reg$ENQ =
	     WILL_FIRE_RL_divider_intDivide_rl_loop2 &&
	     divider_intDivide_rg_numer_ULT_0_CONCAT_divide_ETC___d16 ||
	     WILL_FIRE_RL_rl_connect0 && denom__h4852 == 5'd0 ;
  assign divider_intDivide_fifo_output_reg$DEQ = CAN_FIRE_RL_divider_stage_1 ;
  assign divider_intDivide_fifo_output_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_output_reg
  assign extracter1_fifo_output_reg$D_IN =
	     { (compute_request_put[14:8] == 7'd0 &&
		!compute_request_put[15]) ?
		 2'd2 :
		 ((compute_request_put[14:8] == 7'd0 &&
		   compute_request_put[15]) ?
		    2'd1 :
		    2'd0),
	       compute_request_put[15],
	       IF_compute_request_put_BITS_14_TO_8_46_EQ_0_47_ETC___d346 } ;
  assign extracter1_fifo_output_reg$ENQ = EN_compute_request_put ;
  assign extracter1_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_connect0 ;
  assign extracter1_fifo_output_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_stage0_reg
  assign extracter1_fifo_stage0_reg$D_IN = 10'h0 ;
  assign extracter1_fifo_stage0_reg$ENQ = 1'b0 ;
  assign extracter1_fifo_stage0_reg$DEQ = 1'b0 ;
  assign extracter1_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_stage1_reg
  assign extracter1_fifo_stage1_reg$D_IN = 15'h0 ;
  assign extracter1_fifo_stage1_reg$ENQ = 1'b0 ;
  assign extracter1_fifo_stage1_reg$DEQ = 1'b0 ;
  assign extracter1_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_stage2_reg
  assign extracter1_fifo_stage2_reg$D_IN = 13'h0 ;
  assign extracter1_fifo_stage2_reg$ENQ = 1'b0 ;
  assign extracter1_fifo_stage2_reg$DEQ = 1'b0 ;
  assign extracter1_fifo_stage2_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_output_reg
  assign extracter2_fifo_output_reg$D_IN =
	     { (compute_request_put[6:0] == 7'd0 && !compute_request_put[7]) ?
		 2'd2 :
		 ((compute_request_put[6:0] == 7'd0 &&
		   compute_request_put[7]) ?
		    2'd1 :
		    2'd0),
	       compute_request_put[7],
	       IF_compute_request_put_BITS_6_TO_0_48_EQ_0_49__ETC___d448 } ;
  assign extracter2_fifo_output_reg$ENQ = EN_compute_request_put ;
  assign extracter2_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_connect0 ;
  assign extracter2_fifo_output_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_stage0_reg
  assign extracter2_fifo_stage0_reg$D_IN = 10'h0 ;
  assign extracter2_fifo_stage0_reg$ENQ = 1'b0 ;
  assign extracter2_fifo_stage0_reg$DEQ = 1'b0 ;
  assign extracter2_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_stage1_reg
  assign extracter2_fifo_stage1_reg$D_IN = 15'h0 ;
  assign extracter2_fifo_stage1_reg$ENQ = 1'b0 ;
  assign extracter2_fifo_stage1_reg$DEQ = 1'b0 ;
  assign extracter2_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_stage2_reg
  assign extracter2_fifo_stage2_reg$D_IN = 13'h0 ;
  assign extracter2_fifo_stage2_reg$ENQ = 1'b0 ;
  assign extracter2_fifo_stage2_reg$DEQ = 1'b0 ;
  assign extracter2_fifo_stage2_reg$CLR = 1'b0 ;

  // submodule ffO
  assign ffO$D_IN = adder_fifo_output_reg$D_OUT ;
  assign ffO$ENQ = CAN_FIRE_RL_rl_out ;
  assign ffO$DEQ = EN_compute_response_get ;
  assign ffO$CLR = 1'b0 ;

  // submodule fftemp
  assign fftemp$D_IN = compute_request_put[47:16] ;
  assign fftemp$ENQ = EN_compute_request_put ;
  assign fftemp$DEQ = CAN_FIRE_RL_rl_connect1 ;
  assign fftemp$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_compute_request_put_BIT_15_48_THEN_0_MIN_ETC___d321 =
	     new_inp__h7426[6] ?
	       ((!INV_new_inp426__q1[6] && !INV_new_inp426__q1[5] &&
		 !INV_new_inp426__q1[4] &&
		 !INV_new_inp426__q1[3] &&
		 !INV_new_inp426__q1[2] &&
		 !INV_new_inp426__q1[1] &&
		 !INV_new_inp426__q1[0]) ?
		  3'd7 :
		  3'd6) -
	       x__h7800 :
	       ((!new_inp__h7426[5] && !new_inp__h7426[4] &&
		 !new_inp__h7426[3] &&
		 !new_inp__h7426[2] &&
		 !new_inp__h7426[1] &&
		 !new_inp__h7426[0]) ?
		  3'd7 :
		  3'd6) -
	       x__h8818 ;
  assign IF_IF_compute_request_put_BIT_7_50_THEN_0_MINU_ETC___d423 =
	     new_inp__h10152[6] ?
	       ((!INV_new_inp0152__q2[6] && !INV_new_inp0152__q2[5] &&
		 !INV_new_inp0152__q2[4] &&
		 !INV_new_inp0152__q2[3] &&
		 !INV_new_inp0152__q2[2] &&
		 !INV_new_inp0152__q2[1] &&
		 !INV_new_inp0152__q2[0]) ?
		  3'd7 :
		  3'd6) -
	       x__h10517 :
	       ((!new_inp__h10152[5] && !new_inp__h10152[4] &&
		 !new_inp__h10152[3] &&
		 !new_inp__h10152[2] &&
		 !new_inp__h10152[1] &&
		 !new_inp__h10152[0]) ?
		  3'd7 :
		  3'd6) -
	       x__h11535 ;
  assign IF_INV_NOT_IF_NOT_adder_fifo_stage0_reg_first__ETC___d151 =
	     (all_bits_0__h2617 & y__h4646 &&
	      adder_fifo_stage0_reg$D_OUT[4:3] == 2'd0 &&
	      adder_fifo_stage0_reg$D_OUT[2:1] == 2'd0) ?
	       32'd0 :
	       x__h4670 ;
  assign IF_NOT_fftemp_first__18_BIT_31_19_20_AND_NOT_d_ETC___d233 =
	     (!fftemp$D_OUT[31] && !divider_fifo_output_reg$D_OUT[33] &&
	      fftemp_first__18_PLUS_divider_fifo_output_reg__ETC___d226[31]) ?
	       32'h7FFFFFFF :
	       ((fftemp$D_OUT[31] && divider_fifo_output_reg$D_OUT[33] &&
		 !fftemp_first__18_PLUS_divider_fifo_output_reg__ETC___d226[31]) ?
		  32'h80000000 :
		  fftemp_first__18_PLUS_divider_fifo_output_reg__ETC___d226) ;
  assign IF_compute_request_put_BITS_14_TO_8_46_EQ_0_47_ETC___d346 =
	     (compute_request_put[14:8] == 7'd0 && !compute_request_put[15]) ?
	       9'd0 :
	       { SEXT_IF_IF_compute_request_put_BIT_15_48_THEN__ETC___d292 +
		 { 4'd0, expo__h7433 },
		 frac__h7434 } ;
  assign IF_compute_request_put_BITS_6_TO_0_48_EQ_0_49__ETC___d448 =
	     (compute_request_put[6:0] == 7'd0 && !compute_request_put[7]) ?
	       9'd0 :
	       { SEXT_IF_IF_compute_request_put_BIT_7_50_THEN_0_ETC___d394 +
		 { 4'd0, expo__h10159 },
		 frac__h10160 } ;
  assign IF_divider_fifo_stage0_reg_first__2_BIT_5_4_AN_ETC___d102 =
	     (divider_fifo_stage0_reg$D_OUT[5] &&
	      NOT_IF_divider_fifo_stage0_reg_first__2_BIT_5__ETC___d51) ?
	       { truncated_frac_msb___1__h2120,
		 truncated_frac_zero___1__h2122 } :
	       { divider_intDivide_fifo_output_reg$D_OUT[1],
		 truncated_frac_zero__h1938 } ;
  assign IF_divider_fifo_stage0_reg_first__2_BIT_5_4_AN_ETC___d64 =
	     (divider_fifo_stage0_reg$D_OUT[5] &&
	      NOT_IF_divider_fifo_stage0_reg_first__2_BIT_5__ETC___d51 ||
	      (IF_divider_fifo_stage0_reg_first__2_BIT_5_4_TH_ETC___d48 +
	       6'd2 ^
	       6'h20) <=
	      6'd32) ?
	       7'd0 :
	       x__h2076[6:0] ;
  assign IF_divider_fifo_stage0_reg_first__2_BIT_5_4_AN_ETC___d73 =
	     (divider_fifo_stage0_reg$D_OUT[5] &&
	      NOT_IF_divider_fifo_stage0_reg_first__2_BIT_5__ETC___d51) ?
	       f_new___1__h2119 :
	       f_new__h2063 ;
  assign IF_divider_fifo_stage0_reg_first__2_BIT_5_4_TH_ETC___d48 =
	     (divider_fifo_stage0_reg$D_OUT[5] ?
		-divider_fifo_stage0_reg$D_OUT[5:0] :
		divider_fifo_stage0_reg$D_OUT[5:0]) -
	     6'd12 ;
  assign IF_divider_fifo_stage0_reg_first__2_BIT_5_4_TH_ETC___d49 =
	     IF_divider_fifo_stage0_reg_first__2_BIT_5_4_TH_ETC___d48 + 6'd8 ;
  assign IF_extracter1_fifo_output_reg_first__59_BITS_1_ETC___d166 =
	     (extracter1_fifo_output_reg$D_OUT[11:10] == 2'd2) ?
	       2'b01 :
	       ((extracter2_fifo_output_reg$D_OUT[11:10] == 2'd2) ?
		  extracter2_fifo_output_reg$D_OUT[11:10] :
		  2'b11) ;
  assign IF_new_inp0152_BIT_6_THEN_b0507_ELSE_b0509__q3 =
	     new_inp__h10152[6] ? b__h10507 : b__h10509 ;
  assign IF_new_inp426_BIT_6_THEN_b790_ELSE_b792__q5 =
	     new_inp__h7426[6] ? b__h7790 : b__h7792 ;
  assign INV_new_inp0152__q2 = ~new_inp__h10152 ;
  assign INV_new_inp426__q1 = ~new_inp__h7426 ;
  assign NEG_extracter2_fifo_output_regD_OUT_BITS_8_TO_4__q8 =
	     -extracter2_fifo_output_reg$D_OUT[8:4] ;
  assign NOT_IF_divider_fifo_stage0_reg_first__2_BIT_5__ETC___d51 =
	     (IF_divider_fifo_stage0_reg_first__2_BIT_5_4_TH_ETC___d49 ^
	      6'h20) >
	     6'd32 ;
  assign SEXT_IF_IF_compute_request_put_BIT_15_48_THEN__ETC___d292 =
	     { SEXT_IF_new_inp426_BIT_6_THEN_b790_ELSE_b792__q6[3:0], 1'd0 } ;
  assign SEXT_IF_IF_compute_request_put_BIT_7_50_THEN_0_ETC___d394 =
	     { SEXT_IF_new_inp0152_BIT_6_THEN_b0507_ELSE_b0509__q4[3:0],
	       1'd0 } ;
  assign SEXT_IF_adder_fifo_stage0_reg_first__08_BIT_7__ETC___d118 =
	     { {30{truncated_frac__h2614[1]}}, truncated_frac__h2614 } ;
  assign SEXT_IF_new_inp0152_BIT_6_THEN_b0507_ELSE_b0509__q4 =
	     { IF_new_inp0152_BIT_6_THEN_b0507_ELSE_b0509__q3[3],
	       IF_new_inp0152_BIT_6_THEN_b0507_ELSE_b0509__q3 } ;
  assign SEXT_IF_new_inp426_BIT_6_THEN_b790_ELSE_b792__q6 =
	     { IF_new_inp426_BIT_6_THEN_b790_ELSE_b792__q5[3],
	       IF_new_inp426_BIT_6_THEN_b790_ELSE_b792__q5 } ;
  assign adder_fifo_stage0_reg_first__08_BITS_38_TO_7_2_ETC___d123 =
	     adder_fifo_stage0_reg$D_OUT[38:7] +
	     SEXT_IF_adder_fifo_stage0_reg_first__08_BIT_7__ETC___d118 ;
  assign all_bits_0__h2617 = ~(x__h2639[30:0] != 31'd0) ;
  assign b__h10507 = { 1'd0, x__h10517 } - 4'd1 ;
  assign b__h10509 = 4'd0 - x__h11528 ;
  assign b__h7790 = { 1'd0, x__h7800 } - 4'd1 ;
  assign b__h7792 = 4'd0 - x__h8811 ;
  assign denom__h4852 =
	     { IF_extracter1_fifo_output_reg_first__59_BITS_1_ETC___d166[0],
	       extracter2_fifo_output_reg$D_OUT[3:0] } ;
  assign divider_intDivide_rg_denom2_ULE_0_CONCAT_divid_ETC___d7 =
	     divider_intDivide_rg_denom2 <= y__h1477 ;
  assign divider_intDivide_rg_numer_ULT_0_CONCAT_divide_ETC___d16 =
	     divider_intDivide_rg_numer < y__h1574 ;
  assign divider_intDivide_rg_numer_ULT_divider_intDivi_ETC___d27 =
	     divider_intDivide_rg_numer < divider_intDivide_rg_denom2 ;
  assign expo__h10159 =
	     (IF_IF_compute_request_put_BIT_7_50_THEN_0_MINU_ETC___d423 ==
	      3'd0) ?
	       3'd1 -
	       IF_IF_compute_request_put_BIT_7_50_THEN_0_MINU_ETC___d423 ==
	       3'd0 &&
	       new_inp__h10152[0] :
	       new_inp__h10152[x__h12716] ;
  assign expo__h7433 =
	     (IF_IF_compute_request_put_BIT_15_48_THEN_0_MIN_ETC___d321 ==
	      3'd0) ?
	       3'd1 -
	       IF_IF_compute_request_put_BIT_15_48_THEN_0_MIN_ETC___d321 ==
	       3'd0 &&
	       new_inp__h7426[0] :
	       new_inp__h7426[x__h9999] ;
  assign extracter1_fifo_output_regD_OUT_BITS_8_TO_4__q7 =
	     extracter1_fifo_output_reg$D_OUT[8:4] ;
  assign extracter1_fifo_output_reg_first__59_BIT_9_02__ETC___d211 =
	     { x__h5266,
	       { extracter1_fifo_output_regD_OUT_BITS_8_TO_4__q7[4],
		 extracter1_fifo_output_regD_OUT_BITS_8_TO_4__q7 } +
	       { NEG_extracter2_fifo_output_regD_OUT_BITS_8_TO_4__q8[4],
		 NEG_extracter2_fifo_output_regD_OUT_BITS_8_TO_4__q8 } } ;
  assign f__h1929 = { 1'b0, divider_intDivide_fifo_output_reg$D_OUT[10:2] } ;
  assign f_new___1__h2119 =
	     f_new__h1934 >>
	     IF_divider_fifo_stage0_reg_first__2_BIT_5_4_TH_ETC___d49 ;
  assign f_new__h1934 =
	     { 15'd0, divider_intDivide_fifo_output_reg$D_OUT[10:2] } ;
  assign f_new__h2063 = f_new__h1934 << x__h2200 ;
  assign fftemp_first__18_PLUS_divider_fifo_output_reg__ETC___d226 =
	     fftemp$D_OUT + divider_fifo_output_reg$D_OUT[33:2] ;
  assign flag_truncated_frac__h2612 =
	     x__h3233 | adder_fifo_stage0_reg$D_OUT[5] ;
  assign frac__h10160 = new_inp__h10152[3:0] << x__h12765 ;
  assign frac__h7434 = new_inp__h7426[3:0] << x__h10048 ;
  assign mask1__h2121 = ~x__h2301 ;
  assign new_inp__h10152 =
	     compute_request_put[7] ?
	       7'd0 - compute_request_put[6:0] :
	       compute_request_put[6:0] ;
  assign new_inp__h7426 =
	     compute_request_put[15] ?
	       7'd0 - compute_request_put[14:8] :
	       compute_request_put[14:8] ;
  assign numer__h4851 =
	     { IF_extracter1_fifo_output_reg_first__59_BITS_1_ETC___d166[1],
	       extracter1_fifo_output_reg$D_OUT[3:0] } ;
  assign truncated_frac__h2614 =
	     flag_truncated_frac__h2612 ?
	       { adder_fifo_stage0_reg$D_OUT[38],
		 flag_truncated_frac__h2612 } :
	       2'b0 ;
  assign truncated_frac_msb___1__h2120 =
	     NOT_IF_divider_fifo_stage0_reg_first__2_BIT_5__ETC___d51 &&
	     f__h1929[x__h2277[3:0]] ;
  assign truncated_frac_zero___1__h2122 =
	     (IF_divider_fifo_stage0_reg_first__2_BIT_5_4_TH_ETC___d49 ^
	      6'h20) <=
	     6'd33 ||
	     (f_new__h1934 & mask1__h2121) == 24'd0 ;
  assign truncated_frac_zero__h1938 =
	     x__h2358 & divider_intDivide_fifo_output_reg$D_OUT[0] ;
  assign twos_complement_carry_int_frac__h1887 =
	     { divider_fifo_stage0_reg$D_OUT[6],
	       divider_fifo_stage0_reg$D_OUT[6] ?
		 31'd0 - x__h2210 :
		 x__h2210 } ;
  assign x__h10517 =
	     INV_new_inp0152__q2[6] ?
	       3'd0 :
	       (INV_new_inp0152__q2[5] ?
		  3'd1 :
		  (INV_new_inp0152__q2[4] ?
		     3'd2 :
		     (INV_new_inp0152__q2[3] ?
			3'd3 :
			(INV_new_inp0152__q2[2] ?
			   3'd4 :
			   (INV_new_inp0152__q2[1] ?
			      3'd5 :
			      (INV_new_inp0152__q2[0] ? 3'd6 : 3'd7)))))) ;
  assign x__h11528 = { 1'd0, x__h11535 } ;
  assign x__h11535 =
	     new_inp__h10152[6] ?
	       3'd0 :
	       (new_inp__h10152[5] ?
		  3'd1 :
		  (new_inp__h10152[4] ?
		     3'd2 :
		     (new_inp__h10152[3] ?
			3'd3 :
			(new_inp__h10152[2] ?
			   3'd4 :
			   (new_inp__h10152[1] ?
			      3'd5 :
			      (new_inp__h10152[0] ? 3'd6 : 3'd7)))))) ;
  assign x__h12716 =
	     IF_IF_compute_request_put_BIT_7_50_THEN_0_MINU_ETC___d423 -
	     3'd1 ;
  assign x__h1751 = divider_intDivide_rg_numer[3:0] == 4'd0 ;
  assign x__h2076 = f__h1929 >> x__h2112 ;
  assign x__h2112 =
	     6'd8 - IF_divider_fifo_stage0_reg_first__2_BIT_5_4_TH_ETC___d48 ;
  assign x__h2200 = divider_fifo_stage0_reg$D_OUT[5:0] + 6'd4 ;
  assign x__h2210 =
	     { IF_divider_fifo_stage0_reg_first__2_BIT_5_4_AN_ETC___d64,
	       IF_divider_fifo_stage0_reg_first__2_BIT_5_4_AN_ETC___d73 } ;
  assign x__h2277 =
	     IF_divider_fifo_stage0_reg_first__2_BIT_5_4_TH_ETC___d49 - 6'd1 ;
  assign x__h2301 = 24'd16777215 >> x__h2277 ;
  assign x__h2358 = ~divider_intDivide_fifo_output_reg$D_OUT[1] ;
  assign x__h2632 = x__h2634 | adder_fifo_stage0_reg$D_OUT[0] ;
  assign x__h2634 = all_bits_0__h2617 & adder_fifo_stage0_reg$D_OUT[38] ;
  assign x__h2639 =
	     (!adder_fifo_stage0_reg$D_OUT[38] &&
	      !SEXT_IF_adder_fifo_stage0_reg_first__08_BIT_7__ETC___d118[31] &&
	      adder_fifo_stage0_reg_first__08_BITS_38_TO_7_2_ETC___d123[31]) ?
	       32'h7FFFFFFF :
	       ((adder_fifo_stage0_reg$D_OUT[38] &&
		 SEXT_IF_adder_fifo_stage0_reg_first__08_BIT_7__ETC___d118[31] &&
		 !adder_fifo_stage0_reg_first__08_BITS_38_TO_7_2_ETC___d123[31]) ?
		  32'h80000000 :
		  adder_fifo_stage0_reg_first__08_BITS_38_TO_7_2_ETC___d123) ;
  assign x__h3233 =
	     adder_fifo_stage0_reg$D_OUT[7] & adder_fifo_stage0_reg$D_OUT[6] ;
  assign x__h4670 = { adder_fifo_stage0_reg$D_OUT[38], x__h2639[30:0] } ;
  assign x__h5160 =
	     extracter1_fifo_output_reg$D_OUT[11:10] == 2'd1 &&
	     extracter2_fifo_output_reg$D_OUT[11:10] == 2'd2 ||
	     extracter2_fifo_output_reg$D_OUT[11:10] == 2'd1 &&
	     extracter1_fifo_output_reg$D_OUT[11:10] == 2'd1 ;
  assign x__h5266 =
	     extracter1_fifo_output_reg$D_OUT[9] ^
	     extracter2_fifo_output_reg$D_OUT[9] ;
  assign x__h7292 =
	     divider_fifo_output_reg$D_OUT[1] &
	     divider_fifo_output_reg$D_OUT[0] ;
  assign x__h7297 = divider_fifo_output_reg$D_OUT[1] & y__h7310 ;
  assign x__h7800 =
	     INV_new_inp426__q1[6] ?
	       3'd0 :
	       (INV_new_inp426__q1[5] ?
		  3'd1 :
		  (INV_new_inp426__q1[4] ?
		     3'd2 :
		     (INV_new_inp426__q1[3] ?
			3'd3 :
			(INV_new_inp426__q1[2] ?
			   3'd4 :
			   (INV_new_inp426__q1[1] ?
			      3'd5 :
			      (INV_new_inp426__q1[0] ? 3'd6 : 3'd7)))))) ;
  assign x__h8811 = { 1'd0, x__h8818 } ;
  assign x__h8818 =
	     new_inp__h7426[6] ?
	       3'd0 :
	       (new_inp__h7426[5] ?
		  3'd1 :
		  (new_inp__h7426[4] ?
		     3'd2 :
		     (new_inp__h7426[3] ?
			3'd3 :
			(new_inp__h7426[2] ?
			   3'd4 :
			   (new_inp__h7426[1] ?
			      3'd5 :
			      (new_inp__h7426[0] ? 3'd6 : 3'd7)))))) ;
  assign x__h9999 =
	     IF_IF_compute_request_put_BIT_15_48_THEN_0_MIN_ETC___d321 -
	     3'd1 ;
  assign y__h1477 = { 1'd0, divider_intDivide_rg_numer[12:1] } ;
  assign y__h1574 = { 8'd0, divider_intDivide_rg_denom } ;
  assign y__h2633 =
	     adder_fifo_stage0_reg$D_OUT[4:3] == 2'd1 ||
	     adder_fifo_stage0_reg$D_OUT[2:1] == 2'd1 ;
  assign y__h4646 = ~adder_fifo_stage0_reg$D_OUT[38] ;
  assign y__h7310 = ~divider_fifo_output_reg$D_OUT[0] ;
  always@(IF_IF_compute_request_put_BIT_15_48_THEN_0_MIN_ETC___d321)
  begin
    case (IF_IF_compute_request_put_BIT_15_48_THEN_0_MIN_ETC___d321)
      3'd2: x__h10048 = 4'd3;
      3'd3: x__h10048 = 4'd2;
      3'd4: x__h10048 = 4'd1;
      3'd5: x__h10048 = 4'd0;
      default: x__h10048 =
		   (IF_IF_compute_request_put_BIT_15_48_THEN_0_MIN_ETC___d321 <=
		    3'd1) ?
		     4'd4 :
		     4'd0;
    endcase
  end
  always@(IF_IF_compute_request_put_BIT_7_50_THEN_0_MINU_ETC___d423)
  begin
    case (IF_IF_compute_request_put_BIT_7_50_THEN_0_MINU_ETC___d423)
      3'd2: x__h12765 = 4'd3;
      3'd3: x__h12765 = 4'd2;
      3'd4: x__h12765 = 4'd1;
      3'd5: x__h12765 = 4'd0;
      default: x__h12765 =
		   (IF_IF_compute_request_put_BIT_7_50_THEN_0_MINU_ETC___d423 <=
		    3'd1) ?
		     4'd4 :
		     4'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        divider_intDivide_rg_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (divider_intDivide_rg_state$EN)
	  divider_intDivide_rg_state <= `BSV_ASSIGNMENT_DELAY
	      divider_intDivide_rg_state$D_IN;
      end
    if (divider_intDivide_rg_denom$EN)
      divider_intDivide_rg_denom <= `BSV_ASSIGNMENT_DELAY
	  divider_intDivide_rg_denom$D_IN;
    if (divider_intDivide_rg_denom2$EN)
      divider_intDivide_rg_denom2 <= `BSV_ASSIGNMENT_DELAY
	  divider_intDivide_rg_denom2$D_IN;
    if (divider_intDivide_rg_n$EN)
      divider_intDivide_rg_n <= `BSV_ASSIGNMENT_DELAY
	  divider_intDivide_rg_n$D_IN;
    if (divider_intDivide_rg_numer$EN)
      divider_intDivide_rg_numer <= `BSV_ASSIGNMENT_DELAY
	  divider_intDivide_rg_numer$D_IN;
    if (divider_intDivide_rg_quo$EN)
      divider_intDivide_rg_quo <= `BSV_ASSIGNMENT_DELAY
	  divider_intDivide_rg_quo$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    divider_intDivide_rg_denom = 5'h0A;
    divider_intDivide_rg_denom2 = 13'h0AAA;
    divider_intDivide_rg_n = 9'h0AA;
    divider_intDivide_rg_numer = 13'h0AAA;
    divider_intDivide_rg_quo = 9'h0AA;
    divider_intDivide_rg_state = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkPNE_test

