//
// Generated by Bluespec Compiler (build 16071ee)
//
// On Wed Sep 16 14:07:56 IST 2020
//
//
// Ports:
// Name                         I/O  size props
// RDY_compute_request_put        O     1
// compute_response_get           O    32 reg
// RDY_compute_response_get       O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// compute_request_put            I    48
// EN_compute_request_put         I     1
// EN_compute_response_get        I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPNE_test(CLK,
		  RST_N,

		  compute_request_put,
		  EN_compute_request_put,
		  RDY_compute_request_put,

		  EN_compute_response_get,
		  compute_response_get,
		  RDY_compute_response_get);
  input  CLK;
  input  RST_N;

  // action method compute_request_put
  input  [47 : 0] compute_request_put;
  input  EN_compute_request_put;
  output RDY_compute_request_put;

  // actionvalue method compute_response_get
  input  EN_compute_response_get;
  output [31 : 0] compute_response_get;
  output RDY_compute_response_get;

  // signals for module outputs
  wire [31 : 0] compute_response_get;
  wire RDY_compute_request_put, RDY_compute_response_get;

  // ports of submodule adder_fifo_output_reg
  wire [31 : 0] adder_fifo_output_reg$D_IN, adder_fifo_output_reg$D_OUT;
  wire adder_fifo_output_reg$CLR,
       adder_fifo_output_reg$DEQ,
       adder_fifo_output_reg$EMPTY_N,
       adder_fifo_output_reg$ENQ,
       adder_fifo_output_reg$FULL_N;

  // ports of submodule adder_fifo_stage0_reg
  wire [38 : 0] adder_fifo_stage0_reg$D_IN, adder_fifo_stage0_reg$D_OUT;
  wire adder_fifo_stage0_reg$CLR,
       adder_fifo_stage0_reg$DEQ,
       adder_fifo_stage0_reg$EMPTY_N,
       adder_fifo_stage0_reg$ENQ,
       adder_fifo_stage0_reg$FULL_N;

  // ports of submodule extracter1_fifo_output_reg
  wire [11 : 0] extracter1_fifo_output_reg$D_IN,
		extracter1_fifo_output_reg$D_OUT;
  wire extracter1_fifo_output_reg$CLR,
       extracter1_fifo_output_reg$DEQ,
       extracter1_fifo_output_reg$EMPTY_N,
       extracter1_fifo_output_reg$ENQ,
       extracter1_fifo_output_reg$FULL_N;

  // ports of submodule extracter1_fifo_stage0_reg
  wire [9 : 0] extracter1_fifo_stage0_reg$D_IN;
  wire extracter1_fifo_stage0_reg$CLR,
       extracter1_fifo_stage0_reg$DEQ,
       extracter1_fifo_stage0_reg$ENQ;

  // ports of submodule extracter1_fifo_stage1_reg
  wire [14 : 0] extracter1_fifo_stage1_reg$D_IN;
  wire extracter1_fifo_stage1_reg$CLR,
       extracter1_fifo_stage1_reg$DEQ,
       extracter1_fifo_stage1_reg$ENQ;

  // ports of submodule extracter1_fifo_stage2_reg
  wire [12 : 0] extracter1_fifo_stage2_reg$D_IN;
  wire extracter1_fifo_stage2_reg$CLR,
       extracter1_fifo_stage2_reg$DEQ,
       extracter1_fifo_stage2_reg$ENQ;

  // ports of submodule extracter2_fifo_output_reg
  wire [11 : 0] extracter2_fifo_output_reg$D_IN,
		extracter2_fifo_output_reg$D_OUT;
  wire extracter2_fifo_output_reg$CLR,
       extracter2_fifo_output_reg$DEQ,
       extracter2_fifo_output_reg$EMPTY_N,
       extracter2_fifo_output_reg$ENQ,
       extracter2_fifo_output_reg$FULL_N;

  // ports of submodule extracter2_fifo_stage0_reg
  wire [9 : 0] extracter2_fifo_stage0_reg$D_IN;
  wire extracter2_fifo_stage0_reg$CLR,
       extracter2_fifo_stage0_reg$DEQ,
       extracter2_fifo_stage0_reg$ENQ;

  // ports of submodule extracter2_fifo_stage1_reg
  wire [14 : 0] extracter2_fifo_stage1_reg$D_IN;
  wire extracter2_fifo_stage1_reg$CLR,
       extracter2_fifo_stage1_reg$DEQ,
       extracter2_fifo_stage1_reg$ENQ;

  // ports of submodule extracter2_fifo_stage2_reg
  wire [12 : 0] extracter2_fifo_stage2_reg$D_IN;
  wire extracter2_fifo_stage2_reg$CLR,
       extracter2_fifo_stage2_reg$DEQ,
       extracter2_fifo_stage2_reg$ENQ;

  // ports of submodule ffO
  wire [31 : 0] ffO$D_IN, ffO$D_OUT;
  wire ffO$CLR, ffO$DEQ, ffO$EMPTY_N, ffO$ENQ, ffO$FULL_N;

  // ports of submodule fftemp
  wire [31 : 0] fftemp$D_IN, fftemp$D_OUT;
  wire fftemp$CLR, fftemp$DEQ, fftemp$EMPTY_N, fftemp$ENQ, fftemp$FULL_N;

  // ports of submodule multiplier_fifo_output_reg
  wire [36 : 0] multiplier_fifo_output_reg$D_IN,
		multiplier_fifo_output_reg$D_OUT;
  wire multiplier_fifo_output_reg$CLR,
       multiplier_fifo_output_reg$DEQ,
       multiplier_fifo_output_reg$EMPTY_N,
       multiplier_fifo_output_reg$ENQ,
       multiplier_fifo_output_reg$FULL_N;

  // ports of submodule multiplier_fifo_stage0_reg
  wire [19 : 0] multiplier_fifo_stage0_reg$D_IN,
		multiplier_fifo_stage0_reg$D_OUT;
  wire multiplier_fifo_stage0_reg$CLR,
       multiplier_fifo_stage0_reg$DEQ,
       multiplier_fifo_stage0_reg$EMPTY_N,
       multiplier_fifo_stage0_reg$ENQ,
       multiplier_fifo_stage0_reg$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_adder_stage_1,
       CAN_FIRE_RL_multiplier_stage_1,
       CAN_FIRE_RL_rl_connect0,
       CAN_FIRE_RL_rl_connect1,
       CAN_FIRE_RL_rl_out,
       CAN_FIRE_compute_request_put,
       CAN_FIRE_compute_response_get,
       WILL_FIRE_RL_adder_stage_1,
       WILL_FIRE_RL_multiplier_stage_1,
       WILL_FIRE_RL_rl_connect0,
       WILL_FIRE_RL_rl_connect1,
       WILL_FIRE_RL_rl_out,
       WILL_FIRE_compute_request_put,
       WILL_FIRE_compute_response_get;

  // remaining internal signals
  reg [3 : 0] x__h12020, x__h9303;
  wire [31 : 0] IF_INV_NOT_IF_NOT_adder_fifo_stage0_reg_first__ETC___d107,
		IF_NOT_fftemp_first__58_BIT_31_59_60_AND_NOT_m_ETC___d173,
		SEXT_IF_adder_fifo_stage0_reg_first__4_BIT_7_7_ETC___d74,
		adder_fifo_stage0_reg_first__4_BITS_38_TO_7_8__ETC___d79,
		fftemp_first__58_PLUS_multiplier_fifo_output_r_ETC___d166,
		twos_complement_carry_int_frac__h1227,
		x__h1998,
		x__h4029;
  wire [30 : 0] x__h1566;
  wire [23 : 0] IF_multiplier_fifo_stage0_reg_first_BIT_15_AND_ETC___d33,
		f_new___1__h1475,
		f_new__h1277,
		f_new__h1422,
		mask1__h1477,
		x__h1658;
  wire [19 : 0] _0_CONCAT_IF_extracter1_fifo_output_reg_first___ETC___d149;
  wire [16 : 0] extracter1_fifo_output_reg_first__14_BIT_9_29__ETC___d151;
  wire [9 : 0] multiplier_fifo_stage0_regD_OUT_BITS_9_TO_0__q3, x__h1435;
  wire [8 : 0] IF_compute_request_put_BITS_14_TO_8_86_EQ_0_87_ETC___d286,
	       IF_compute_request_put_BITS_6_TO_0_88_EQ_0_89__ETC___d388;
  wire [6 : 0] IF_multiplier_fifo_stage0_reg_first_BIT_15_AND_ETC___d24,
	       INV_new_inp407__q2,
	       INV_new_inp681__q1,
	       new_inp__h6681,
	       new_inp__h9407;
  wire [5 : 0] IF_multiplier_fifo_stage0_reg_first_BIT_15_THE_ETC___d10,
	       IF_multiplier_fifo_stage0_reg_first_BIT_15_THE_ETC___d11,
	       x__h1468,
	       x__h1556,
	       x__h1634;
  wire [4 : 0] SEXT_IF_IF_compute_request_put_BIT_15_88_THEN__ETC___d232,
	       SEXT_IF_IF_compute_request_put_BIT_7_90_THEN_0_ETC___d334,
	       SEXT_IF_new_inp407_BIT_6_THEN_b762_ELSE_b764__q5,
	       SEXT_IF_new_inp681_BIT_6_THEN_b045_ELSE_b047__q7,
	       extracter1_fifo_output_regD_OUT_BITS_8_TO_4__q8,
	       extracter2_fifo_output_regD_OUT_BITS_8_TO_4__q9,
	       f1__h4291,
	       f2__h4292;
  wire [3 : 0] IF_new_inp407_BIT_6_THEN_b762_ELSE_b764__q4,
	       IF_new_inp681_BIT_6_THEN_b045_ELSE_b047__q6,
	       b__h7045,
	       b__h7047,
	       b__h9762,
	       b__h9764,
	       frac__h6689,
	       frac__h9415,
	       x__h10783,
	       x__h8066;
  wire [2 : 0] IF_IF_compute_request_put_BIT_15_88_THEN_0_MIN_ETC___d261,
	       IF_IF_compute_request_put_BIT_7_90_THEN_0_MINU_ETC___d363,
	       x__h10790,
	       x__h11971,
	       x__h7055,
	       x__h8073,
	       x__h9254,
	       x__h9772;
  wire [1 : 0] IF_extracter1_fifo_output_reg_first__14_BITS_1_ETC___d133,
	       truncated_frac__h1973;
  wire IF_multiplier_fifo_stage0_reg_first_BIT_15_THE_ETC___d12,
       all_bits_0__h1976,
       expo__h6688,
       expo__h9414,
       flag_truncated_frac__h1971,
       x__h1597,
       x__h1641,
       x__h1991,
       x__h1993,
       x__h2592,
       x__h4199,
       x__h4284,
       x__h4306,
       x__h4308,
       x__h6547,
       x__h6552,
       y__h1992,
       y__h4005,
       y__h6565;

  // action method compute_request_put
  assign RDY_compute_request_put =
	     extracter1_fifo_output_reg$FULL_N &&
	     extracter2_fifo_output_reg$FULL_N &&
	     fftemp$FULL_N ;
  assign CAN_FIRE_compute_request_put =
	     extracter1_fifo_output_reg$FULL_N &&
	     extracter2_fifo_output_reg$FULL_N &&
	     fftemp$FULL_N ;
  assign WILL_FIRE_compute_request_put = EN_compute_request_put ;

  // actionvalue method compute_response_get
  assign compute_response_get = ffO$D_OUT ;
  assign RDY_compute_response_get = ffO$EMPTY_N ;
  assign CAN_FIRE_compute_response_get = ffO$EMPTY_N ;
  assign WILL_FIRE_compute_response_get = EN_compute_response_get ;

  // submodule adder_fifo_output_reg
  FIFO2 #(.width(32'd32), .guarded(32'd1)) adder_fifo_output_reg(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(adder_fifo_output_reg$D_IN),
								 .ENQ(adder_fifo_output_reg$ENQ),
								 .DEQ(adder_fifo_output_reg$DEQ),
								 .CLR(adder_fifo_output_reg$CLR),
								 .D_OUT(adder_fifo_output_reg$D_OUT),
								 .FULL_N(adder_fifo_output_reg$FULL_N),
								 .EMPTY_N(adder_fifo_output_reg$EMPTY_N));

  // submodule adder_fifo_stage0_reg
  FIFO2 #(.width(32'd39), .guarded(32'd1)) adder_fifo_stage0_reg(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(adder_fifo_stage0_reg$D_IN),
								 .ENQ(adder_fifo_stage0_reg$ENQ),
								 .DEQ(adder_fifo_stage0_reg$DEQ),
								 .CLR(adder_fifo_stage0_reg$CLR),
								 .D_OUT(adder_fifo_stage0_reg$D_OUT),
								 .FULL_N(adder_fifo_stage0_reg$FULL_N),
								 .EMPTY_N(adder_fifo_stage0_reg$EMPTY_N));

  // submodule extracter1_fifo_output_reg
  FIFO2 #(.width(32'd12),
	  .guarded(32'd1)) extracter1_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_output_reg$D_IN),
						      .ENQ(extracter1_fifo_output_reg$ENQ),
						      .DEQ(extracter1_fifo_output_reg$DEQ),
						      .CLR(extracter1_fifo_output_reg$CLR),
						      .D_OUT(extracter1_fifo_output_reg$D_OUT),
						      .FULL_N(extracter1_fifo_output_reg$FULL_N),
						      .EMPTY_N(extracter1_fifo_output_reg$EMPTY_N));

  // submodule extracter1_fifo_stage0_reg
  FIFO2 #(.width(32'd10),
	  .guarded(32'd1)) extracter1_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_stage0_reg$D_IN),
						      .ENQ(extracter1_fifo_stage0_reg$ENQ),
						      .DEQ(extracter1_fifo_stage0_reg$DEQ),
						      .CLR(extracter1_fifo_stage0_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter1_fifo_stage1_reg
  FIFO2 #(.width(32'd15),
	  .guarded(32'd1)) extracter1_fifo_stage1_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_stage1_reg$D_IN),
						      .ENQ(extracter1_fifo_stage1_reg$ENQ),
						      .DEQ(extracter1_fifo_stage1_reg$DEQ),
						      .CLR(extracter1_fifo_stage1_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter1_fifo_stage2_reg
  FIFO2 #(.width(32'd13),
	  .guarded(32'd1)) extracter1_fifo_stage2_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_stage2_reg$D_IN),
						      .ENQ(extracter1_fifo_stage2_reg$ENQ),
						      .DEQ(extracter1_fifo_stage2_reg$DEQ),
						      .CLR(extracter1_fifo_stage2_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter2_fifo_output_reg
  FIFO2 #(.width(32'd12),
	  .guarded(32'd1)) extracter2_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_output_reg$D_IN),
						      .ENQ(extracter2_fifo_output_reg$ENQ),
						      .DEQ(extracter2_fifo_output_reg$DEQ),
						      .CLR(extracter2_fifo_output_reg$CLR),
						      .D_OUT(extracter2_fifo_output_reg$D_OUT),
						      .FULL_N(extracter2_fifo_output_reg$FULL_N),
						      .EMPTY_N(extracter2_fifo_output_reg$EMPTY_N));

  // submodule extracter2_fifo_stage0_reg
  FIFO2 #(.width(32'd10),
	  .guarded(32'd1)) extracter2_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_stage0_reg$D_IN),
						      .ENQ(extracter2_fifo_stage0_reg$ENQ),
						      .DEQ(extracter2_fifo_stage0_reg$DEQ),
						      .CLR(extracter2_fifo_stage0_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter2_fifo_stage1_reg
  FIFO2 #(.width(32'd15),
	  .guarded(32'd1)) extracter2_fifo_stage1_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_stage1_reg$D_IN),
						      .ENQ(extracter2_fifo_stage1_reg$ENQ),
						      .DEQ(extracter2_fifo_stage1_reg$DEQ),
						      .CLR(extracter2_fifo_stage1_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter2_fifo_stage2_reg
  FIFO2 #(.width(32'd13),
	  .guarded(32'd1)) extracter2_fifo_stage2_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_stage2_reg$D_IN),
						      .ENQ(extracter2_fifo_stage2_reg$ENQ),
						      .DEQ(extracter2_fifo_stage2_reg$DEQ),
						      .CLR(extracter2_fifo_stage2_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule ffO
  FIFO2 #(.width(32'd32), .guarded(32'd1)) ffO(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(ffO$D_IN),
					       .ENQ(ffO$ENQ),
					       .DEQ(ffO$DEQ),
					       .CLR(ffO$CLR),
					       .D_OUT(ffO$D_OUT),
					       .FULL_N(ffO$FULL_N),
					       .EMPTY_N(ffO$EMPTY_N));

  // submodule fftemp
  FIFO2 #(.width(32'd32), .guarded(32'd1)) fftemp(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(fftemp$D_IN),
						  .ENQ(fftemp$ENQ),
						  .DEQ(fftemp$DEQ),
						  .CLR(fftemp$CLR),
						  .D_OUT(fftemp$D_OUT),
						  .FULL_N(fftemp$FULL_N),
						  .EMPTY_N(fftemp$EMPTY_N));

  // submodule multiplier_fifo_output_reg
  FIFO2 #(.width(32'd37),
	  .guarded(32'd1)) multiplier_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(multiplier_fifo_output_reg$D_IN),
						      .ENQ(multiplier_fifo_output_reg$ENQ),
						      .DEQ(multiplier_fifo_output_reg$DEQ),
						      .CLR(multiplier_fifo_output_reg$CLR),
						      .D_OUT(multiplier_fifo_output_reg$D_OUT),
						      .FULL_N(multiplier_fifo_output_reg$FULL_N),
						      .EMPTY_N(multiplier_fifo_output_reg$EMPTY_N));

  // submodule multiplier_fifo_stage0_reg
  FIFO2 #(.width(32'd20),
	  .guarded(32'd1)) multiplier_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(multiplier_fifo_stage0_reg$D_IN),
						      .ENQ(multiplier_fifo_stage0_reg$ENQ),
						      .DEQ(multiplier_fifo_stage0_reg$DEQ),
						      .CLR(multiplier_fifo_stage0_reg$CLR),
						      .D_OUT(multiplier_fifo_stage0_reg$D_OUT),
						      .FULL_N(multiplier_fifo_stage0_reg$FULL_N),
						      .EMPTY_N(multiplier_fifo_stage0_reg$EMPTY_N));

  // rule RL_rl_connect0
  assign CAN_FIRE_RL_rl_connect0 =
	     extracter1_fifo_output_reg$EMPTY_N &&
	     extracter2_fifo_output_reg$EMPTY_N &&
	     multiplier_fifo_stage0_reg$FULL_N ;
  assign WILL_FIRE_RL_rl_connect0 = CAN_FIRE_RL_rl_connect0 ;

  // rule RL_rl_connect1
  assign CAN_FIRE_RL_rl_connect1 =
	     multiplier_fifo_output_reg$EMPTY_N &&
	     adder_fifo_stage0_reg$FULL_N &&
	     fftemp$EMPTY_N ;
  assign WILL_FIRE_RL_rl_connect1 = CAN_FIRE_RL_rl_connect1 ;

  // rule RL_rl_out
  assign CAN_FIRE_RL_rl_out = adder_fifo_output_reg$EMPTY_N && ffO$FULL_N ;
  assign WILL_FIRE_RL_rl_out = CAN_FIRE_RL_rl_out ;

  // rule RL_multiplier_stage_1
  assign CAN_FIRE_RL_multiplier_stage_1 =
	     multiplier_fifo_stage0_reg$EMPTY_N &&
	     multiplier_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_multiplier_stage_1 = CAN_FIRE_RL_multiplier_stage_1 ;

  // rule RL_adder_stage_1
  assign CAN_FIRE_RL_adder_stage_1 =
	     adder_fifo_stage0_reg$EMPTY_N && adder_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_adder_stage_1 = CAN_FIRE_RL_adder_stage_1 ;

  // submodule adder_fifo_output_reg
  assign adder_fifo_output_reg$D_IN =
	     (x__h1991 | y__h1992) ?
	       32'h80000000 :
	       IF_INV_NOT_IF_NOT_adder_fifo_stage0_reg_first__ETC___d107 ;
  assign adder_fifo_output_reg$ENQ = CAN_FIRE_RL_adder_stage_1 ;
  assign adder_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_out ;
  assign adder_fifo_output_reg$CLR = 1'b0 ;

  // submodule adder_fifo_stage0_reg
  assign adder_fifo_stage0_reg$D_IN =
	     { IF_NOT_fftemp_first__58_BIT_31_59_60_AND_NOT_m_ETC___d173,
	       x__h6547,
	       x__h6552,
	       2'd0,
	       multiplier_fifo_output_reg$D_OUT[36:34] } ;
  assign adder_fifo_stage0_reg$ENQ = CAN_FIRE_RL_rl_connect1 ;
  assign adder_fifo_stage0_reg$DEQ = CAN_FIRE_RL_adder_stage_1 ;
  assign adder_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_output_reg
  assign extracter1_fifo_output_reg$D_IN =
	     { (compute_request_put[14:8] == 7'd0 &&
		!compute_request_put[15]) ?
		 2'd2 :
		 ((compute_request_put[14:8] == 7'd0 &&
		   compute_request_put[15]) ?
		    2'd1 :
		    2'd0),
	       compute_request_put[15],
	       IF_compute_request_put_BITS_14_TO_8_86_EQ_0_87_ETC___d286 } ;
  assign extracter1_fifo_output_reg$ENQ = EN_compute_request_put ;
  assign extracter1_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_connect0 ;
  assign extracter1_fifo_output_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_stage0_reg
  assign extracter1_fifo_stage0_reg$D_IN = 10'h0 ;
  assign extracter1_fifo_stage0_reg$ENQ = 1'b0 ;
  assign extracter1_fifo_stage0_reg$DEQ = 1'b0 ;
  assign extracter1_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_stage1_reg
  assign extracter1_fifo_stage1_reg$D_IN = 15'h0 ;
  assign extracter1_fifo_stage1_reg$ENQ = 1'b0 ;
  assign extracter1_fifo_stage1_reg$DEQ = 1'b0 ;
  assign extracter1_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_stage2_reg
  assign extracter1_fifo_stage2_reg$D_IN = 13'h0 ;
  assign extracter1_fifo_stage2_reg$ENQ = 1'b0 ;
  assign extracter1_fifo_stage2_reg$DEQ = 1'b0 ;
  assign extracter1_fifo_stage2_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_output_reg
  assign extracter2_fifo_output_reg$D_IN =
	     { (compute_request_put[6:0] == 7'd0 && !compute_request_put[7]) ?
		 2'd2 :
		 ((compute_request_put[6:0] == 7'd0 &&
		   compute_request_put[7]) ?
		    2'd1 :
		    2'd0),
	       compute_request_put[7],
	       IF_compute_request_put_BITS_6_TO_0_88_EQ_0_89__ETC___d388 } ;
  assign extracter2_fifo_output_reg$ENQ = EN_compute_request_put ;
  assign extracter2_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_connect0 ;
  assign extracter2_fifo_output_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_stage0_reg
  assign extracter2_fifo_stage0_reg$D_IN = 10'h0 ;
  assign extracter2_fifo_stage0_reg$ENQ = 1'b0 ;
  assign extracter2_fifo_stage0_reg$DEQ = 1'b0 ;
  assign extracter2_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_stage1_reg
  assign extracter2_fifo_stage1_reg$D_IN = 15'h0 ;
  assign extracter2_fifo_stage1_reg$ENQ = 1'b0 ;
  assign extracter2_fifo_stage1_reg$DEQ = 1'b0 ;
  assign extracter2_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_stage2_reg
  assign extracter2_fifo_stage2_reg$D_IN = 13'h0 ;
  assign extracter2_fifo_stage2_reg$ENQ = 1'b0 ;
  assign extracter2_fifo_stage2_reg$DEQ = 1'b0 ;
  assign extracter2_fifo_stage2_reg$CLR = 1'b0 ;

  // submodule ffO
  assign ffO$D_IN = adder_fifo_output_reg$D_OUT ;
  assign ffO$ENQ = CAN_FIRE_RL_rl_out ;
  assign ffO$DEQ = EN_compute_response_get ;
  assign ffO$CLR = 1'b0 ;

  // submodule fftemp
  assign fftemp$D_IN = compute_request_put[47:16] ;
  assign fftemp$ENQ = EN_compute_request_put ;
  assign fftemp$DEQ = CAN_FIRE_RL_rl_connect1 ;
  assign fftemp$CLR = 1'b0 ;

  // submodule multiplier_fifo_output_reg
  assign multiplier_fifo_output_reg$D_IN =
	     { (twos_complement_carry_int_frac__h1227 == 32'd0 &&
		multiplier_fifo_stage0_reg$D_OUT[18:17] == 2'd0) ?
		 2'd2 :
		 multiplier_fifo_stage0_reg$D_OUT[18:17],
	       multiplier_fifo_stage0_reg$D_OUT[19],
	       twos_complement_carry_int_frac__h1227,
	       x__h1597,
	       x__h1641 } ;
  assign multiplier_fifo_output_reg$ENQ = CAN_FIRE_RL_multiplier_stage_1 ;
  assign multiplier_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_connect1 ;
  assign multiplier_fifo_output_reg$CLR = 1'b0 ;

  // submodule multiplier_fifo_stage0_reg
  assign multiplier_fifo_stage0_reg$D_IN =
	     { x__h4199,
	       (extracter1_fifo_output_reg$D_OUT[11:10] == 2'd2 &&
		extracter2_fifo_output_reg$D_OUT[11:10] == 2'd2) ?
		 2'd2 :
		 ((extracter1_fifo_output_reg$D_OUT[11:10] == 2'd1 ||
		   extracter2_fifo_output_reg$D_OUT[11:10] == 2'd1) ?
		    2'd1 :
		    2'd0),
	       extracter1_fifo_output_reg_first__14_BIT_9_29__ETC___d151 } ;
  assign multiplier_fifo_stage0_reg$ENQ = CAN_FIRE_RL_rl_connect0 ;
  assign multiplier_fifo_stage0_reg$DEQ = CAN_FIRE_RL_multiplier_stage_1 ;
  assign multiplier_fifo_stage0_reg$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_compute_request_put_BIT_15_88_THEN_0_MIN_ETC___d261 =
	     new_inp__h6681[6] ?
	       ((!INV_new_inp681__q1[6] && !INV_new_inp681__q1[5] &&
		 !INV_new_inp681__q1[4] &&
		 !INV_new_inp681__q1[3] &&
		 !INV_new_inp681__q1[2] &&
		 !INV_new_inp681__q1[1] &&
		 !INV_new_inp681__q1[0]) ?
		  3'd7 :
		  3'd6) -
	       x__h7055 :
	       ((!new_inp__h6681[5] && !new_inp__h6681[4] &&
		 !new_inp__h6681[3] &&
		 !new_inp__h6681[2] &&
		 !new_inp__h6681[1] &&
		 !new_inp__h6681[0]) ?
		  3'd7 :
		  3'd6) -
	       x__h8073 ;
  assign IF_IF_compute_request_put_BIT_7_90_THEN_0_MINU_ETC___d363 =
	     new_inp__h9407[6] ?
	       ((!INV_new_inp407__q2[6] && !INV_new_inp407__q2[5] &&
		 !INV_new_inp407__q2[4] &&
		 !INV_new_inp407__q2[3] &&
		 !INV_new_inp407__q2[2] &&
		 !INV_new_inp407__q2[1] &&
		 !INV_new_inp407__q2[0]) ?
		  3'd7 :
		  3'd6) -
	       x__h9772 :
	       ((!new_inp__h9407[5] && !new_inp__h9407[4] &&
		 !new_inp__h9407[3] &&
		 !new_inp__h9407[2] &&
		 !new_inp__h9407[1] &&
		 !new_inp__h9407[0]) ?
		  3'd7 :
		  3'd6) -
	       x__h10790 ;
  assign IF_INV_NOT_IF_NOT_adder_fifo_stage0_reg_first__ETC___d107 =
	     (all_bits_0__h1976 & y__h4005 &&
	      adder_fifo_stage0_reg$D_OUT[4:3] == 2'd0 &&
	      adder_fifo_stage0_reg$D_OUT[2:1] == 2'd0) ?
	       32'd0 :
	       x__h4029 ;
  assign IF_NOT_fftemp_first__58_BIT_31_59_60_AND_NOT_m_ETC___d173 =
	     (!fftemp$D_OUT[31] && !multiplier_fifo_output_reg$D_OUT[33] &&
	      fftemp_first__58_PLUS_multiplier_fifo_output_r_ETC___d166[31]) ?
	       32'h7FFFFFFF :
	       ((fftemp$D_OUT[31] && multiplier_fifo_output_reg$D_OUT[33] &&
		 !fftemp_first__58_PLUS_multiplier_fifo_output_r_ETC___d166[31]) ?
		  32'h80000000 :
		  fftemp_first__58_PLUS_multiplier_fifo_output_r_ETC___d166) ;
  assign IF_compute_request_put_BITS_14_TO_8_86_EQ_0_87_ETC___d286 =
	     (compute_request_put[14:8] == 7'd0 && !compute_request_put[15]) ?
	       9'd0 :
	       { SEXT_IF_IF_compute_request_put_BIT_15_88_THEN__ETC___d232 +
		 { 4'd0, expo__h6688 },
		 frac__h6689 } ;
  assign IF_compute_request_put_BITS_6_TO_0_88_EQ_0_89__ETC___d388 =
	     (compute_request_put[6:0] == 7'd0 && !compute_request_put[7]) ?
	       9'd0 :
	       { SEXT_IF_IF_compute_request_put_BIT_7_90_THEN_0_ETC___d334 +
		 { 4'd0, expo__h9414 },
		 frac__h9415 } ;
  assign IF_extracter1_fifo_output_reg_first__14_BITS_1_ETC___d133 =
	     (extracter1_fifo_output_reg$D_OUT[11:10] == 2'd2) ?
	       2'b01 :
	       ((extracter2_fifo_output_reg$D_OUT[11:10] == 2'd2) ?
		  extracter2_fifo_output_reg$D_OUT[11:10] :
		  2'b11) ;
  assign IF_multiplier_fifo_stage0_reg_first_BIT_15_AND_ETC___d24 =
	     (multiplier_fifo_stage0_reg$D_OUT[15] &&
	      !IF_multiplier_fifo_stage0_reg_first_BIT_15_THE_ETC___d12 ||
	      (IF_multiplier_fifo_stage0_reg_first_BIT_15_THE_ETC___d10 +
	       6'd2 ^
	       6'h20) <=
	      6'd32) ?
	       7'd0 :
	       x__h1435[6:0] ;
  assign IF_multiplier_fifo_stage0_reg_first_BIT_15_AND_ETC___d33 =
	     (multiplier_fifo_stage0_reg$D_OUT[15] &&
	      !IF_multiplier_fifo_stage0_reg_first_BIT_15_THE_ETC___d12) ?
	       f_new___1__h1475 :
	       f_new__h1422 ;
  assign IF_multiplier_fifo_stage0_reg_first_BIT_15_THE_ETC___d10 =
	     (multiplier_fifo_stage0_reg$D_OUT[15] ?
		-multiplier_fifo_stage0_reg$D_OUT[15:10] :
		multiplier_fifo_stage0_reg$D_OUT[15:10]) -
	     6'd12 ;
  assign IF_multiplier_fifo_stage0_reg_first_BIT_15_THE_ETC___d11 =
	     IF_multiplier_fifo_stage0_reg_first_BIT_15_THE_ETC___d10 + 6'd8 ;
  assign IF_multiplier_fifo_stage0_reg_first_BIT_15_THE_ETC___d12 =
	     (IF_multiplier_fifo_stage0_reg_first_BIT_15_THE_ETC___d11 ^
	      6'h20) <=
	     6'd32 ;
  assign IF_new_inp407_BIT_6_THEN_b762_ELSE_b764__q4 =
	     new_inp__h9407[6] ? b__h9762 : b__h9764 ;
  assign IF_new_inp681_BIT_6_THEN_b045_ELSE_b047__q6 =
	     new_inp__h6681[6] ? b__h7045 : b__h7047 ;
  assign INV_new_inp407__q2 = ~new_inp__h9407 ;
  assign INV_new_inp681__q1 = ~new_inp__h6681 ;
  assign SEXT_IF_IF_compute_request_put_BIT_15_88_THEN__ETC___d232 =
	     { SEXT_IF_new_inp681_BIT_6_THEN_b045_ELSE_b047__q7[3:0], 1'd0 } ;
  assign SEXT_IF_IF_compute_request_put_BIT_7_90_THEN_0_ETC___d334 =
	     { SEXT_IF_new_inp407_BIT_6_THEN_b762_ELSE_b764__q5[3:0], 1'd0 } ;
  assign SEXT_IF_adder_fifo_stage0_reg_first__4_BIT_7_7_ETC___d74 =
	     { {30{truncated_frac__h1973[1]}}, truncated_frac__h1973 } ;
  assign SEXT_IF_new_inp407_BIT_6_THEN_b762_ELSE_b764__q5 =
	     { IF_new_inp407_BIT_6_THEN_b762_ELSE_b764__q4[3],
	       IF_new_inp407_BIT_6_THEN_b762_ELSE_b764__q4 } ;
  assign SEXT_IF_new_inp681_BIT_6_THEN_b045_ELSE_b047__q7 =
	     { IF_new_inp681_BIT_6_THEN_b045_ELSE_b047__q6[3],
	       IF_new_inp681_BIT_6_THEN_b045_ELSE_b047__q6 } ;
  assign _0_CONCAT_IF_extracter1_fifo_output_reg_first___ETC___d149 =
	     { 5'd0, f1__h4291 } * { 5'd0, f2__h4292 } ;
  assign adder_fifo_stage0_reg_first__4_BITS_38_TO_7_8__ETC___d79 =
	     adder_fifo_stage0_reg$D_OUT[38:7] +
	     SEXT_IF_adder_fifo_stage0_reg_first__4_BIT_7_7_ETC___d74 ;
  assign all_bits_0__h1976 = ~(x__h1998[30:0] != 31'd0) ;
  assign b__h7045 = { 1'd0, x__h7055 } - 4'd1 ;
  assign b__h7047 = 4'd0 - x__h8066 ;
  assign b__h9762 = { 1'd0, x__h9772 } - 4'd1 ;
  assign b__h9764 = 4'd0 - x__h10783 ;
  assign expo__h6688 =
	     (IF_IF_compute_request_put_BIT_15_88_THEN_0_MIN_ETC___d261 ==
	      3'd0) ?
	       3'd1 -
	       IF_IF_compute_request_put_BIT_15_88_THEN_0_MIN_ETC___d261 ==
	       3'd0 &&
	       new_inp__h6681[0] :
	       new_inp__h6681[x__h9254] ;
  assign expo__h9414 =
	     (IF_IF_compute_request_put_BIT_7_90_THEN_0_MINU_ETC___d363 ==
	      3'd0) ?
	       3'd1 -
	       IF_IF_compute_request_put_BIT_7_90_THEN_0_MINU_ETC___d363 ==
	       3'd0 &&
	       new_inp__h9407[0] :
	       new_inp__h9407[x__h11971] ;
  assign extracter1_fifo_output_regD_OUT_BITS_8_TO_4__q8 =
	     extracter1_fifo_output_reg$D_OUT[8:4] ;
  assign extracter1_fifo_output_reg_first__14_BIT_9_29__ETC___d151 =
	     { x__h4284,
	       { extracter1_fifo_output_regD_OUT_BITS_8_TO_4__q8[4],
		 extracter1_fifo_output_regD_OUT_BITS_8_TO_4__q8 } +
	       { extracter2_fifo_output_regD_OUT_BITS_8_TO_4__q9[4],
		 extracter2_fifo_output_regD_OUT_BITS_8_TO_4__q9 },
	       _0_CONCAT_IF_extracter1_fifo_output_reg_first___ETC___d149[9:0] } ;
  assign extracter2_fifo_output_regD_OUT_BITS_8_TO_4__q9 =
	     extracter2_fifo_output_reg$D_OUT[8:4] ;
  assign f1__h4291 =
	     { IF_extracter1_fifo_output_reg_first__14_BITS_1_ETC___d133[1],
	       extracter1_fifo_output_reg$D_OUT[3:0] } ;
  assign f2__h4292 =
	     { IF_extracter1_fifo_output_reg_first__14_BITS_1_ETC___d133[0],
	       extracter2_fifo_output_reg$D_OUT[3:0] } ;
  assign f_new___1__h1475 =
	     f_new__h1277 >>
	     IF_multiplier_fifo_stage0_reg_first_BIT_15_THE_ETC___d11 ;
  assign f_new__h1277 = { 14'd0, multiplier_fifo_stage0_reg$D_OUT[9:0] } ;
  assign f_new__h1422 = f_new__h1277 << x__h1556 ;
  assign fftemp_first__58_PLUS_multiplier_fifo_output_r_ETC___d166 =
	     fftemp$D_OUT + multiplier_fifo_output_reg$D_OUT[33:2] ;
  assign flag_truncated_frac__h1971 =
	     x__h2592 | adder_fifo_stage0_reg$D_OUT[5] ;
  assign frac__h6689 = new_inp__h6681[3:0] << x__h9303 ;
  assign frac__h9415 = new_inp__h9407[3:0] << x__h12020 ;
  assign mask1__h1477 = ~x__h1658 ;
  assign multiplier_fifo_stage0_regD_OUT_BITS_9_TO_0__q3 =
	     multiplier_fifo_stage0_reg$D_OUT[9:0] ;
  assign new_inp__h6681 =
	     compute_request_put[15] ?
	       7'd0 - compute_request_put[14:8] :
	       compute_request_put[14:8] ;
  assign new_inp__h9407 =
	     compute_request_put[7] ?
	       7'd0 - compute_request_put[6:0] :
	       compute_request_put[6:0] ;
  assign truncated_frac__h1973 =
	     flag_truncated_frac__h1971 ?
	       { adder_fifo_stage0_reg$D_OUT[38],
		 flag_truncated_frac__h1971 } :
	       2'b0 ;
  assign twos_complement_carry_int_frac__h1227 =
	     { multiplier_fifo_stage0_reg$D_OUT[16],
	       multiplier_fifo_stage0_reg$D_OUT[16] ?
		 31'd0 - x__h1566 :
		 x__h1566 } ;
  assign x__h10783 = { 1'd0, x__h10790 } ;
  assign x__h10790 =
	     new_inp__h9407[6] ?
	       3'd0 :
	       (new_inp__h9407[5] ?
		  3'd1 :
		  (new_inp__h9407[4] ?
		     3'd2 :
		     (new_inp__h9407[3] ?
			3'd3 :
			(new_inp__h9407[2] ?
			   3'd4 :
			   (new_inp__h9407[1] ?
			      3'd5 :
			      (new_inp__h9407[0] ? 3'd6 : 3'd7)))))) ;
  assign x__h11971 =
	     IF_IF_compute_request_put_BIT_7_90_THEN_0_MINU_ETC___d363 -
	     3'd1 ;
  assign x__h1435 = multiplier_fifo_stage0_reg$D_OUT[9:0] >> x__h1468 ;
  assign x__h1468 =
	     6'd8 - IF_multiplier_fifo_stage0_reg_first_BIT_15_THE_ETC___d10 ;
  assign x__h1556 = multiplier_fifo_stage0_reg$D_OUT[15:10] + 6'd4 ;
  assign x__h1566 =
	     { IF_multiplier_fifo_stage0_reg_first_BIT_15_AND_ETC___d24,
	       IF_multiplier_fifo_stage0_reg_first_BIT_15_AND_ETC___d33 } ;
  assign x__h1597 =
	     multiplier_fifo_stage0_reg$D_OUT[15] &&
	     !IF_multiplier_fifo_stage0_reg_first_BIT_15_THE_ETC___d12 &&
	     multiplier_fifo_stage0_regD_OUT_BITS_9_TO_0__q3[x__h1634[3:0]] ;
  assign x__h1634 =
	     IF_multiplier_fifo_stage0_reg_first_BIT_15_THE_ETC___d11 - 6'd1 ;
  assign x__h1641 =
	     !multiplier_fifo_stage0_reg$D_OUT[15] ||
	     IF_multiplier_fifo_stage0_reg_first_BIT_15_THE_ETC___d12 ||
	     (IF_multiplier_fifo_stage0_reg_first_BIT_15_THE_ETC___d11 ^
	      6'h20) <=
	     6'd33 ||
	     (f_new__h1277 & mask1__h1477) == 24'd0 ;
  assign x__h1658 = 24'd16777215 >> x__h1634 ;
  assign x__h1991 = x__h1993 | adder_fifo_stage0_reg$D_OUT[0] ;
  assign x__h1993 = all_bits_0__h1976 & adder_fifo_stage0_reg$D_OUT[38] ;
  assign x__h1998 =
	     (!adder_fifo_stage0_reg$D_OUT[38] &&
	      !SEXT_IF_adder_fifo_stage0_reg_first__4_BIT_7_7_ETC___d74[31] &&
	      adder_fifo_stage0_reg_first__4_BITS_38_TO_7_8__ETC___d79[31]) ?
	       32'h7FFFFFFF :
	       ((adder_fifo_stage0_reg$D_OUT[38] &&
		 SEXT_IF_adder_fifo_stage0_reg_first__4_BIT_7_7_ETC___d74[31] &&
		 !adder_fifo_stage0_reg_first__4_BITS_38_TO_7_8__ETC___d79[31]) ?
		  32'h80000000 :
		  adder_fifo_stage0_reg_first__4_BITS_38_TO_7_8__ETC___d79) ;
  assign x__h2592 =
	     adder_fifo_stage0_reg$D_OUT[7] & adder_fifo_stage0_reg$D_OUT[6] ;
  assign x__h4029 = { adder_fifo_stage0_reg$D_OUT[38], x__h1998[30:0] } ;
  assign x__h4199 =
	     extracter1_fifo_output_reg$D_OUT[11:10] == 2'd1 &&
	     extracter2_fifo_output_reg$D_OUT[11:10] == 2'd2 ||
	     extracter2_fifo_output_reg$D_OUT[11:10] == 2'd1 &&
	     extracter1_fifo_output_reg$D_OUT[11:10] == 2'd2 ;
  assign x__h4284 =
	     x__h4306 &
	     IF_extracter1_fifo_output_reg_first__14_BITS_1_ETC___d133[0] ;
  assign x__h4306 =
	     x__h4308 &
	     IF_extracter1_fifo_output_reg_first__14_BITS_1_ETC___d133[1] ;
  assign x__h4308 =
	     extracter1_fifo_output_reg$D_OUT[9] ^
	     extracter2_fifo_output_reg$D_OUT[9] ;
  assign x__h6547 =
	     multiplier_fifo_output_reg$D_OUT[1] &
	     multiplier_fifo_output_reg$D_OUT[0] ;
  assign x__h6552 = multiplier_fifo_output_reg$D_OUT[1] & y__h6565 ;
  assign x__h7055 =
	     INV_new_inp681__q1[6] ?
	       3'd0 :
	       (INV_new_inp681__q1[5] ?
		  3'd1 :
		  (INV_new_inp681__q1[4] ?
		     3'd2 :
		     (INV_new_inp681__q1[3] ?
			3'd3 :
			(INV_new_inp681__q1[2] ?
			   3'd4 :
			   (INV_new_inp681__q1[1] ?
			      3'd5 :
			      (INV_new_inp681__q1[0] ? 3'd6 : 3'd7)))))) ;
  assign x__h8066 = { 1'd0, x__h8073 } ;
  assign x__h8073 =
	     new_inp__h6681[6] ?
	       3'd0 :
	       (new_inp__h6681[5] ?
		  3'd1 :
		  (new_inp__h6681[4] ?
		     3'd2 :
		     (new_inp__h6681[3] ?
			3'd3 :
			(new_inp__h6681[2] ?
			   3'd4 :
			   (new_inp__h6681[1] ?
			      3'd5 :
			      (new_inp__h6681[0] ? 3'd6 : 3'd7)))))) ;
  assign x__h9254 =
	     IF_IF_compute_request_put_BIT_15_88_THEN_0_MIN_ETC___d261 -
	     3'd1 ;
  assign x__h9772 =
	     INV_new_inp407__q2[6] ?
	       3'd0 :
	       (INV_new_inp407__q2[5] ?
		  3'd1 :
		  (INV_new_inp407__q2[4] ?
		     3'd2 :
		     (INV_new_inp407__q2[3] ?
			3'd3 :
			(INV_new_inp407__q2[2] ?
			   3'd4 :
			   (INV_new_inp407__q2[1] ?
			      3'd5 :
			      (INV_new_inp407__q2[0] ? 3'd6 : 3'd7)))))) ;
  assign y__h1992 =
	     adder_fifo_stage0_reg$D_OUT[4:3] == 2'd1 ||
	     adder_fifo_stage0_reg$D_OUT[2:1] == 2'd1 ;
  assign y__h4005 = ~adder_fifo_stage0_reg$D_OUT[38] ;
  assign y__h6565 = ~multiplier_fifo_output_reg$D_OUT[0] ;
  always@(IF_IF_compute_request_put_BIT_15_88_THEN_0_MIN_ETC___d261)
  begin
    case (IF_IF_compute_request_put_BIT_15_88_THEN_0_MIN_ETC___d261)
      3'd2: x__h9303 = 4'd3;
      3'd3: x__h9303 = 4'd2;
      3'd4: x__h9303 = 4'd1;
      3'd5: x__h9303 = 4'd0;
      default: x__h9303 =
		   (IF_IF_compute_request_put_BIT_15_88_THEN_0_MIN_ETC___d261 <=
		    3'd1) ?
		     4'd4 :
		     4'd0;
    endcase
  end
  always@(IF_IF_compute_request_put_BIT_7_90_THEN_0_MINU_ETC___d363)
  begin
    case (IF_IF_compute_request_put_BIT_7_90_THEN_0_MINU_ETC___d363)
      3'd2: x__h12020 = 4'd3;
      3'd3: x__h12020 = 4'd2;
      3'd4: x__h12020 = 4'd1;
      3'd5: x__h12020 = 4'd0;
      default: x__h12020 =
		   (IF_IF_compute_request_put_BIT_7_90_THEN_0_MINU_ETC___d363 <=
		    3'd1) ?
		     4'd4 :
		     4'd0;
    endcase
  end
endmodule  // mkPNE_test

