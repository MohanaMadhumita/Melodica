//
// Generated by Bluespec Compiler (build 16071ee)
//
// On Wed Sep 16 14:07:46 IST 2020
//
//
// Ports:
// Name                         I/O  size props
// RDY_compute_request_put        O     1
// compute_response_get           O    12 reg
// RDY_compute_response_get       O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// compute_request_put            I    16
// EN_compute_request_put         I     1
// EN_compute_response_get        I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPNE_test(CLK,
		  RST_N,

		  compute_request_put,
		  EN_compute_request_put,
		  RDY_compute_request_put,

		  EN_compute_response_get,
		  compute_response_get,
		  RDY_compute_response_get);
  input  CLK;
  input  RST_N;

  // action method compute_request_put
  input  [15 : 0] compute_request_put;
  input  EN_compute_request_put;
  output RDY_compute_request_put;

  // actionvalue method compute_response_get
  input  EN_compute_response_get;
  output [11 : 0] compute_response_get;
  output RDY_compute_response_get;

  // signals for module outputs
  wire [11 : 0] compute_response_get;
  wire RDY_compute_request_put, RDY_compute_response_get;

  // ports of submodule extracter1_fifo_output_reg
  wire [11 : 0] extracter1_fifo_output_reg$D_IN,
		extracter1_fifo_output_reg$D_OUT;
  wire extracter1_fifo_output_reg$CLR,
       extracter1_fifo_output_reg$DEQ,
       extracter1_fifo_output_reg$EMPTY_N,
       extracter1_fifo_output_reg$ENQ,
       extracter1_fifo_output_reg$FULL_N;

  // ports of submodule extracter1_fifo_stage0_reg
  wire [9 : 0] extracter1_fifo_stage0_reg$D_IN;
  wire extracter1_fifo_stage0_reg$CLR,
       extracter1_fifo_stage0_reg$DEQ,
       extracter1_fifo_stage0_reg$ENQ;

  // ports of submodule extracter1_fifo_stage1_reg
  wire [14 : 0] extracter1_fifo_stage1_reg$D_IN;
  wire extracter1_fifo_stage1_reg$CLR,
       extracter1_fifo_stage1_reg$DEQ,
       extracter1_fifo_stage1_reg$ENQ;

  // ports of submodule extracter1_fifo_stage2_reg
  wire [12 : 0] extracter1_fifo_stage2_reg$D_IN;
  wire extracter1_fifo_stage2_reg$CLR,
       extracter1_fifo_stage2_reg$DEQ,
       extracter1_fifo_stage2_reg$ENQ;

  // ports of submodule extracter2_fifo_output_reg
  wire [11 : 0] extracter2_fifo_output_reg$D_IN,
		extracter2_fifo_output_reg$D_OUT;
  wire extracter2_fifo_output_reg$CLR,
       extracter2_fifo_output_reg$DEQ,
       extracter2_fifo_output_reg$EMPTY_N,
       extracter2_fifo_output_reg$ENQ,
       extracter2_fifo_output_reg$FULL_N;

  // ports of submodule extracter2_fifo_stage0_reg
  wire [9 : 0] extracter2_fifo_stage0_reg$D_IN;
  wire extracter2_fifo_stage0_reg$CLR,
       extracter2_fifo_stage0_reg$DEQ,
       extracter2_fifo_stage0_reg$ENQ;

  // ports of submodule extracter2_fifo_stage1_reg
  wire [14 : 0] extracter2_fifo_stage1_reg$D_IN;
  wire extracter2_fifo_stage1_reg$CLR,
       extracter2_fifo_stage1_reg$DEQ,
       extracter2_fifo_stage1_reg$ENQ;

  // ports of submodule extracter2_fifo_stage2_reg
  wire [12 : 0] extracter2_fifo_stage2_reg$D_IN;
  wire extracter2_fifo_stage2_reg$CLR,
       extracter2_fifo_stage2_reg$DEQ,
       extracter2_fifo_stage2_reg$ENQ;

  // ports of submodule ffO
  wire [11 : 0] ffO$D_IN, ffO$D_OUT;
  wire ffO$CLR, ffO$DEQ, ffO$EMPTY_N, ffO$ENQ, ffO$FULL_N;

  // ports of submodule ffm
  wire [11 : 0] ffm$D_IN;
  wire ffm$CLR, ffm$DEQ, ffm$ENQ;

  // ports of submodule multiplier_fifo_output_reg
  wire [14 : 0] multiplier_fifo_output_reg$D_IN,
		multiplier_fifo_output_reg$D_OUT;
  wire multiplier_fifo_output_reg$CLR,
       multiplier_fifo_output_reg$DEQ,
       multiplier_fifo_output_reg$EMPTY_N,
       multiplier_fifo_output_reg$ENQ,
       multiplier_fifo_output_reg$FULL_N;

  // ports of submodule multiplier_fifo_stage0_reg
  wire [28 : 0] multiplier_fifo_stage0_reg$D_IN,
		multiplier_fifo_stage0_reg$D_OUT;
  wire multiplier_fifo_stage0_reg$CLR,
       multiplier_fifo_stage0_reg$DEQ,
       multiplier_fifo_stage0_reg$EMPTY_N,
       multiplier_fifo_stage0_reg$ENQ,
       multiplier_fifo_stage0_reg$FULL_N;

  // ports of submodule multiplier_fifo_stage1_reg
  wire [18 : 0] multiplier_fifo_stage1_reg$D_IN,
		multiplier_fifo_stage1_reg$D_OUT;
  wire multiplier_fifo_stage1_reg$CLR,
       multiplier_fifo_stage1_reg$DEQ,
       multiplier_fifo_stage1_reg$EMPTY_N,
       multiplier_fifo_stage1_reg$ENQ,
       multiplier_fifo_stage1_reg$FULL_N;

  // ports of submodule normalizer_fifo_output_reg
  wire [11 : 0] normalizer_fifo_output_reg$D_IN,
		normalizer_fifo_output_reg$D_OUT;
  wire normalizer_fifo_output_reg$CLR,
       normalizer_fifo_output_reg$DEQ,
       normalizer_fifo_output_reg$EMPTY_N,
       normalizer_fifo_output_reg$ENQ,
       normalizer_fifo_output_reg$FULL_N;

  // ports of submodule normalizer_fifo_stage0_reg
  wire [17 : 0] normalizer_fifo_stage0_reg$D_IN;
  wire normalizer_fifo_stage0_reg$CLR,
       normalizer_fifo_stage0_reg$DEQ,
       normalizer_fifo_stage0_reg$ENQ;

  // ports of submodule normalizer_fifo_stage1_reg
  wire [20 : 0] normalizer_fifo_stage1_reg$D_IN;
  wire normalizer_fifo_stage1_reg$CLR,
       normalizer_fifo_stage1_reg$DEQ,
       normalizer_fifo_stage1_reg$ENQ;

  // ports of submodule normalizer_fifo_stage2_reg
  wire [11 : 0] normalizer_fifo_stage2_reg$D_IN;
  wire normalizer_fifo_stage2_reg$CLR,
       normalizer_fifo_stage2_reg$DEQ,
       normalizer_fifo_stage2_reg$ENQ;

  // rule scheduling signals
  wire CAN_FIRE_RL_multiplier_output_stage,
       CAN_FIRE_RL_multiplier_stage_1,
       CAN_FIRE_RL_rl_connect0,
       CAN_FIRE_RL_rl_connect2,
       CAN_FIRE_RL_rl_out,
       CAN_FIRE_compute_request_put,
       CAN_FIRE_compute_response_get,
       WILL_FIRE_RL_multiplier_output_stage,
       WILL_FIRE_RL_multiplier_stage_1,
       WILL_FIRE_RL_rl_connect0,
       WILL_FIRE_RL_rl_connect2,
       WILL_FIRE_RL_rl_out,
       WILL_FIRE_compute_request_put,
       WILL_FIRE_compute_response_get;

  // remaining internal signals
  reg [7 : 0] output_regf_out_posit__h5258;
  reg [3 : 0] x__h10600, x__h13301;
  reg CASE_shift_new0234_0_NOT_multiplier_fifo_outpu_ETC__q9,
      CASE_shift_new0234_0_multiplier_fifo_output_re_ETC__q8;
  wire [31 : 0] x__h2696, x__h2771;
  wire [19 : 0] _0_CONCAT_IF_extracter1_fifo_output_reg_first___ETC___d134;
  wire [9 : 0] IF_IF_IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_ETC___d78,
	       IF_IF_IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_ETC___d79,
	       multiplier_fifo_stage0_regD_OUT_BITS_14_TO_5__q14,
	       stage0_regf_frac__h3528,
	       x__h2469,
	       x__h2544;
  wire [8 : 0] IF_compute_request_put_BITS_14_TO_8_45_EQ_0_46_ETC___d445,
	       IF_compute_request_put_BITS_6_TO_0_47_EQ_0_48__ETC___d547;
  wire [6 : 0] IF_IF_NOT_IF_multiplier_fifo_output_reg_first__ETC___d292,
	       IF_NOT_IF_multiplier_fifo_output_reg_first__64_ETC___d288,
	       IF_multiplier_fifo_output_reg_first__64_BIT_10_ETC___d209,
	       INV_new_inp0695__q2,
	       INV_new_inp982__q1,
	       a__h5281,
	       b__h5402,
	       b__h5528,
	       b__h6177,
	       b__h7390,
	       k__h5590,
	       k__h5635,
	       k_expo__h5237,
	       new_inp__h10695,
	       new_inp__h7982,
	       x__h5418,
	       x__h5647,
	       y__h5419,
	       y__h5420;
  wire [4 : 0] IF_IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_fi_ETC___d46,
	       IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_first_ETC___d42,
	       IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_first_ETC__q4,
	       IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_first_ETC__q5,
	       IF_NOT_multiplier_fifo_stage0_reg_first_BIT_24_ETC___d27,
	       IF_NOT_multiplier_fifo_stage0_reg_first_BIT_24_ETC___d34,
	       SEXT_IF_IF_compute_request_put_BIT_15_47_THEN__ETC___d391,
	       SEXT_IF_IF_compute_request_put_BIT_7_49_THEN_0_ETC___d493,
	       SEXT_IF_new_inp0695_BIT_6_THEN_b1043_ELSE_b10452__q13,
	       SEXT_IF_new_inp982_BIT_6_THEN_b342_ELSE_b3440__q11,
	       multiplier_fifo_stage0_reg_first_BITS_24_TO_20_ETC___d20,
	       multiplier_fifo_stage0_reg_first_BITS_4_TO_0_0_ETC___d31,
	       stage0_regf_fracshift__h3529,
	       x__h3643,
	       x__h3681,
	       x__h6904;
  wire [3 : 0] IF_new_inp0695_BIT_6_THEN_b1043_ELSE_b1045__q12,
	       IF_new_inp982_BIT_6_THEN_b342_ELSE_b344__q10,
	       _0_MINUS_multiplier_fifo_output_regD_OUT_BITS__ETC__q3,
	       b__h11043,
	       b__h11045,
	       b__h8342,
	       b__h8344,
	       frac__h10703,
	       frac__h7990,
	       multiplier_fifo_output_regD_OUT_BITS_5_TO_2__q7,
	       x904_BITS_3_TO_0__q6,
	       x__h12064,
	       x__h3729,
	       x__h9363;
  wire [2 : 0] IF_6_MINUS_IF_multiplier_fifo_output_reg_first_ETC___d202,
	       IF_IF_IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_ETC___d55,
	       IF_IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_fi_ETC___d52,
	       IF_IF_compute_request_put_BIT_15_47_THEN_0_MIN_ETC___d420,
	       IF_IF_compute_request_put_BIT_7_49_THEN_0_MINU_ETC___d522,
	       IF_multiplier_fifo_output_reg_first__64_BIT_9__ETC___d181,
	       _4_MINUS_IF_6_MINUS_IF_multiplier_fifo_output_r_ETC___d226,
	       _6_MINUS_IF_multiplier_fifo_output_reg_first__6_ETC___d188,
	       multiplier_fifo_output_reg_first__64_BITS_9_TO_ETC___d177,
	       x__h10551,
	       x__h11053,
	       x__h12071,
	       x__h13252,
	       x__h2534,
	       x__h2568,
	       x__h5633,
	       x__h7078,
	       x__h7238,
	       x__h8352,
	       x__h9370;
  wire [1 : 0] IF_extracter1_fifo_output_reg_first__04_BITS_1_ETC___d125,
	       _theResult___snd_snd__h6358,
	       i1__h7128,
	       i__h7031,
	       shift_new0__h5234,
	       shift_new__h6305,
	       x__h6309;
  wire IF_IF_6_MINUS_IF_multiplier_fifo_output_reg_fi_ETC___d263,
       IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_first_ETC___d43,
       IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_first_ETC___d44,
       NOT_4_MINUS_IF_6_MINUS_IF_multiplier_fifo_outp_ETC___d280,
       NOT_4_MINUS_IF_6_MINUS_IF_multiplier_fifo_outp_ETC___d324,
       NOT_6_MINUS_IF_multiplier_fifo_output_reg_firs_ETC___d230,
       NOT_6_MINUS_IF_multiplier_fifo_output_reg_firs_ETC___d240,
       NOT_6_MINUS_IF_multiplier_fifo_output_reg_firs_ETC___d296,
       NOT_6_MINUS_IF_multiplier_fifo_output_reg_firs_ETC___d302,
       NOT_6_MINUS_IF_multiplier_fifo_output_reg_firs_ETC___d321,
       NOT_6_MINUS_IF_multiplier_fifo_output_reg_firs_ETC___d325,
       NOT_IF_multiplier_fifo_output_reg_first__64_BI_ETC___d214,
       NOT_NOT_6_MINUS_IF_multiplier_fifo_output_reg__ETC___d253,
       _4_MINUS_IF_6_MINUS_IF_multiplier_fifo_output_r_ETC___d265,
       _theResult____h5244,
       _theResult___fst__h6209,
       expo__h10702,
       expo__h7989,
       expo_new__h6275,
       expo_new__h6306,
       flag_prev_truncate__h5243,
       mask_e__h6207,
       multiplier_fifo_output_reg_first__64_BITS_5_TO_ETC___d236,
       multiplier_fifo_output_reg_first__64_BIT_0_43__ETC___d246,
       multiplier_fifo_output_reg_first__64_BIT_0_43__ETC___d250,
       multiplier_fifo_output_reg_first__64_BIT_6_90__ETC___d193,
       truncated_frac_msb__h5239,
       x__h2933,
       x__h2946,
       x__h3523,
       x__h3611,
       x__h6180,
       x__h6923,
       y__h2947,
       y__h2949,
       y__h7118,
       y__h7122;

  // action method compute_request_put
  assign RDY_compute_request_put =
	     extracter1_fifo_output_reg$FULL_N &&
	     extracter2_fifo_output_reg$FULL_N ;
  assign CAN_FIRE_compute_request_put =
	     extracter1_fifo_output_reg$FULL_N &&
	     extracter2_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_compute_request_put = EN_compute_request_put ;

  // actionvalue method compute_response_get
  assign compute_response_get = ffO$D_OUT ;
  assign RDY_compute_response_get = ffO$EMPTY_N ;
  assign CAN_FIRE_compute_response_get = ffO$EMPTY_N ;
  assign WILL_FIRE_compute_response_get = EN_compute_response_get ;

  // submodule extracter1_fifo_output_reg
  FIFO2 #(.width(32'd12),
	  .guarded(32'd1)) extracter1_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_output_reg$D_IN),
						      .ENQ(extracter1_fifo_output_reg$ENQ),
						      .DEQ(extracter1_fifo_output_reg$DEQ),
						      .CLR(extracter1_fifo_output_reg$CLR),
						      .D_OUT(extracter1_fifo_output_reg$D_OUT),
						      .FULL_N(extracter1_fifo_output_reg$FULL_N),
						      .EMPTY_N(extracter1_fifo_output_reg$EMPTY_N));

  // submodule extracter1_fifo_stage0_reg
  FIFO2 #(.width(32'd10),
	  .guarded(32'd1)) extracter1_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_stage0_reg$D_IN),
						      .ENQ(extracter1_fifo_stage0_reg$ENQ),
						      .DEQ(extracter1_fifo_stage0_reg$DEQ),
						      .CLR(extracter1_fifo_stage0_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter1_fifo_stage1_reg
  FIFO2 #(.width(32'd15),
	  .guarded(32'd1)) extracter1_fifo_stage1_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_stage1_reg$D_IN),
						      .ENQ(extracter1_fifo_stage1_reg$ENQ),
						      .DEQ(extracter1_fifo_stage1_reg$DEQ),
						      .CLR(extracter1_fifo_stage1_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter1_fifo_stage2_reg
  FIFO2 #(.width(32'd13),
	  .guarded(32'd1)) extracter1_fifo_stage2_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_stage2_reg$D_IN),
						      .ENQ(extracter1_fifo_stage2_reg$ENQ),
						      .DEQ(extracter1_fifo_stage2_reg$DEQ),
						      .CLR(extracter1_fifo_stage2_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter2_fifo_output_reg
  FIFO2 #(.width(32'd12),
	  .guarded(32'd1)) extracter2_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_output_reg$D_IN),
						      .ENQ(extracter2_fifo_output_reg$ENQ),
						      .DEQ(extracter2_fifo_output_reg$DEQ),
						      .CLR(extracter2_fifo_output_reg$CLR),
						      .D_OUT(extracter2_fifo_output_reg$D_OUT),
						      .FULL_N(extracter2_fifo_output_reg$FULL_N),
						      .EMPTY_N(extracter2_fifo_output_reg$EMPTY_N));

  // submodule extracter2_fifo_stage0_reg
  FIFO2 #(.width(32'd10),
	  .guarded(32'd1)) extracter2_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_stage0_reg$D_IN),
						      .ENQ(extracter2_fifo_stage0_reg$ENQ),
						      .DEQ(extracter2_fifo_stage0_reg$DEQ),
						      .CLR(extracter2_fifo_stage0_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter2_fifo_stage1_reg
  FIFO2 #(.width(32'd15),
	  .guarded(32'd1)) extracter2_fifo_stage1_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_stage1_reg$D_IN),
						      .ENQ(extracter2_fifo_stage1_reg$ENQ),
						      .DEQ(extracter2_fifo_stage1_reg$DEQ),
						      .CLR(extracter2_fifo_stage1_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter2_fifo_stage2_reg
  FIFO2 #(.width(32'd13),
	  .guarded(32'd1)) extracter2_fifo_stage2_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_stage2_reg$D_IN),
						      .ENQ(extracter2_fifo_stage2_reg$ENQ),
						      .DEQ(extracter2_fifo_stage2_reg$DEQ),
						      .CLR(extracter2_fifo_stage2_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule ffO
  FIFO2 #(.width(32'd12), .guarded(32'd1)) ffO(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(ffO$D_IN),
					       .ENQ(ffO$ENQ),
					       .DEQ(ffO$DEQ),
					       .CLR(ffO$CLR),
					       .D_OUT(ffO$D_OUT),
					       .FULL_N(ffO$FULL_N),
					       .EMPTY_N(ffO$EMPTY_N));

  // submodule ffm
  FIFO2 #(.width(32'd12), .guarded(32'd1)) ffm(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(ffm$D_IN),
					       .ENQ(ffm$ENQ),
					       .DEQ(ffm$DEQ),
					       .CLR(ffm$CLR),
					       .D_OUT(),
					       .FULL_N(),
					       .EMPTY_N());

  // submodule multiplier_fifo_output_reg
  FIFO2 #(.width(32'd15),
	  .guarded(32'd1)) multiplier_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(multiplier_fifo_output_reg$D_IN),
						      .ENQ(multiplier_fifo_output_reg$ENQ),
						      .DEQ(multiplier_fifo_output_reg$DEQ),
						      .CLR(multiplier_fifo_output_reg$CLR),
						      .D_OUT(multiplier_fifo_output_reg$D_OUT),
						      .FULL_N(multiplier_fifo_output_reg$FULL_N),
						      .EMPTY_N(multiplier_fifo_output_reg$EMPTY_N));

  // submodule multiplier_fifo_stage0_reg
  FIFO2 #(.width(32'd29),
	  .guarded(32'd1)) multiplier_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(multiplier_fifo_stage0_reg$D_IN),
						      .ENQ(multiplier_fifo_stage0_reg$ENQ),
						      .DEQ(multiplier_fifo_stage0_reg$DEQ),
						      .CLR(multiplier_fifo_stage0_reg$CLR),
						      .D_OUT(multiplier_fifo_stage0_reg$D_OUT),
						      .FULL_N(multiplier_fifo_stage0_reg$FULL_N),
						      .EMPTY_N(multiplier_fifo_stage0_reg$EMPTY_N));

  // submodule multiplier_fifo_stage1_reg
  FIFO2 #(.width(32'd19),
	  .guarded(32'd1)) multiplier_fifo_stage1_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(multiplier_fifo_stage1_reg$D_IN),
						      .ENQ(multiplier_fifo_stage1_reg$ENQ),
						      .DEQ(multiplier_fifo_stage1_reg$DEQ),
						      .CLR(multiplier_fifo_stage1_reg$CLR),
						      .D_OUT(multiplier_fifo_stage1_reg$D_OUT),
						      .FULL_N(multiplier_fifo_stage1_reg$FULL_N),
						      .EMPTY_N(multiplier_fifo_stage1_reg$EMPTY_N));

  // submodule normalizer_fifo_output_reg
  FIFO2 #(.width(32'd12),
	  .guarded(32'd1)) normalizer_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_output_reg$D_IN),
						      .ENQ(normalizer_fifo_output_reg$ENQ),
						      .DEQ(normalizer_fifo_output_reg$DEQ),
						      .CLR(normalizer_fifo_output_reg$CLR),
						      .D_OUT(normalizer_fifo_output_reg$D_OUT),
						      .FULL_N(normalizer_fifo_output_reg$FULL_N),
						      .EMPTY_N(normalizer_fifo_output_reg$EMPTY_N));

  // submodule normalizer_fifo_stage0_reg
  FIFO2 #(.width(32'd18),
	  .guarded(32'd1)) normalizer_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_stage0_reg$D_IN),
						      .ENQ(normalizer_fifo_stage0_reg$ENQ),
						      .DEQ(normalizer_fifo_stage0_reg$DEQ),
						      .CLR(normalizer_fifo_stage0_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule normalizer_fifo_stage1_reg
  FIFO2 #(.width(32'd21),
	  .guarded(32'd1)) normalizer_fifo_stage1_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_stage1_reg$D_IN),
						      .ENQ(normalizer_fifo_stage1_reg$ENQ),
						      .DEQ(normalizer_fifo_stage1_reg$DEQ),
						      .CLR(normalizer_fifo_stage1_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule normalizer_fifo_stage2_reg
  FIFO2 #(.width(32'd12),
	  .guarded(32'd1)) normalizer_fifo_stage2_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_stage2_reg$D_IN),
						      .ENQ(normalizer_fifo_stage2_reg$ENQ),
						      .DEQ(normalizer_fifo_stage2_reg$DEQ),
						      .CLR(normalizer_fifo_stage2_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // rule RL_rl_connect0
  assign CAN_FIRE_RL_rl_connect0 =
	     extracter1_fifo_output_reg$EMPTY_N &&
	     extracter2_fifo_output_reg$EMPTY_N &&
	     multiplier_fifo_stage0_reg$FULL_N ;
  assign WILL_FIRE_RL_rl_connect0 = CAN_FIRE_RL_rl_connect0 ;

  // rule RL_rl_connect2
  assign CAN_FIRE_RL_rl_connect2 =
	     multiplier_fifo_output_reg$EMPTY_N &&
	     normalizer_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_rl_connect2 = CAN_FIRE_RL_rl_connect2 ;

  // rule RL_rl_out
  assign CAN_FIRE_RL_rl_out =
	     normalizer_fifo_output_reg$EMPTY_N && ffO$FULL_N ;
  assign WILL_FIRE_RL_rl_out = CAN_FIRE_RL_rl_out ;

  // rule RL_multiplier_stage_1
  assign CAN_FIRE_RL_multiplier_stage_1 =
	     multiplier_fifo_stage0_reg$EMPTY_N &&
	     multiplier_fifo_stage1_reg$FULL_N ;
  assign WILL_FIRE_RL_multiplier_stage_1 = CAN_FIRE_RL_multiplier_stage_1 ;

  // rule RL_multiplier_output_stage
  assign CAN_FIRE_RL_multiplier_output_stage =
	     multiplier_fifo_stage1_reg$EMPTY_N &&
	     multiplier_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_multiplier_output_stage =
	     CAN_FIRE_RL_multiplier_output_stage ;

  // submodule extracter1_fifo_output_reg
  assign extracter1_fifo_output_reg$D_IN =
	     { (compute_request_put[14:8] == 7'd0 &&
		!compute_request_put[15]) ?
		 2'd2 :
		 ((compute_request_put[14:8] == 7'd0 &&
		   compute_request_put[15]) ?
		    2'd1 :
		    2'd0),
	       compute_request_put[15],
	       IF_compute_request_put_BITS_14_TO_8_45_EQ_0_46_ETC___d445 } ;
  assign extracter1_fifo_output_reg$ENQ = EN_compute_request_put ;
  assign extracter1_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_connect0 ;
  assign extracter1_fifo_output_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_stage0_reg
  assign extracter1_fifo_stage0_reg$D_IN = 10'h0 ;
  assign extracter1_fifo_stage0_reg$ENQ = 1'b0 ;
  assign extracter1_fifo_stage0_reg$DEQ = 1'b0 ;
  assign extracter1_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_stage1_reg
  assign extracter1_fifo_stage1_reg$D_IN = 15'h0 ;
  assign extracter1_fifo_stage1_reg$ENQ = 1'b0 ;
  assign extracter1_fifo_stage1_reg$DEQ = 1'b0 ;
  assign extracter1_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_stage2_reg
  assign extracter1_fifo_stage2_reg$D_IN = 13'h0 ;
  assign extracter1_fifo_stage2_reg$ENQ = 1'b0 ;
  assign extracter1_fifo_stage2_reg$DEQ = 1'b0 ;
  assign extracter1_fifo_stage2_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_output_reg
  assign extracter2_fifo_output_reg$D_IN =
	     { (compute_request_put[6:0] == 7'd0 && !compute_request_put[7]) ?
		 2'd2 :
		 ((compute_request_put[6:0] == 7'd0 &&
		   compute_request_put[7]) ?
		    2'd1 :
		    2'd0),
	       compute_request_put[7],
	       IF_compute_request_put_BITS_6_TO_0_47_EQ_0_48__ETC___d547 } ;
  assign extracter2_fifo_output_reg$ENQ = EN_compute_request_put ;
  assign extracter2_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_connect0 ;
  assign extracter2_fifo_output_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_stage0_reg
  assign extracter2_fifo_stage0_reg$D_IN = 10'h0 ;
  assign extracter2_fifo_stage0_reg$ENQ = 1'b0 ;
  assign extracter2_fifo_stage0_reg$DEQ = 1'b0 ;
  assign extracter2_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_stage1_reg
  assign extracter2_fifo_stage1_reg$D_IN = 15'h0 ;
  assign extracter2_fifo_stage1_reg$ENQ = 1'b0 ;
  assign extracter2_fifo_stage1_reg$DEQ = 1'b0 ;
  assign extracter2_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_stage2_reg
  assign extracter2_fifo_stage2_reg$D_IN = 13'h0 ;
  assign extracter2_fifo_stage2_reg$ENQ = 1'b0 ;
  assign extracter2_fifo_stage2_reg$DEQ = 1'b0 ;
  assign extracter2_fifo_stage2_reg$CLR = 1'b0 ;

  // submodule ffO
  assign ffO$D_IN = normalizer_fifo_output_reg$D_OUT ;
  assign ffO$ENQ = CAN_FIRE_RL_rl_out ;
  assign ffO$DEQ = EN_compute_response_get ;
  assign ffO$CLR = 1'b0 ;

  // submodule ffm
  assign ffm$D_IN = 12'h0 ;
  assign ffm$ENQ = 1'b0 ;
  assign ffm$DEQ = 1'b0 ;
  assign ffm$CLR = 1'b0 ;

  // submodule multiplier_fifo_output_reg
  assign multiplier_fifo_output_reg$D_IN =
	     { multiplier_fifo_stage1_reg$D_OUT[15],
	       multiplier_fifo_stage1_reg$D_OUT[17:16],
	       multiplier_fifo_stage1_reg$D_OUT[18],
	       multiplier_fifo_stage1_reg$D_OUT[14:5],
	       x__h2933 } ;
  assign multiplier_fifo_output_reg$ENQ =
	     CAN_FIRE_RL_multiplier_output_stage ;
  assign multiplier_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_connect2 ;
  assign multiplier_fifo_output_reg$CLR = 1'b0 ;

  // submodule multiplier_fifo_stage0_reg
  assign multiplier_fifo_stage0_reg$D_IN =
	     { x__h3523,
	       (extracter1_fifo_output_reg$D_OUT[11:10] == 2'd2 &&
		extracter2_fifo_output_reg$D_OUT[11:10] == 2'd2) ?
		 2'd2 :
		 ((extracter1_fifo_output_reg$D_OUT[11:10] == 2'd1 ||
		   extracter2_fifo_output_reg$D_OUT[11:10] == 2'd1) ?
		    2'd1 :
		    2'd0),
	       x__h3611,
	       extracter1_fifo_output_reg$D_OUT[8:4],
	       extracter2_fifo_output_reg$D_OUT[8:4],
	       stage0_regf_frac__h3528,
	       stage0_regf_fracshift__h3529 } ;
  assign multiplier_fifo_stage0_reg$ENQ = CAN_FIRE_RL_rl_connect0 ;
  assign multiplier_fifo_stage0_reg$DEQ = CAN_FIRE_RL_multiplier_stage_1 ;
  assign multiplier_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule multiplier_fifo_stage1_reg
  assign multiplier_fifo_stage1_reg$D_IN =
	     { multiplier_fifo_stage0_reg$D_OUT[28],
	       (multiplier_fifo_stage0_reg$D_OUT[14:5] == 10'd0 &&
		multiplier_fifo_stage0_reg$D_OUT[27:26] == 2'd0) ?
		 2'd2 :
		 multiplier_fifo_stage0_reg$D_OUT[27:26],
	       multiplier_fifo_stage0_reg$D_OUT[25],
	       IF_IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_fi_ETC___d46,
	       IF_IF_IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_ETC___d79 } ;
  assign multiplier_fifo_stage1_reg$ENQ = CAN_FIRE_RL_multiplier_stage_1 ;
  assign multiplier_fifo_stage1_reg$DEQ =
	     CAN_FIRE_RL_multiplier_output_stage ;
  assign multiplier_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_output_reg
  assign normalizer_fifo_output_reg$D_IN =
	     { multiplier_fifo_output_reg$D_OUT[11],
	       output_regf_out_posit__h5258,
	       multiplier_fifo_output_reg$D_OUT[13:12],
	       flag_prev_truncate__h5243 - _theResult____h5244 ||
	       a__h5281 == 7'd0 &&
	       NOT_6_MINUS_IF_multiplier_fifo_output_reg_firs_ETC___d325 } ;
  assign normalizer_fifo_output_reg$ENQ = CAN_FIRE_RL_rl_connect2 ;
  assign normalizer_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_out ;
  assign normalizer_fifo_output_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_stage0_reg
  assign normalizer_fifo_stage0_reg$D_IN = 18'h0 ;
  assign normalizer_fifo_stage0_reg$ENQ = 1'b0 ;
  assign normalizer_fifo_stage0_reg$DEQ = 1'b0 ;
  assign normalizer_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_stage1_reg
  assign normalizer_fifo_stage1_reg$D_IN = 21'h0 ;
  assign normalizer_fifo_stage1_reg$ENQ = 1'b0 ;
  assign normalizer_fifo_stage1_reg$DEQ = 1'b0 ;
  assign normalizer_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_stage2_reg
  assign normalizer_fifo_stage2_reg$D_IN = 12'h0 ;
  assign normalizer_fifo_stage2_reg$ENQ = 1'b0 ;
  assign normalizer_fifo_stage2_reg$DEQ = 1'b0 ;
  assign normalizer_fifo_stage2_reg$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_6_MINUS_IF_multiplier_fifo_output_reg_first_ETC___d202 =
	     (_6_MINUS_IF_multiplier_fifo_output_reg_first__6_ETC___d188 ==
	      3'd0) ?
	       _6_MINUS_IF_multiplier_fifo_output_reg_first__6_ETC___d188 :
	       _6_MINUS_IF_multiplier_fifo_output_reg_first__6_ETC___d188 -
	       3'd1 ;
  assign IF_IF_6_MINUS_IF_multiplier_fifo_output_reg_fi_ETC___d263 =
	     (shift_new0__h5234 == 2'd0) ?
	       !multiplier_fifo_output_reg$D_OUT[1] :
	       !multiplier_fifo_output_reg_first__64_BITS_5_TO_ETC___d236 ;
  assign IF_IF_IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_ETC___d55 =
	     IF_IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_fi_ETC___d52[2] ?
	       -IF_IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_fi_ETC___d52 :
	       IF_IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_fi_ETC___d52 ;
  assign IF_IF_IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_ETC___d78 =
	     { (IF_IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_fi_ETC___d52 ==
		3'd0) ?
		 x__h2544[7:0] :
		 8'd255,
	       IF_IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_fi_ETC___d52 !=
	       3'd0 ||
	       multiplier_fifo_stage0_regD_OUT_BITS_14_TO_5__q14[x__h2568],
	       IF_IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_fi_ETC___d52 ==
	       3'd0 &&
	       x__h2771 == 32'd0 } ;
  assign IF_IF_IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_ETC___d79 =
	     IF_IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_fi_ETC___d52[2] ?
	       { x__h2469[7:0],
		 multiplier_fifo_stage0_regD_OUT_BITS_14_TO_5__q14[x__h2534],
		 x__h2696 == 32'd0 } :
	       IF_IF_IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_ETC___d78 ;
  assign IF_IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_fi_ETC___d46 =
	     IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_first_ETC___d43 ?
	       5'd20 :
	       (IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_first_ETC___d44 ?
		  IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_first_ETC___d42 :
		  5'd12) ;
  assign IF_IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_fi_ETC___d52 =
	     IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_first_ETC___d43 ?
	       IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_first_ETC__q4[2:0] :
	       (IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_first_ETC___d44 ?
		  3'd0 :
		  IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_first_ETC__q5[2:0]) ;
  assign IF_IF_NOT_IF_multiplier_fifo_output_reg_first__ETC___d292 =
	     (b__h5402[6] &&
	      !IF_NOT_IF_multiplier_fifo_output_reg_first__64_ETC___d288[6]) ?
	       7'd127 :
	       IF_NOT_IF_multiplier_fifo_output_reg_first__64_ETC___d288 ;
  assign IF_IF_compute_request_put_BIT_15_47_THEN_0_MIN_ETC___d420 =
	     new_inp__h7982[6] ?
	       ((!INV_new_inp982__q1[6] && !INV_new_inp982__q1[5] &&
		 !INV_new_inp982__q1[4] &&
		 !INV_new_inp982__q1[3] &&
		 !INV_new_inp982__q1[2] &&
		 !INV_new_inp982__q1[1] &&
		 !INV_new_inp982__q1[0]) ?
		  3'd7 :
		  3'd6) -
	       x__h8352 :
	       ((!new_inp__h7982[5] && !new_inp__h7982[4] &&
		 !new_inp__h7982[3] &&
		 !new_inp__h7982[2] &&
		 !new_inp__h7982[1] &&
		 !new_inp__h7982[0]) ?
		  3'd7 :
		  3'd6) -
	       x__h9370 ;
  assign IF_IF_compute_request_put_BIT_7_49_THEN_0_MINU_ETC___d522 =
	     new_inp__h10695[6] ?
	       ((!INV_new_inp0695__q2[6] && !INV_new_inp0695__q2[5] &&
		 !INV_new_inp0695__q2[4] &&
		 !INV_new_inp0695__q2[3] &&
		 !INV_new_inp0695__q2[2] &&
		 !INV_new_inp0695__q2[1] &&
		 !INV_new_inp0695__q2[0]) ?
		  3'd7 :
		  3'd6) -
	       x__h11053 :
	       ((!new_inp__h10695[5] && !new_inp__h10695[4] &&
		 !new_inp__h10695[3] &&
		 !new_inp__h10695[2] &&
		 !new_inp__h10695[1] &&
		 !new_inp__h10695[0]) ?
		  3'd7 :
		  3'd6) -
	       x__h12071 ;
  assign IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_first_ETC___d42 =
	     (!IF_NOT_multiplier_fifo_stage0_reg_first_BIT_24_ETC___d27[4] &&
	      multiplier_fifo_stage0_reg_first_BITS_4_TO_0_0_ETC___d31[4] &&
	      IF_NOT_multiplier_fifo_stage0_reg_first_BIT_24_ETC___d34[4]) ?
	       5'd15 :
	       ((IF_NOT_multiplier_fifo_stage0_reg_first_BIT_24_ETC___d27[4] &&
		 !multiplier_fifo_stage0_reg_first_BITS_4_TO_0_0_ETC___d31[4] &&
		 !IF_NOT_multiplier_fifo_stage0_reg_first_BIT_24_ETC___d34[4]) ?
		  5'd16 :
		  IF_NOT_multiplier_fifo_stage0_reg_first_BIT_24_ETC___d34) ;
  assign IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_first_ETC___d43 =
	     (IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_first_ETC___d42 ^
	      5'h10) <
	     5'd4 ;
  assign IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_first_ETC___d44 =
	     (IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_first_ETC___d42 ^
	      5'h10) <=
	     5'd28 ;
  assign IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_first_ETC__q4 =
	     IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_first_ETC___d42 -
	     5'd20 ;
  assign IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_first_ETC__q5 =
	     IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_first_ETC___d42 -
	     5'd12 ;
  assign IF_NOT_IF_multiplier_fifo_output_reg_first__64_ETC___d288 =
	     b__h5402 + b__h7390 ;
  assign IF_NOT_multiplier_fifo_stage0_reg_first_BIT_24_ETC___d27 =
	     (!multiplier_fifo_stage0_reg$D_OUT[24] &&
	      !multiplier_fifo_stage0_reg$D_OUT[19] &&
	      multiplier_fifo_stage0_reg_first_BITS_24_TO_20_ETC___d20[4]) ?
	       5'd15 :
	       ((multiplier_fifo_stage0_reg$D_OUT[24] &&
		 multiplier_fifo_stage0_reg$D_OUT[19] &&
		 !multiplier_fifo_stage0_reg_first_BITS_24_TO_20_ETC___d20[4]) ?
		  5'd16 :
		  multiplier_fifo_stage0_reg_first_BITS_24_TO_20_ETC___d20) ;
  assign IF_NOT_multiplier_fifo_stage0_reg_first_BIT_24_ETC___d34 =
	     IF_NOT_multiplier_fifo_stage0_reg_first_BIT_24_ETC___d27 -
	     multiplier_fifo_stage0_reg_first_BITS_4_TO_0_0_ETC___d31 ;
  assign IF_compute_request_put_BITS_14_TO_8_45_EQ_0_46_ETC___d445 =
	     (compute_request_put[14:8] == 7'd0 && !compute_request_put[15]) ?
	       9'd0 :
	       { SEXT_IF_IF_compute_request_put_BIT_15_47_THEN__ETC___d391 +
		 { 4'd0, expo__h7989 },
		 frac__h7990 } ;
  assign IF_compute_request_put_BITS_6_TO_0_47_EQ_0_48__ETC___d547 =
	     (compute_request_put[6:0] == 7'd0 && !compute_request_put[7]) ?
	       9'd0 :
	       { SEXT_IF_IF_compute_request_put_BIT_7_49_THEN_0_ETC___d493 +
		 { 4'd0, expo__h10702 },
		 frac__h10703 } ;
  assign IF_extracter1_fifo_output_reg_first__04_BITS_1_ETC___d125 =
	     (extracter1_fifo_output_reg$D_OUT[11:10] == 2'd2) ?
	       2'b01 :
	       ((extracter2_fifo_output_reg$D_OUT[11:10] == 2'd2) ?
		  extracter2_fifo_output_reg$D_OUT[11:10] :
		  2'b11) ;
  assign IF_multiplier_fifo_output_reg_first__64_BIT_10_ETC___d209 =
	     b__h5528 + b__h6177 ;
  assign IF_multiplier_fifo_output_reg_first__64_BIT_9__ETC___d181 =
	     (multiplier_fifo_output_reg$D_OUT[9] &&
	      !multiplier_fifo_output_reg_first__64_BITS_9_TO_ETC___d177[2]) ?
	       3'd7 :
	       multiplier_fifo_output_reg_first__64_BITS_9_TO_ETC___d177 ;
  assign IF_new_inp0695_BIT_6_THEN_b1043_ELSE_b1045__q12 =
	     new_inp__h10695[6] ? b__h11043 : b__h11045 ;
  assign IF_new_inp982_BIT_6_THEN_b342_ELSE_b344__q10 =
	     new_inp__h7982[6] ? b__h8342 : b__h8344 ;
  assign INV_new_inp0695__q2 = ~new_inp__h10695 ;
  assign INV_new_inp982__q1 = ~new_inp__h7982 ;
  assign NOT_4_MINUS_IF_6_MINUS_IF_multiplier_fifo_outp_ETC___d280 =
	     !_4_MINUS_IF_6_MINUS_IF_multiplier_fifo_output_r_ETC___d265 &&
	     { 28'd0, (x__h6904[3:0] & ~(4'hE << x__h7238[1:0])) >> 0 } ==
	     32'd0 &&
	     IF_IF_6_MINUS_IF_multiplier_fifo_output_reg_fi_ETC___d263 ||
	     _6_MINUS_IF_multiplier_fifo_output_reg_first__6_ETC___d188 ==
	     3'd0 &&
	     shift_new0__h5234 == 2'd0 ||
	     k_expo__h5237 == 7'd127 &&
	     IF_6_MINUS_IF_multiplier_fifo_output_reg_first_ETC___d202 ==
	     3'd0 &&
	     x__h6904[3:0] == 4'd0 &&
	     IF_IF_6_MINUS_IF_multiplier_fifo_output_reg_fi_ETC___d263 ;
  assign NOT_4_MINUS_IF_6_MINUS_IF_multiplier_fifo_outp_ETC___d324 =
	     _4_MINUS_IF_6_MINUS_IF_multiplier_fifo_output_r_ETC___d226 !=
	     3'd0 &&
	     (_4_MINUS_IF_6_MINUS_IF_multiplier_fifo_output_r_ETC___d226 !=
	      3'd1 ||
	      truncated_frac_msb__h5239) &&
	     (_4_MINUS_IF_6_MINUS_IF_multiplier_fifo_output_r_ETC___d265 ||
	      { 28'd0, (x__h6904[3:0] & ~(4'hE << x__h7238[1:0])) >> 0 } !=
	      32'd0 ||
	      truncated_frac_msb__h5239) &&
	     NOT_6_MINUS_IF_multiplier_fifo_output_reg_firs_ETC___d321 ;
  assign NOT_6_MINUS_IF_multiplier_fifo_output_reg_firs_ETC___d230 =
	     x904_BITS_3_TO_0__q6[_4_MINUS_IF_6_MINUS_IF_multiplier_fifo_output_r_ETC___d226[1:0]] ;
  assign NOT_6_MINUS_IF_multiplier_fifo_output_reg_firs_ETC___d240 =
	     x904_BITS_3_TO_0__q6[x__h7078[1:0]] ;
  assign NOT_6_MINUS_IF_multiplier_fifo_output_reg_firs_ETC___d296 =
	     NOT_6_MINUS_IF_multiplier_fifo_output_reg_firs_ETC___d230 ||
	     ((_4_MINUS_IF_6_MINUS_IF_multiplier_fifo_output_r_ETC___d226 ==
	       3'd0) ?
		IF_IF_6_MINUS_IF_multiplier_fifo_output_reg_fi_ETC___d263 :
		!NOT_6_MINUS_IF_multiplier_fifo_output_reg_firs_ETC___d240) ;
  assign NOT_6_MINUS_IF_multiplier_fifo_output_reg_firs_ETC___d302 =
	     NOT_6_MINUS_IF_multiplier_fifo_output_reg_firs_ETC___d296 ||
	     CASE_shift_new0234_0_NOT_multiplier_fifo_outpu_ETC__q9 ;
  assign NOT_6_MINUS_IF_multiplier_fifo_output_reg_firs_ETC___d321 =
	     (_6_MINUS_IF_multiplier_fifo_output_reg_first__6_ETC___d188 !=
	      3'd0 ||
	      shift_new0__h5234 != 2'd0 ||
	      !NOT_6_MINUS_IF_multiplier_fifo_output_reg_firs_ETC___d240) &&
	     (k_expo__h5237 != 7'd127 ||
	      IF_6_MINUS_IF_multiplier_fifo_output_reg_first_ETC___d202 !=
	      3'd0 ||
	      x__h6904[3:0] != 4'd0 ||
	      truncated_frac_msb__h5239) ;
  assign NOT_6_MINUS_IF_multiplier_fifo_output_reg_firs_ETC___d325 =
	     NOT_6_MINUS_IF_multiplier_fifo_output_reg_firs_ETC___d302 ||
	     IF_6_MINUS_IF_multiplier_fifo_output_reg_first_ETC___d202 ==
	     3'd0 &&
	     !(~k_expo__h5237[0]) ||
	     NOT_4_MINUS_IF_6_MINUS_IF_multiplier_fifo_outp_ETC___d324 ;
  assign NOT_IF_multiplier_fifo_output_reg_first__64_BI_ETC___d214 =
	     (!b__h5528[6] && b__h6177[6] || b__h5528[6] && !b__h6177[6]) &&
	     !IF_multiplier_fifo_output_reg_first__64_BIT_10_ETC___d209[6] ||
	     b__h5528[6] && b__h6177[6] ;
  assign NOT_NOT_6_MINUS_IF_multiplier_fifo_output_reg__ETC___d253 =
	     !NOT_6_MINUS_IF_multiplier_fifo_output_reg_firs_ETC___d230 &&
	     flag_prev_truncate__h5243 &&
	     CASE_shift_new0234_0_multiplier_fifo_output_re_ETC__q8 ;
  assign SEXT_IF_IF_compute_request_put_BIT_15_47_THEN__ETC___d391 =
	     { SEXT_IF_new_inp982_BIT_6_THEN_b342_ELSE_b3440__q11[3:0],
	       1'd0 } ;
  assign SEXT_IF_IF_compute_request_put_BIT_7_49_THEN_0_ETC___d493 =
	     { SEXT_IF_new_inp0695_BIT_6_THEN_b1043_ELSE_b10452__q13[3:0],
	       1'd0 } ;
  assign SEXT_IF_new_inp0695_BIT_6_THEN_b1043_ELSE_b10452__q13 =
	     { IF_new_inp0695_BIT_6_THEN_b1043_ELSE_b1045__q12[3],
	       IF_new_inp0695_BIT_6_THEN_b1043_ELSE_b1045__q12 } ;
  assign SEXT_IF_new_inp982_BIT_6_THEN_b342_ELSE_b3440__q11 =
	     { IF_new_inp982_BIT_6_THEN_b342_ELSE_b344__q10[3],
	       IF_new_inp982_BIT_6_THEN_b342_ELSE_b344__q10 } ;
  assign _0_CONCAT_IF_extracter1_fifo_output_reg_first___ETC___d134 =
	     { 5'd0, x__h3643 } * { 5'd0, x__h3681 } ;
  assign _0_MINUS_multiplier_fifo_output_regD_OUT_BITS__ETC__q3 =
	     4'd0 - multiplier_fifo_output_reg$D_OUT[10:7] ;
  assign _4_MINUS_IF_6_MINUS_IF_multiplier_fifo_output_r_ETC___d226 =
	     3'd4 -
	     IF_6_MINUS_IF_multiplier_fifo_output_reg_first_ETC___d202 ;
  assign _4_MINUS_IF_6_MINUS_IF_multiplier_fifo_output_r_ETC___d265 =
	     _4_MINUS_IF_6_MINUS_IF_multiplier_fifo_output_r_ETC___d226 <
	     3'd2 ;
  assign _6_MINUS_IF_multiplier_fifo_output_reg_first__6_ETC___d188 =
	     3'd6 -
	     (multiplier_fifo_output_reg$D_OUT[10] ?
		_0_MINUS_multiplier_fifo_output_regD_OUT_BITS__ETC__q3[2:0] :
		IF_multiplier_fifo_output_reg_first__64_BIT_9__ETC___d181) ;
  assign _theResult____h5244 =
	     NOT_NOT_6_MINUS_IF_multiplier_fifo_output_reg__ETC___d253 &&
	     (IF_6_MINUS_IF_multiplier_fifo_output_reg_first_ETC___d202 !=
	      3'd0 ||
	      ~k_expo__h5237[0]) &&
	     (_4_MINUS_IF_6_MINUS_IF_multiplier_fifo_output_r_ETC___d226 ==
	      3'd0 ||
	      _4_MINUS_IF_6_MINUS_IF_multiplier_fifo_output_r_ETC___d226 ==
	      3'd1 &&
	      IF_IF_6_MINUS_IF_multiplier_fifo_output_reg_fi_ETC___d263 ||
	      NOT_4_MINUS_IF_6_MINUS_IF_multiplier_fifo_outp_ETC___d280) ;
  assign _theResult___fst__h6209 =
	     multiplier_fifo_output_reg_first__64_BIT_6_90__ETC___d193 ?
	       expo_new__h6306 :
	       expo_new__h6275 ;
  assign _theResult___snd_snd__h6358 =
	     multiplier_fifo_output_reg_first__64_BIT_6_90__ETC___d193 ?
	       shift_new__h6305 :
	       2'd0 ;
  assign a__h5281 =
	     IF_IF_NOT_IF_multiplier_fifo_output_reg_first__ETC___d292 +
	     { 6'd0,
	       IF_IF_NOT_IF_multiplier_fifo_output_reg_first__ETC___d292 ==
	       7'd0 &&
	       NOT_6_MINUS_IF_multiplier_fifo_output_reg_firs_ETC___d325 } ;
  assign b__h11043 = { 1'd0, x__h11053 } - 4'd1 ;
  assign b__h11045 = 4'd0 - x__h12064 ;
  assign b__h5402 = x__h5418 - y__h5419 ;
  assign b__h5528 =
	     multiplier_fifo_output_reg$D_OUT[10] ? k__h5590 : k__h5635 ;
  assign b__h6177 =
	     { 6'd0, x__h6180 } <<
	     IF_6_MINUS_IF_multiplier_fifo_output_reg_first_ETC___d202 ;
  assign b__h7390 = { 6'd0, flag_prev_truncate__h5243 } ;
  assign b__h8342 = { 1'd0, x__h8352 } - 4'd1 ;
  assign b__h8344 = 4'd0 - x__h9363 ;
  assign expo__h10702 =
	     (IF_IF_compute_request_put_BIT_7_49_THEN_0_MINU_ETC___d522 ==
	      3'd0) ?
	       3'd1 -
	       IF_IF_compute_request_put_BIT_7_49_THEN_0_MINU_ETC___d522 ==
	       3'd0 &&
	       new_inp__h10695[0] :
	       new_inp__h10695[x__h13252] ;
  assign expo__h7989 =
	     (IF_IF_compute_request_put_BIT_15_47_THEN_0_MIN_ETC___d420 ==
	      3'd0) ?
	       3'd1 -
	       IF_IF_compute_request_put_BIT_15_47_THEN_0_MIN_ETC___d420 ==
	       3'd0 &&
	       new_inp__h7982[0] :
	       new_inp__h7982[x__h10551] ;
  assign expo_new__h6275 =
	     _6_MINUS_IF_multiplier_fifo_output_reg_first__6_ETC___d188 ==
	     3'd0 &&
	     multiplier_fifo_output_reg$D_OUT[6] ;
  assign expo_new__h6306 = x__h6309[0] & multiplier_fifo_output_reg$D_OUT[6] ;
  assign flag_prev_truncate__h5243 =
	     (_4_MINUS_IF_6_MINUS_IF_multiplier_fifo_output_r_ETC___d226 ==
	      3'd0) ?
	       truncated_frac_msb__h5239 :
	       NOT_6_MINUS_IF_multiplier_fifo_output_reg_firs_ETC___d240 ;
  assign frac__h10703 = new_inp__h10695[3:0] << x__h13301 ;
  assign frac__h7990 = new_inp__h7982[3:0] << x__h10600 ;
  assign i1__h7128 = shift_new0__h5234 - 2'd2 ;
  assign i__h7031 = shift_new0__h5234 - 2'd1 ;
  assign k__h5590 = 7'd1 << x__h5633 ;
  assign k__h5635 = ~x__h5647 ;
  assign k_expo__h5237 =
	     NOT_IF_multiplier_fifo_output_reg_first__64_BI_ETC___d214 ?
	       7'd127 :
	       IF_multiplier_fifo_output_reg_first__64_BIT_10_ETC___d209 ;
  assign mask_e__h6207 =
	     3'd1 -
	     _6_MINUS_IF_multiplier_fifo_output_reg_first__6_ETC___d188 ==
	     3'd0 ;
  assign multiplier_fifo_output_regD_OUT_BITS_5_TO_2__q7 =
	     multiplier_fifo_output_reg$D_OUT[5:2] ;
  assign multiplier_fifo_output_reg_first__64_BITS_5_TO_ETC___d236 =
	     multiplier_fifo_output_regD_OUT_BITS_5_TO_2__q7[i__h7031] ;
  assign multiplier_fifo_output_reg_first__64_BITS_9_TO_ETC___d177 =
	     multiplier_fifo_output_reg$D_OUT[9:7] + 3'd1 ;
  assign multiplier_fifo_output_reg_first__64_BIT_0_43__ETC___d246 =
	     multiplier_fifo_output_reg$D_OUT[0] & y__h7118 ;
  assign multiplier_fifo_output_reg_first__64_BIT_0_43__ETC___d250 =
	     multiplier_fifo_output_reg_first__64_BIT_0_43__ETC___d246 &
	     y__h7122 ;
  assign multiplier_fifo_output_reg_first__64_BIT_6_90__ETC___d193 =
	     multiplier_fifo_output_reg$D_OUT[6] & mask_e__h6207 ;
  assign multiplier_fifo_stage0_regD_OUT_BITS_14_TO_5__q14 =
	     multiplier_fifo_stage0_reg$D_OUT[14:5] ;
  assign multiplier_fifo_stage0_reg_first_BITS_24_TO_20_ETC___d20 =
	     multiplier_fifo_stage0_reg$D_OUT[24:20] +
	     multiplier_fifo_stage0_reg$D_OUT[19:15] ;
  assign multiplier_fifo_stage0_reg_first_BITS_4_TO_0_0_ETC___d31 =
	     multiplier_fifo_stage0_reg$D_OUT[4:0] - 5'd1 ;
  assign new_inp__h10695 =
	     compute_request_put[7] ?
	       7'd0 - compute_request_put[6:0] :
	       compute_request_put[6:0] ;
  assign new_inp__h7982 =
	     compute_request_put[15] ?
	       7'd0 - compute_request_put[14:8] :
	       compute_request_put[14:8] ;
  assign shift_new0__h5234 =
	     (_6_MINUS_IF_multiplier_fifo_output_reg_first__6_ETC___d188 ==
	      3'd0) ?
	       _theResult___snd_snd__h6358 :
	       2'd0 ;
  assign shift_new__h6305 = { 1'd0, x__h6923 } ;
  assign stage0_regf_frac__h3528 =
	     _0_CONCAT_IF_extracter1_fifo_output_reg_first___ETC___d134[9:0] <<
	     stage0_regf_fracshift__h3529 ;
  assign stage0_regf_fracshift__h3529 = { 1'd0, x__h3729 } ;
  assign truncated_frac_msb__h5239 =
	     (shift_new0__h5234 == 2'd0) ?
	       multiplier_fifo_output_reg$D_OUT[1] :
	       multiplier_fifo_output_reg_first__64_BITS_5_TO_ETC___d236 ;
  assign x904_BITS_3_TO_0__q6 = x__h6904[3:0] ;
  assign x__h10551 =
	     IF_IF_compute_request_put_BIT_15_47_THEN_0_MIN_ETC___d420 -
	     3'd1 ;
  assign x__h11053 =
	     INV_new_inp0695__q2[6] ?
	       3'd0 :
	       (INV_new_inp0695__q2[5] ?
		  3'd1 :
		  (INV_new_inp0695__q2[4] ?
		     3'd2 :
		     (INV_new_inp0695__q2[3] ?
			3'd3 :
			(INV_new_inp0695__q2[2] ?
			   3'd4 :
			   (INV_new_inp0695__q2[1] ?
			      3'd5 :
			      (INV_new_inp0695__q2[0] ? 3'd6 : 3'd7)))))) ;
  assign x__h12064 = { 1'd0, x__h12071 } ;
  assign x__h12071 =
	     new_inp__h10695[6] ?
	       3'd0 :
	       (new_inp__h10695[5] ?
		  3'd1 :
		  (new_inp__h10695[4] ?
		     3'd2 :
		     (new_inp__h10695[3] ?
			3'd3 :
			(new_inp__h10695[2] ?
			   3'd4 :
			   (new_inp__h10695[1] ?
			      3'd5 :
			      (new_inp__h10695[0] ? 3'd6 : 3'd7)))))) ;
  assign x__h13252 =
	     IF_IF_compute_request_put_BIT_7_49_THEN_0_MINU_ETC___d522 -
	     3'd1 ;
  assign x__h2469 = multiplier_fifo_stage0_reg$D_OUT[14:5] >> x__h2534 ;
  assign x__h2534 =
	     IF_IF_IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_ETC___d55 + 3'd2 ;
  assign x__h2544 = multiplier_fifo_stage0_reg$D_OUT[14:5] >> x__h2568 ;
  assign x__h2568 =
	     IF_IF_IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_ETC___d55 + 3'd1 ;
  assign x__h2696 =
	     { 22'd0,
	       (multiplier_fifo_stage0_reg$D_OUT[14:5] &
		~(10'h3FE << x__h2568)) >>
	       0 } ;
  assign x__h2771 =
	     { 22'd0,
	       (multiplier_fifo_stage0_reg$D_OUT[14:5] &
		~(10'h3FE <<
		  IF_IF_IF_NOT_IF_NOT_multiplier_fifo_stage0_reg_ETC___d55)) >>
	       0 } ;
  assign x__h2933 = x__h2946 & y__h2947 ;
  assign x__h2946 = multiplier_fifo_stage1_reg$D_OUT[0] & y__h2949 ;
  assign x__h3523 =
	     extracter1_fifo_output_reg$D_OUT[11:10] == 2'd1 &&
	     extracter2_fifo_output_reg$D_OUT[11:10] == 2'd2 ||
	     extracter2_fifo_output_reg$D_OUT[11:10] == 2'd1 &&
	     extracter1_fifo_output_reg$D_OUT[11:10] == 2'd2 ;
  assign x__h3611 =
	     extracter1_fifo_output_reg$D_OUT[9] ^
	     extracter2_fifo_output_reg$D_OUT[9] ;
  assign x__h3643 =
	     { IF_extracter1_fifo_output_reg_first__04_BITS_1_ETC___d125[1],
	       extracter1_fifo_output_reg$D_OUT[3:0] } ;
  assign x__h3681 =
	     { IF_extracter1_fifo_output_reg_first__04_BITS_1_ETC___d125[0],
	       extracter2_fifo_output_reg$D_OUT[3:0] } ;
  assign x__h3729 =
	     _0_CONCAT_IF_extracter1_fifo_output_reg_first___ETC___d134[9] ?
	       4'd0 :
	       (_0_CONCAT_IF_extracter1_fifo_output_reg_first___ETC___d134[8] ?
		  4'd1 :
		  (_0_CONCAT_IF_extracter1_fifo_output_reg_first___ETC___d134[7] ?
		     4'd2 :
		     (_0_CONCAT_IF_extracter1_fifo_output_reg_first___ETC___d134[6] ?
			4'd3 :
			(_0_CONCAT_IF_extracter1_fifo_output_reg_first___ETC___d134[5] ?
			   4'd4 :
			   (_0_CONCAT_IF_extracter1_fifo_output_reg_first___ETC___d134[4] ?
			      4'd5 :
			      (_0_CONCAT_IF_extracter1_fifo_output_reg_first___ETC___d134[3] ?
				 4'd6 :
				 (_0_CONCAT_IF_extracter1_fifo_output_reg_first___ETC___d134[2] ?
				    4'd7 :
				    (_0_CONCAT_IF_extracter1_fifo_output_reg_first___ETC___d134[1] ?
				       4'd8 :
				       (_0_CONCAT_IF_extracter1_fifo_output_reg_first___ETC___d134[0] ?
					  4'd9 :
					  4'd10))))))))) ;
  assign x__h5418 = k_expo__h5237 + y__h5420 ;
  assign x__h5633 =
	     3'd6 -
	     _0_MINUS_multiplier_fifo_output_regD_OUT_BITS__ETC__q3[2:0] ;
  assign x__h5647 =
	     7'd127 >>
	     IF_multiplier_fifo_output_reg_first__64_BIT_9__ETC___d181 ;
  assign x__h6180 =
	     (_6_MINUS_IF_multiplier_fifo_output_reg_first__6_ETC___d188 ==
	      3'd0) ?
	       _theResult___fst__h6209 :
	       multiplier_fifo_output_reg$D_OUT[6] ;
  assign x__h6309 =
	     2'd1 <<
	     _6_MINUS_IF_multiplier_fifo_output_reg_first__6_ETC___d188 ;
  assign x__h6904 =
	     { _6_MINUS_IF_multiplier_fifo_output_reg_first__6_ETC___d188 !=
	       3'd0,
	       multiplier_fifo_output_reg$D_OUT[5:2] } >>
	     shift_new0__h5234 ;
  assign x__h6923 = 1'd0 - multiplier_fifo_output_reg$D_OUT[6] ;
  assign x__h7078 =
	     _4_MINUS_IF_6_MINUS_IF_multiplier_fifo_output_r_ETC___d226 -
	     3'd1 ;
  assign x__h7238 =
	     _4_MINUS_IF_6_MINUS_IF_multiplier_fifo_output_r_ETC___d226 -
	     3'd2 ;
  assign x__h8352 =
	     INV_new_inp982__q1[6] ?
	       3'd0 :
	       (INV_new_inp982__q1[5] ?
		  3'd1 :
		  (INV_new_inp982__q1[4] ?
		     3'd2 :
		     (INV_new_inp982__q1[3] ?
			3'd3 :
			(INV_new_inp982__q1[2] ?
			   3'd4 :
			   (INV_new_inp982__q1[1] ?
			      3'd5 :
			      (INV_new_inp982__q1[0] ? 3'd6 : 3'd7)))))) ;
  assign x__h9363 = { 1'd0, x__h9370 } ;
  assign x__h9370 =
	     new_inp__h7982[6] ?
	       3'd0 :
	       (new_inp__h7982[5] ?
		  3'd1 :
		  (new_inp__h7982[4] ?
		     3'd2 :
		     (new_inp__h7982[3] ?
			3'd3 :
			(new_inp__h7982[2] ?
			   3'd4 :
			   (new_inp__h7982[1] ?
			      3'd5 :
			      (new_inp__h7982[0] ? 3'd6 : 3'd7)))))) ;
  assign y__h2947 = multiplier_fifo_stage1_reg$D_OUT[4:2] == 3'd0 ;
  assign y__h2949 = ~multiplier_fifo_stage1_reg$D_OUT[1] ;
  assign y__h5419 = { 6'd0, _theResult____h5244 } ;
  assign y__h5420 =
	     { 3'd0, x__h6904[3:0] } >>
	     _4_MINUS_IF_6_MINUS_IF_multiplier_fifo_output_r_ETC___d226 ;
  assign y__h7118 = ~multiplier_fifo_output_reg$D_OUT[1] ;
  assign y__h7122 =
	     { 28'd0,
	       (multiplier_fifo_output_reg$D_OUT[5:2] &
		~(4'hE << i1__h7128)) >>
	       0 } ==
	     32'd0 ;
  always@(shift_new0__h5234 or
	  multiplier_fifo_output_reg_first__64_BIT_0_43__ETC___d250 or
	  multiplier_fifo_output_reg$D_OUT or
	  multiplier_fifo_output_reg_first__64_BIT_0_43__ETC___d246)
  begin
    case (shift_new0__h5234)
      2'd0:
	  CASE_shift_new0234_0_multiplier_fifo_output_re_ETC__q8 =
	      multiplier_fifo_output_reg$D_OUT[0];
      2'd1:
	  CASE_shift_new0234_0_multiplier_fifo_output_re_ETC__q8 =
	      multiplier_fifo_output_reg_first__64_BIT_0_43__ETC___d246;
      default: CASE_shift_new0234_0_multiplier_fifo_output_re_ETC__q8 =
		   multiplier_fifo_output_reg_first__64_BIT_0_43__ETC___d250;
    endcase
  end
  always@(shift_new0__h5234 or
	  multiplier_fifo_output_reg_first__64_BIT_0_43__ETC___d250 or
	  multiplier_fifo_output_reg$D_OUT or
	  multiplier_fifo_output_reg_first__64_BIT_0_43__ETC___d246)
  begin
    case (shift_new0__h5234)
      2'd0:
	  CASE_shift_new0234_0_NOT_multiplier_fifo_outpu_ETC__q9 =
	      !multiplier_fifo_output_reg$D_OUT[0];
      2'd1:
	  CASE_shift_new0234_0_NOT_multiplier_fifo_outpu_ETC__q9 =
	      !multiplier_fifo_output_reg_first__64_BIT_0_43__ETC___d246;
      default: CASE_shift_new0234_0_NOT_multiplier_fifo_outpu_ETC__q9 =
		   !multiplier_fifo_output_reg_first__64_BIT_0_43__ETC___d250;
    endcase
  end
  always@(multiplier_fifo_output_reg$D_OUT or a__h5281)
  begin
    case (multiplier_fifo_output_reg$D_OUT[13:12])
      2'd0:
	  output_regf_out_posit__h5258 =
	      { multiplier_fifo_output_reg$D_OUT[14],
		multiplier_fifo_output_reg$D_OUT[14] ?
		  7'd0 - a__h5281 :
		  a__h5281 };
      2'd1: output_regf_out_posit__h5258 = 8'd128;
      default: output_regf_out_posit__h5258 = 8'd0;
    endcase
  end
  always@(IF_IF_compute_request_put_BIT_15_47_THEN_0_MIN_ETC___d420)
  begin
    case (IF_IF_compute_request_put_BIT_15_47_THEN_0_MIN_ETC___d420)
      3'd2: x__h10600 = 4'd3;
      3'd3: x__h10600 = 4'd2;
      3'd4: x__h10600 = 4'd1;
      3'd5: x__h10600 = 4'd0;
      default: x__h10600 =
		   (IF_IF_compute_request_put_BIT_15_47_THEN_0_MIN_ETC___d420 <=
		    3'd1) ?
		     4'd4 :
		     4'd0;
    endcase
  end
  always@(IF_IF_compute_request_put_BIT_7_49_THEN_0_MINU_ETC___d522)
  begin
    case (IF_IF_compute_request_put_BIT_7_49_THEN_0_MINU_ETC___d522)
      3'd2: x__h13301 = 4'd3;
      3'd3: x__h13301 = 4'd2;
      3'd4: x__h13301 = 4'd1;
      3'd5: x__h13301 = 4'd0;
      default: x__h13301 =
		   (IF_IF_compute_request_put_BIT_7_49_THEN_0_MINU_ETC___d522 <=
		    3'd1) ?
		     4'd4 :
		     4'd0;
    endcase
  end
endmodule  // mkPNE_test

